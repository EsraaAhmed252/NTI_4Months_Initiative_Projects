
ADC_Fan_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cb4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  00002cb4  00002d48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  008000b4  008000b4  00002d9c  2**0
                  ALLOC
  3 .stab         000028d4  00000000  00000000  00002d9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000018dc  00000000  00000000  00005670  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000070ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000723b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00009280  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000a381  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b304  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b484  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b746  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bfd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <__vector_1>
       8:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <__vector_2>
       c:	0c 94 b1 09 	jmp	0x1362	; 0x1362 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 07 	jmp	0xe8e	; 0xe8e <__vector_10>
      2c:	0c 94 7a 07 	jmp	0xef4	; 0xef4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 eb       	ldi	r30, 0xB4	; 180
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3b       	cpi	r26, 0xB4	; 180
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 eb       	ldi	r26, 0xB4	; 180
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3c       	cpi	r26, 0xC6	; 198
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <main>
      8a:	0c 94 58 16 	jmp	0x2cb0	; 0x2cb0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 21 16 	jmp	0x2c42	; 0x2c42 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e7       	ldi	r26, 0x71	; 113
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3d 16 	jmp	0x2c7a	; 0x2c7a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2d 16 	jmp	0x2c5a	; 0x2c5a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 49 16 	jmp	0x2c92	; 0x2c92 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2d 16 	jmp	0x2c5a	; 0x2c5a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 49 16 	jmp	0x2c92	; 0x2c92 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 21 16 	jmp	0x2c42	; 0x2c42 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e7       	ldi	r24, 0x71	; 113
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3d 16 	jmp	0x2c7a	; 0x2c7a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 29 16 	jmp	0x2c52	; 0x2c52 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	61 e7       	ldi	r22, 0x71	; 113
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 45 16 	jmp	0x2c8a	; 0x2c8a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 2d 16 	jmp	0x2c5a	; 0x2c5a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 49 16 	jmp	0x2c92	; 0x2c92 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 2d 16 	jmp	0x2c5a	; 0x2c5a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 49 16 	jmp	0x2c92	; 0x2c92 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 2d 16 	jmp	0x2c5a	; 0x2c5a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 49 16 	jmp	0x2c92	; 0x2c92 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 31 16 	jmp	0x2c62	; 0x2c62 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 4d 16 	jmp	0x2c9a	; 0x2c9a <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <Timer0_VInit>:
#include "Timer0_Interface.h"

static void (*p2f_1) (void) = NULL;
static void (*p2f_2) (void) = NULL;

void Timer0_VInit(void){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62

	TCNT0 = Timer0_Init_Value ;
     ca6:	e2 e5       	ldi	r30, 0x52	; 82
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	10 82       	st	Z, r1
	CLRBIT(TCCR0,WGM00);
	SETBIT(TCCR0,WGM01);

#elif Timer0_Mode == Timer0_Fast_PWM_Mode

	SETBIT(TCCR0,WGM00);
     cac:	a3 e5       	ldi	r26, 0x53	; 83
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e3 e5       	ldi	r30, 0x53	; 83
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	80 64       	ori	r24, 0x40	; 64
     cb8:	8c 93       	st	X, r24
	SETBIT(TCCR0,WGM01);
     cba:	a3 e5       	ldi	r26, 0x53	; 83
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e3 e5       	ldi	r30, 0x53	; 83
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	88 60       	ori	r24, 0x08	; 8
     cc6:	8c 93       	st	X, r24

#if Timer0_Fast_PWM_MODE == Timer0_Fast_PWM_NONINVERTING

	CLRBIT(TCCR0,COM00);
     cc8:	a3 e5       	ldi	r26, 0x53	; 83
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e3 e5       	ldi	r30, 0x53	; 83
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	8f 7e       	andi	r24, 0xEF	; 239
     cd4:	8c 93       	st	X, r24
	SETBIT(TCCR0,COM01);
     cd6:	a3 e5       	ldi	r26, 0x53	; 83
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e3 e5       	ldi	r30, 0x53	; 83
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	80 62       	ori	r24, 0x20	; 32
     ce2:	8c 93       	st	X, r24
			SETBIT(TCCR0,CS01);
			CLRBIT(TCCR0,CS02);

#elif Timer0_Prescaler == Timer0_Prescalling_64

			SETBIT(TCCR0,CS00);
     ce4:	a3 e5       	ldi	r26, 0x53	; 83
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e3 e5       	ldi	r30, 0x53	; 83
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	81 60       	ori	r24, 0x01	; 1
     cf0:	8c 93       	st	X, r24
			SETBIT(TCCR0,CS01);
     cf2:	a3 e5       	ldi	r26, 0x53	; 83
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e3 e5       	ldi	r30, 0x53	; 83
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	82 60       	ori	r24, 0x02	; 2
     cfe:	8c 93       	st	X, r24
			CLRBIT(TCCR0,CS02);
     d00:	a3 e5       	ldi	r26, 0x53	; 83
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e3 e5       	ldi	r30, 0x53	; 83
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	8b 7f       	andi	r24, 0xFB	; 251
     d0c:	8c 93       	st	X, r24
			SETBIT(TCCR0,CS00);
			SETBIT(TCCR0,CS01);
			SETBIT(TCCR0,CS02);
#endif

}
     d0e:	cf 91       	pop	r28
     d10:	df 91       	pop	r29
     d12:	08 95       	ret

00000d14 <Timer0_INTEnable>:

void Timer0_INTEnable(void){
     d14:	df 93       	push	r29
     d16:	cf 93       	push	r28
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
	SETBIT(TIMSK,OCIE0);

#elif Timer0_Enable_INT == Timer0_No_INT

#endif
}
     d1c:	cf 91       	pop	r28
     d1e:	df 91       	pop	r29
     d20:	08 95       	ret

00000d22 <Set_Init_Value>:

void Set_Init_Value (UINT8 val){
     d22:	df 93       	push	r29
     d24:	cf 93       	push	r28
     d26:	0f 92       	push	r0
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
     d2c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = val ;
     d2e:	e2 e5       	ldi	r30, 0x52	; 82
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	80 83       	st	Z, r24
}
     d36:	0f 90       	pop	r0
     d38:	cf 91       	pop	r28
     d3a:	df 91       	pop	r29
     d3c:	08 95       	ret

00000d3e <Set_OCR_Value>:

void Set_OCR_Value (UINT8 val){
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	0f 92       	push	r0
     d44:	cd b7       	in	r28, 0x3d	; 61
     d46:	de b7       	in	r29, 0x3e	; 62
     d48:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = val ;
     d4a:	ec e5       	ldi	r30, 0x5C	; 92
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	80 83       	st	Z, r24
}
     d52:	0f 90       	pop	r0
     d54:	cf 91       	pop	r28
     d56:	df 91       	pop	r29
     d58:	08 95       	ret

00000d5a <Timer0_OVERFLOW_Check>:

void Timer0_OVERFLOW_Check(void){
     d5a:	df 93       	push	r29
     d5c:	cf 93       	push	r28
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62

	while(READBIT(TIFR,TOV0) == 0);
     d62:	e8 e5       	ldi	r30, 0x58	; 88
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	88 2f       	mov	r24, r24
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	81 70       	andi	r24, 0x01	; 1
     d6e:	90 70       	andi	r25, 0x00	; 0
     d70:	00 97       	sbiw	r24, 0x00	; 0
     d72:	b9 f3       	breq	.-18     	; 0xd62 <Timer0_OVERFLOW_Check+0x8>
	Set_Init_Value(Timer0_Init_Value);
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	0e 94 91 06 	call	0xd22	; 0xd22 <Set_Init_Value>
	SETBIT(TIFR,TOV0);
     d7a:	a8 e5       	ldi	r26, 0x58	; 88
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	e8 e5       	ldi	r30, 0x58	; 88
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	81 60       	ori	r24, 0x01	; 1
     d86:	8c 93       	st	X, r24

}
     d88:	cf 91       	pop	r28
     d8a:	df 91       	pop	r29
     d8c:	08 95       	ret

00000d8e <Timer0_Duty_FastPWM>:

void Timer0_Duty_FastPWM (UINT8 Duty){
     d8e:	df 93       	push	r29
     d90:	cf 93       	push	r28
     d92:	0f 92       	push	r0
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
     d98:	89 83       	std	Y+1, r24	; 0x01

	if(Duty<=100){
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	85 36       	cpi	r24, 0x65	; 101
     d9e:	78 f4       	brcc	.+30     	; 0xdbe <Timer0_Duty_FastPWM+0x30>
#if Timer0_Fast_PWM_MODE == Timer0_Fast_PWM_NONINVERTING

		OCR0 = (Duty * 256 /100) -1;
     da0:	ec e5       	ldi	r30, 0x5C	; 92
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	88 2f       	mov	r24, r24
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	98 2f       	mov	r25, r24
     dac:	88 27       	eor	r24, r24
     dae:	24 e6       	ldi	r18, 0x64	; 100
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	b9 01       	movw	r22, r18
     db4:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <__divmodhi4>
     db8:	cb 01       	movw	r24, r22
     dba:	81 50       	subi	r24, 0x01	; 1
     dbc:	80 83       	st	Z, r24
		OCR0 = (Duty * 256 /100) -1;

#endif
	}

}
     dbe:	0f 90       	pop	r0
     dc0:	cf 91       	pop	r28
     dc2:	df 91       	pop	r29
     dc4:	08 95       	ret

00000dc6 <Timer0_Stop>:

void Timer0_Stop (void){
     dc6:	df 93       	push	r29
     dc8:	cf 93       	push	r28
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62

	CLRBIT(TCCR0,CS00);
     dce:	a3 e5       	ldi	r26, 0x53	; 83
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e3 e5       	ldi	r30, 0x53	; 83
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	8e 7f       	andi	r24, 0xFE	; 254
     dda:	8c 93       	st	X, r24
	CLRBIT(TCCR0,CS01);
     ddc:	a3 e5       	ldi	r26, 0x53	; 83
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	e3 e5       	ldi	r30, 0x53	; 83
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	8d 7f       	andi	r24, 0xFD	; 253
     de8:	8c 93       	st	X, r24
	CLRBIT(TCCR0,CS02);
     dea:	a3 e5       	ldi	r26, 0x53	; 83
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e3 e5       	ldi	r30, 0x53	; 83
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	8b 7f       	andi	r24, 0xFB	; 251
     df6:	8c 93       	st	X, r24

}
     df8:	cf 91       	pop	r28
     dfa:	df 91       	pop	r29
     dfc:	08 95       	ret

00000dfe <Timer0_Duty_Phase_Correct_PWM>:

void Timer0_Duty_Phase_Correct_PWM (UINT8 Duty){
     dfe:	df 93       	push	r29
     e00:	cf 93       	push	r28
     e02:	0f 92       	push	r0
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
     e08:	89 83       	std	Y+1, r24	; 0x01

	if(Duty<=100){
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	85 36       	cpi	r24, 0x65	; 101
     e0e:	b8 f4       	brcc	.+46     	; 0xe3e <Timer0_Duty_Phase_Correct_PWM+0x40>
#if Timer0_Phase_Correct_PWM_MODE == Timer0_Phase_Correct_PWM_NONINVERTING

		OCR0 = ((Duty * 510 /100)/2) -1;
     e10:	ec e5       	ldi	r30, 0x5C	; 92
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	8e ef       	ldi	r24, 0xFE	; 254
     e1c:	91 e0       	ldi	r25, 0x01	; 1
     e1e:	ac 01       	movw	r20, r24
     e20:	24 9f       	mul	r18, r20
     e22:	c0 01       	movw	r24, r0
     e24:	25 9f       	mul	r18, r21
     e26:	90 0d       	add	r25, r0
     e28:	34 9f       	mul	r19, r20
     e2a:	90 0d       	add	r25, r0
     e2c:	11 24       	eor	r1, r1
     e2e:	28 ec       	ldi	r18, 0xC8	; 200
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	b9 01       	movw	r22, r18
     e34:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <__divmodhi4>
     e38:	cb 01       	movw	r24, r22
     e3a:	81 50       	subi	r24, 0x01	; 1
     e3c:	80 83       	st	Z, r24
		OCR0 =  ((Duty * 510 /100)/2) -1;

#endif
	}

}
     e3e:	0f 90       	pop	r0
     e40:	cf 91       	pop	r28
     e42:	df 91       	pop	r29
     e44:	08 95       	ret

00000e46 <Timer0_COM_SetCallBack>:

void Timer0_COM_SetCallBack (void (*p2f_var) (void)){
     e46:	df 93       	push	r29
     e48:	cf 93       	push	r28
     e4a:	00 d0       	rcall	.+0      	; 0xe4c <Timer0_COM_SetCallBack+0x6>
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
     e50:	9a 83       	std	Y+2, r25	; 0x02
     e52:	89 83       	std	Y+1, r24	; 0x01
	p2f_2 = p2f_var ;
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	9a 81       	ldd	r25, Y+2	; 0x02
     e58:	90 93 b7 00 	sts	0x00B7, r25
     e5c:	80 93 b6 00 	sts	0x00B6, r24

}
     e60:	0f 90       	pop	r0
     e62:	0f 90       	pop	r0
     e64:	cf 91       	pop	r28
     e66:	df 91       	pop	r29
     e68:	08 95       	ret

00000e6a <Timer0_OVF_SetCallBack>:

void Timer0_OVF_SetCallBack (void (*p2f_var) (void)){
     e6a:	df 93       	push	r29
     e6c:	cf 93       	push	r28
     e6e:	00 d0       	rcall	.+0      	; 0xe70 <Timer0_OVF_SetCallBack+0x6>
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	9a 83       	std	Y+2, r25	; 0x02
     e76:	89 83       	std	Y+1, r24	; 0x01
	p2f_1 = p2f_var ;
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	9a 81       	ldd	r25, Y+2	; 0x02
     e7c:	90 93 b5 00 	sts	0x00B5, r25
     e80:	80 93 b4 00 	sts	0x00B4, r24

}
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	08 95       	ret

00000e8e <__vector_10>:

void __vector_10(void) __attribute__ ((signal));
void __vector_10(void){
     e8e:	1f 92       	push	r1
     e90:	0f 92       	push	r0
     e92:	0f b6       	in	r0, 0x3f	; 63
     e94:	0f 92       	push	r0
     e96:	11 24       	eor	r1, r1
     e98:	2f 93       	push	r18
     e9a:	3f 93       	push	r19
     e9c:	4f 93       	push	r20
     e9e:	5f 93       	push	r21
     ea0:	6f 93       	push	r22
     ea2:	7f 93       	push	r23
     ea4:	8f 93       	push	r24
     ea6:	9f 93       	push	r25
     ea8:	af 93       	push	r26
     eaa:	bf 93       	push	r27
     eac:	ef 93       	push	r30
     eae:	ff 93       	push	r31
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
	if(p2f_2 != NULL)
     eb8:	80 91 b6 00 	lds	r24, 0x00B6
     ebc:	90 91 b7 00 	lds	r25, 0x00B7
     ec0:	00 97       	sbiw	r24, 0x00	; 0
     ec2:	29 f0       	breq	.+10     	; 0xece <__vector_10+0x40>
		p2f_2();
     ec4:	e0 91 b6 00 	lds	r30, 0x00B6
     ec8:	f0 91 b7 00 	lds	r31, 0x00B7
     ecc:	09 95       	icall
}
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	ff 91       	pop	r31
     ed4:	ef 91       	pop	r30
     ed6:	bf 91       	pop	r27
     ed8:	af 91       	pop	r26
     eda:	9f 91       	pop	r25
     edc:	8f 91       	pop	r24
     ede:	7f 91       	pop	r23
     ee0:	6f 91       	pop	r22
     ee2:	5f 91       	pop	r21
     ee4:	4f 91       	pop	r20
     ee6:	3f 91       	pop	r19
     ee8:	2f 91       	pop	r18
     eea:	0f 90       	pop	r0
     eec:	0f be       	out	0x3f, r0	; 63
     eee:	0f 90       	pop	r0
     ef0:	1f 90       	pop	r1
     ef2:	18 95       	reti

00000ef4 <__vector_11>:

void __vector_11(void) __attribute__ ((signal));
void __vector_11(void){
     ef4:	1f 92       	push	r1
     ef6:	0f 92       	push	r0
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	0f 92       	push	r0
     efc:	11 24       	eor	r1, r1
     efe:	2f 93       	push	r18
     f00:	3f 93       	push	r19
     f02:	4f 93       	push	r20
     f04:	5f 93       	push	r21
     f06:	6f 93       	push	r22
     f08:	7f 93       	push	r23
     f0a:	8f 93       	push	r24
     f0c:	9f 93       	push	r25
     f0e:	af 93       	push	r26
     f10:	bf 93       	push	r27
     f12:	ef 93       	push	r30
     f14:	ff 93       	push	r31
     f16:	df 93       	push	r29
     f18:	cf 93       	push	r28
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
	if(p2f_1 != NULL)
     f1e:	80 91 b4 00 	lds	r24, 0x00B4
     f22:	90 91 b5 00 	lds	r25, 0x00B5
     f26:	00 97       	sbiw	r24, 0x00	; 0
     f28:	29 f0       	breq	.+10     	; 0xf34 <__vector_11+0x40>
		p2f_1();
     f2a:	e0 91 b4 00 	lds	r30, 0x00B4
     f2e:	f0 91 b5 00 	lds	r31, 0x00B5
     f32:	09 95       	icall
}
     f34:	cf 91       	pop	r28
     f36:	df 91       	pop	r29
     f38:	ff 91       	pop	r31
     f3a:	ef 91       	pop	r30
     f3c:	bf 91       	pop	r27
     f3e:	af 91       	pop	r26
     f40:	9f 91       	pop	r25
     f42:	8f 91       	pop	r24
     f44:	7f 91       	pop	r23
     f46:	6f 91       	pop	r22
     f48:	5f 91       	pop	r21
     f4a:	4f 91       	pop	r20
     f4c:	3f 91       	pop	r19
     f4e:	2f 91       	pop	r18
     f50:	0f 90       	pop	r0
     f52:	0f be       	out	0x3f, r0	; 63
     f54:	0f 90       	pop	r0
     f56:	1f 90       	pop	r1
     f58:	18 95       	reti

00000f5a <GI_VEnable>:
 *      Author: Esraa Ahmed Taha
 */

#include "GI_Interface.h"

void GI_VEnable(void){
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
	SETBIT(SREG , GI_Pin);
     f62:	af e5       	ldi	r26, 0x5F	; 95
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	ef e5       	ldi	r30, 0x5F	; 95
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	80 68       	ori	r24, 0x80	; 128
     f6e:	8c 93       	st	X, r24
}
     f70:	cf 91       	pop	r28
     f72:	df 91       	pop	r29
     f74:	08 95       	ret

00000f76 <GI_VDisable>:

void GI_VDisable(void){
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
	CLRBIT(SREG , GI_Pin);
     f7e:	af e5       	ldi	r26, 0x5F	; 95
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	ef e5       	ldi	r30, 0x5F	; 95
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	8f 77       	andi	r24, 0x7F	; 127
     f8a:	8c 93       	st	X, r24
}
     f8c:	cf 91       	pop	r28
     f8e:	df 91       	pop	r29
     f90:	08 95       	ret

00000f92 <EXTI_VEnable>:

static void (*ptr1) (void) = NULL;
static void (*ptr2) (void) = NULL;
static void (*ptr3) (void) = NULL;

void EXTI_VEnable (EXTI_Source source, EXTI_Sence_Mode mode){
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
     f9a:	2a 97       	sbiw	r28, 0x0a	; 10
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	f8 94       	cli
     fa0:	de bf       	out	0x3e, r29	; 62
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	cd bf       	out	0x3d, r28	; 61
     fa6:	89 83       	std	Y+1, r24	; 0x01
     fa8:	6a 83       	std	Y+2, r22	; 0x02
	switch(source){
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	3a 87       	std	Y+10, r19	; 0x0a
     fb2:	29 87       	std	Y+9, r18	; 0x09
     fb4:	89 85       	ldd	r24, Y+9	; 0x09
     fb6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb8:	81 30       	cpi	r24, 0x01	; 1
     fba:	91 05       	cpc	r25, r1
     fbc:	09 f4       	brne	.+2      	; 0xfc0 <EXTI_VEnable+0x2e>
     fbe:	6d c0       	rjmp	.+218    	; 0x109a <EXTI_VEnable+0x108>
     fc0:	29 85       	ldd	r18, Y+9	; 0x09
     fc2:	3a 85       	ldd	r19, Y+10	; 0x0a
     fc4:	22 30       	cpi	r18, 0x02	; 2
     fc6:	31 05       	cpc	r19, r1
     fc8:	09 f4       	brne	.+2      	; 0xfcc <EXTI_VEnable+0x3a>
     fca:	c9 c0       	rjmp	.+402    	; 0x115e <EXTI_VEnable+0x1cc>
     fcc:	89 85       	ldd	r24, Y+9	; 0x09
     fce:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd0:	00 97       	sbiw	r24, 0x00	; 0
     fd2:	09 f0       	breq	.+2      	; 0xfd6 <EXTI_VEnable+0x44>
     fd4:	ea c0       	rjmp	.+468    	; 0x11aa <EXTI_VEnable+0x218>

		case EXTI0:
			switch (mode)
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	38 87       	std	Y+8, r19	; 0x08
     fde:	2f 83       	std	Y+7, r18	; 0x07
     fe0:	8f 81       	ldd	r24, Y+7	; 0x07
     fe2:	98 85       	ldd	r25, Y+8	; 0x08
     fe4:	81 30       	cpi	r24, 0x01	; 1
     fe6:	91 05       	cpc	r25, r1
     fe8:	21 f1       	breq	.+72     	; 0x1032 <EXTI_VEnable+0xa0>
     fea:	2f 81       	ldd	r18, Y+7	; 0x07
     fec:	38 85       	ldd	r19, Y+8	; 0x08
     fee:	22 30       	cpi	r18, 0x02	; 2
     ff0:	31 05       	cpc	r19, r1
     ff2:	2c f4       	brge	.+10     	; 0xffe <EXTI_VEnable+0x6c>
     ff4:	8f 81       	ldd	r24, Y+7	; 0x07
     ff6:	98 85       	ldd	r25, Y+8	; 0x08
     ff8:	00 97       	sbiw	r24, 0x00	; 0
     ffa:	61 f0       	breq	.+24     	; 0x1014 <EXTI_VEnable+0x82>
     ffc:	46 c0       	rjmp	.+140    	; 0x108a <EXTI_VEnable+0xf8>
     ffe:	2f 81       	ldd	r18, Y+7	; 0x07
    1000:	38 85       	ldd	r19, Y+8	; 0x08
    1002:	22 30       	cpi	r18, 0x02	; 2
    1004:	31 05       	cpc	r19, r1
    1006:	21 f1       	breq	.+72     	; 0x1050 <EXTI_VEnable+0xbe>
    1008:	8f 81       	ldd	r24, Y+7	; 0x07
    100a:	98 85       	ldd	r25, Y+8	; 0x08
    100c:	83 30       	cpi	r24, 0x03	; 3
    100e:	91 05       	cpc	r25, r1
    1010:	71 f1       	breq	.+92     	; 0x106e <EXTI_VEnable+0xdc>
    1012:	3b c0       	rjmp	.+118    	; 0x108a <EXTI_VEnable+0xf8>
			{

				case Sence_LOW:
					CLRBIT(MCUCR , ISC00);
    1014:	a5 e5       	ldi	r26, 0x55	; 85
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e5 e5       	ldi	r30, 0x55	; 85
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	8e 7f       	andi	r24, 0xFE	; 254
    1020:	8c 93       	st	X, r24
					CLRBIT(MCUCR , ISC01);
    1022:	a5 e5       	ldi	r26, 0x55	; 85
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e5 e5       	ldi	r30, 0x55	; 85
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	8d 7f       	andi	r24, 0xFD	; 253
    102e:	8c 93       	st	X, r24
    1030:	2c c0       	rjmp	.+88     	; 0x108a <EXTI_VEnable+0xf8>
					break;
				case Sence_ANY:
					SETBIT(MCUCR , ISC00);
    1032:	a5 e5       	ldi	r26, 0x55	; 85
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e5 e5       	ldi	r30, 0x55	; 85
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	81 60       	ori	r24, 0x01	; 1
    103e:	8c 93       	st	X, r24
					CLRBIT(MCUCR , ISC01);
    1040:	a5 e5       	ldi	r26, 0x55	; 85
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e5 e5       	ldi	r30, 0x55	; 85
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	8d 7f       	andi	r24, 0xFD	; 253
    104c:	8c 93       	st	X, r24
    104e:	1d c0       	rjmp	.+58     	; 0x108a <EXTI_VEnable+0xf8>
					break;
				case Sence_Falling:
					CLRBIT(MCUCR , ISC00);
    1050:	a5 e5       	ldi	r26, 0x55	; 85
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e5 e5       	ldi	r30, 0x55	; 85
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	8e 7f       	andi	r24, 0xFE	; 254
    105c:	8c 93       	st	X, r24
					SETBIT(MCUCR , ISC01);
    105e:	a5 e5       	ldi	r26, 0x55	; 85
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e5 e5       	ldi	r30, 0x55	; 85
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	82 60       	ori	r24, 0x02	; 2
    106a:	8c 93       	st	X, r24
    106c:	0e c0       	rjmp	.+28     	; 0x108a <EXTI_VEnable+0xf8>
					break;
				case Sence_Rising:
					SETBIT(MCUCR , ISC00);
    106e:	a5 e5       	ldi	r26, 0x55	; 85
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e5 e5       	ldi	r30, 0x55	; 85
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	81 60       	ori	r24, 0x01	; 1
    107a:	8c 93       	st	X, r24
					SETBIT(MCUCR , ISC01);
    107c:	a5 e5       	ldi	r26, 0x55	; 85
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e5 e5       	ldi	r30, 0x55	; 85
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	82 60       	ori	r24, 0x02	; 2
    1088:	8c 93       	st	X, r24
					break;

			}
			SETBIT(GICR , INT0);
    108a:	ab e5       	ldi	r26, 0x5B	; 91
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	eb e5       	ldi	r30, 0x5B	; 91
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	80 64       	ori	r24, 0x40	; 64
    1096:	8c 93       	st	X, r24
    1098:	88 c0       	rjmp	.+272    	; 0x11aa <EXTI_VEnable+0x218>
			break;

		case EXTI1:
			switch (mode)
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	3e 83       	std	Y+6, r19	; 0x06
    10a2:	2d 83       	std	Y+5, r18	; 0x05
    10a4:	8d 81       	ldd	r24, Y+5	; 0x05
    10a6:	9e 81       	ldd	r25, Y+6	; 0x06
    10a8:	81 30       	cpi	r24, 0x01	; 1
    10aa:	91 05       	cpc	r25, r1
    10ac:	21 f1       	breq	.+72     	; 0x10f6 <EXTI_VEnable+0x164>
    10ae:	2d 81       	ldd	r18, Y+5	; 0x05
    10b0:	3e 81       	ldd	r19, Y+6	; 0x06
    10b2:	22 30       	cpi	r18, 0x02	; 2
    10b4:	31 05       	cpc	r19, r1
    10b6:	2c f4       	brge	.+10     	; 0x10c2 <EXTI_VEnable+0x130>
    10b8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ba:	9e 81       	ldd	r25, Y+6	; 0x06
    10bc:	00 97       	sbiw	r24, 0x00	; 0
    10be:	61 f0       	breq	.+24     	; 0x10d8 <EXTI_VEnable+0x146>
    10c0:	46 c0       	rjmp	.+140    	; 0x114e <EXTI_VEnable+0x1bc>
    10c2:	2d 81       	ldd	r18, Y+5	; 0x05
    10c4:	3e 81       	ldd	r19, Y+6	; 0x06
    10c6:	22 30       	cpi	r18, 0x02	; 2
    10c8:	31 05       	cpc	r19, r1
    10ca:	21 f1       	breq	.+72     	; 0x1114 <EXTI_VEnable+0x182>
    10cc:	8d 81       	ldd	r24, Y+5	; 0x05
    10ce:	9e 81       	ldd	r25, Y+6	; 0x06
    10d0:	83 30       	cpi	r24, 0x03	; 3
    10d2:	91 05       	cpc	r25, r1
    10d4:	71 f1       	breq	.+92     	; 0x1132 <EXTI_VEnable+0x1a0>
    10d6:	3b c0       	rjmp	.+118    	; 0x114e <EXTI_VEnable+0x1bc>
			{

				case Sence_LOW:
					CLRBIT(MCUCR , ISC10);
    10d8:	a5 e5       	ldi	r26, 0x55	; 85
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e5 e5       	ldi	r30, 0x55	; 85
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	8b 7f       	andi	r24, 0xFB	; 251
    10e4:	8c 93       	st	X, r24
					CLRBIT(MCUCR , ISC11);
    10e6:	a5 e5       	ldi	r26, 0x55	; 85
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	e5 e5       	ldi	r30, 0x55	; 85
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	87 7f       	andi	r24, 0xF7	; 247
    10f2:	8c 93       	st	X, r24
    10f4:	2c c0       	rjmp	.+88     	; 0x114e <EXTI_VEnable+0x1bc>
					break;
				case Sence_ANY:
					SETBIT(MCUCR , ISC10);
    10f6:	a5 e5       	ldi	r26, 0x55	; 85
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e5 e5       	ldi	r30, 0x55	; 85
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	84 60       	ori	r24, 0x04	; 4
    1102:	8c 93       	st	X, r24
					CLRBIT(MCUCR , ISC11);
    1104:	a5 e5       	ldi	r26, 0x55	; 85
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	e5 e5       	ldi	r30, 0x55	; 85
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	87 7f       	andi	r24, 0xF7	; 247
    1110:	8c 93       	st	X, r24
    1112:	1d c0       	rjmp	.+58     	; 0x114e <EXTI_VEnable+0x1bc>
					break;
				case Sence_Falling:
					CLRBIT(MCUCR , ISC10);
    1114:	a5 e5       	ldi	r26, 0x55	; 85
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e5 e5       	ldi	r30, 0x55	; 85
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	8b 7f       	andi	r24, 0xFB	; 251
    1120:	8c 93       	st	X, r24
					SETBIT(MCUCR , ISC11);
    1122:	a5 e5       	ldi	r26, 0x55	; 85
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	e5 e5       	ldi	r30, 0x55	; 85
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	88 60       	ori	r24, 0x08	; 8
    112e:	8c 93       	st	X, r24
    1130:	0e c0       	rjmp	.+28     	; 0x114e <EXTI_VEnable+0x1bc>
					break;
				case Sence_Rising:
					SETBIT(MCUCR , ISC10);
    1132:	a5 e5       	ldi	r26, 0x55	; 85
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	e5 e5       	ldi	r30, 0x55	; 85
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	84 60       	ori	r24, 0x04	; 4
    113e:	8c 93       	st	X, r24
					SETBIT(MCUCR , ISC11);
    1140:	a5 e5       	ldi	r26, 0x55	; 85
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	e5 e5       	ldi	r30, 0x55	; 85
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	88 60       	ori	r24, 0x08	; 8
    114c:	8c 93       	st	X, r24
					break;

			}
			SETBIT(GICR , INT1);
    114e:	ab e5       	ldi	r26, 0x5B	; 91
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	eb e5       	ldi	r30, 0x5B	; 91
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	80 68       	ori	r24, 0x80	; 128
    115a:	8c 93       	st	X, r24
    115c:	26 c0       	rjmp	.+76     	; 0x11aa <EXTI_VEnable+0x218>
			break;

		case EXTI2:
			switch (mode)
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	3c 83       	std	Y+4, r19	; 0x04
    1166:	2b 83       	std	Y+3, r18	; 0x03
    1168:	8b 81       	ldd	r24, Y+3	; 0x03
    116a:	9c 81       	ldd	r25, Y+4	; 0x04
    116c:	82 30       	cpi	r24, 0x02	; 2
    116e:	91 05       	cpc	r25, r1
    1170:	31 f0       	breq	.+12     	; 0x117e <EXTI_VEnable+0x1ec>
    1172:	2b 81       	ldd	r18, Y+3	; 0x03
    1174:	3c 81       	ldd	r19, Y+4	; 0x04
    1176:	23 30       	cpi	r18, 0x03	; 3
    1178:	31 05       	cpc	r19, r1
    117a:	49 f0       	breq	.+18     	; 0x118e <EXTI_VEnable+0x1fc>
    117c:	0f c0       	rjmp	.+30     	; 0x119c <EXTI_VEnable+0x20a>
			{

				case Sence_Falling:
					CLRBIT(MCUCSR , ISC2);
    117e:	a4 e5       	ldi	r26, 0x54	; 84
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e4 e5       	ldi	r30, 0x54	; 84
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	8f 7b       	andi	r24, 0xBF	; 191
    118a:	8c 93       	st	X, r24
    118c:	07 c0       	rjmp	.+14     	; 0x119c <EXTI_VEnable+0x20a>
					break;
				case Sence_Rising:
					SETBIT(MCUCSR , ISC2);
    118e:	a4 e5       	ldi	r26, 0x54	; 84
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e4 e5       	ldi	r30, 0x54	; 84
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	80 64       	ori	r24, 0x40	; 64
    119a:	8c 93       	st	X, r24
					break;
				default:
					break;

			}
			SETBIT(GICR , INT2);
    119c:	ab e5       	ldi	r26, 0x5B	; 91
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	eb e5       	ldi	r30, 0x5B	; 91
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	80 62       	ori	r24, 0x20	; 32
    11a8:	8c 93       	st	X, r24
			break;
	}

}
    11aa:	2a 96       	adiw	r28, 0x0a	; 10
    11ac:	0f b6       	in	r0, 0x3f	; 63
    11ae:	f8 94       	cli
    11b0:	de bf       	out	0x3e, r29	; 62
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	cd bf       	out	0x3d, r28	; 61
    11b6:	cf 91       	pop	r28
    11b8:	df 91       	pop	r29
    11ba:	08 95       	ret

000011bc <EXTI_VDisable>:
void EXTI_VDisable (EXTI_Source source){
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	00 d0       	rcall	.+0      	; 0x11c2 <EXTI_VDisable+0x6>
    11c2:	0f 92       	push	r0
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	89 83       	std	Y+1, r24	; 0x01

	switch (source)
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	3b 83       	std	Y+3, r19	; 0x03
    11d2:	2a 83       	std	Y+2, r18	; 0x02
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02
    11d6:	9b 81       	ldd	r25, Y+3	; 0x03
    11d8:	81 30       	cpi	r24, 0x01	; 1
    11da:	91 05       	cpc	r25, r1
    11dc:	89 f0       	breq	.+34     	; 0x1200 <EXTI_VDisable+0x44>
    11de:	2a 81       	ldd	r18, Y+2	; 0x02
    11e0:	3b 81       	ldd	r19, Y+3	; 0x03
    11e2:	22 30       	cpi	r18, 0x02	; 2
    11e4:	31 05       	cpc	r19, r1
    11e6:	a1 f0       	breq	.+40     	; 0x1210 <EXTI_VDisable+0x54>
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	9b 81       	ldd	r25, Y+3	; 0x03
    11ec:	00 97       	sbiw	r24, 0x00	; 0
    11ee:	b9 f4       	brne	.+46     	; 0x121e <EXTI_VDisable+0x62>
	{
		case EXTI0:
			CLRBIT(GICR , INT0);
    11f0:	ab e5       	ldi	r26, 0x5B	; 91
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	eb e5       	ldi	r30, 0x5B	; 91
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	8f 7b       	andi	r24, 0xBF	; 191
    11fc:	8c 93       	st	X, r24
    11fe:	0f c0       	rjmp	.+30     	; 0x121e <EXTI_VDisable+0x62>
			break;
		case EXTI1:
			CLRBIT(GICR , INT1);
    1200:	ab e5       	ldi	r26, 0x5B	; 91
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	eb e5       	ldi	r30, 0x5B	; 91
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	8f 77       	andi	r24, 0x7F	; 127
    120c:	8c 93       	st	X, r24
    120e:	07 c0       	rjmp	.+14     	; 0x121e <EXTI_VDisable+0x62>
			break;
		case EXTI2:
			CLRBIT(GICR , INT2);
    1210:	ab e5       	ldi	r26, 0x5B	; 91
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	eb e5       	ldi	r30, 0x5B	; 91
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	8f 7d       	andi	r24, 0xDF	; 223
    121c:	8c 93       	st	X, r24
			break;
	}

}
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	cf 91       	pop	r28
    1226:	df 91       	pop	r29
    1228:	08 95       	ret

0000122a <EXTI0_SetCallBack>:

void EXTI0_SetCallBack (void (*p2f_var) (void)){
    122a:	df 93       	push	r29
    122c:	cf 93       	push	r28
    122e:	00 d0       	rcall	.+0      	; 0x1230 <EXTI0_SetCallBack+0x6>
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
    1234:	9a 83       	std	Y+2, r25	; 0x02
    1236:	89 83       	std	Y+1, r24	; 0x01

	ptr1 = p2f_var ;
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	9a 81       	ldd	r25, Y+2	; 0x02
    123c:	90 93 b9 00 	sts	0x00B9, r25
    1240:	80 93 b8 00 	sts	0x00B8, r24

}
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <EXTI1_SetCallBack>:

void EXTI1_SetCallBack (void (*p2f_var) (void)){
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	00 d0       	rcall	.+0      	; 0x1254 <EXTI1_SetCallBack+0x6>
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
    1258:	9a 83       	std	Y+2, r25	; 0x02
    125a:	89 83       	std	Y+1, r24	; 0x01

	ptr2 = p2f_var ;
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	9a 81       	ldd	r25, Y+2	; 0x02
    1260:	90 93 bb 00 	sts	0x00BB, r25
    1264:	80 93 ba 00 	sts	0x00BA, r24

}
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	cf 91       	pop	r28
    126e:	df 91       	pop	r29
    1270:	08 95       	ret

00001272 <EXTI2_SetCallBack>:

void EXTI2_SetCallBack (void (*p2f_var) (void)){
    1272:	df 93       	push	r29
    1274:	cf 93       	push	r28
    1276:	00 d0       	rcall	.+0      	; 0x1278 <EXTI2_SetCallBack+0x6>
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
    127c:	9a 83       	std	Y+2, r25	; 0x02
    127e:	89 83       	std	Y+1, r24	; 0x01

	ptr3 = p2f_var ;
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	9a 81       	ldd	r25, Y+2	; 0x02
    1284:	90 93 bd 00 	sts	0x00BD, r25
    1288:	80 93 bc 00 	sts	0x00BC, r24

}
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	cf 91       	pop	r28
    1292:	df 91       	pop	r29
    1294:	08 95       	ret

00001296 <__vector_1>:

void __vector_1(void) __attribute__ ((signal));
void __vector_1(void){
    1296:	1f 92       	push	r1
    1298:	0f 92       	push	r0
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	0f 92       	push	r0
    129e:	11 24       	eor	r1, r1
    12a0:	2f 93       	push	r18
    12a2:	3f 93       	push	r19
    12a4:	4f 93       	push	r20
    12a6:	5f 93       	push	r21
    12a8:	6f 93       	push	r22
    12aa:	7f 93       	push	r23
    12ac:	8f 93       	push	r24
    12ae:	9f 93       	push	r25
    12b0:	af 93       	push	r26
    12b2:	bf 93       	push	r27
    12b4:	ef 93       	push	r30
    12b6:	ff 93       	push	r31
    12b8:	df 93       	push	r29
    12ba:	cf 93       	push	r28
    12bc:	cd b7       	in	r28, 0x3d	; 61
    12be:	de b7       	in	r29, 0x3e	; 62
	if(ptr1 != NULL)
    12c0:	80 91 b8 00 	lds	r24, 0x00B8
    12c4:	90 91 b9 00 	lds	r25, 0x00B9
    12c8:	00 97       	sbiw	r24, 0x00	; 0
    12ca:	29 f0       	breq	.+10     	; 0x12d6 <__vector_1+0x40>
	ptr1();
    12cc:	e0 91 b8 00 	lds	r30, 0x00B8
    12d0:	f0 91 b9 00 	lds	r31, 0x00B9
    12d4:	09 95       	icall
}
    12d6:	cf 91       	pop	r28
    12d8:	df 91       	pop	r29
    12da:	ff 91       	pop	r31
    12dc:	ef 91       	pop	r30
    12de:	bf 91       	pop	r27
    12e0:	af 91       	pop	r26
    12e2:	9f 91       	pop	r25
    12e4:	8f 91       	pop	r24
    12e6:	7f 91       	pop	r23
    12e8:	6f 91       	pop	r22
    12ea:	5f 91       	pop	r21
    12ec:	4f 91       	pop	r20
    12ee:	3f 91       	pop	r19
    12f0:	2f 91       	pop	r18
    12f2:	0f 90       	pop	r0
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	0f 90       	pop	r0
    12f8:	1f 90       	pop	r1
    12fa:	18 95       	reti

000012fc <__vector_2>:

void __vector_2(void) __attribute__ ((signal));
void __vector_2(void){
    12fc:	1f 92       	push	r1
    12fe:	0f 92       	push	r0
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	0f 92       	push	r0
    1304:	11 24       	eor	r1, r1
    1306:	2f 93       	push	r18
    1308:	3f 93       	push	r19
    130a:	4f 93       	push	r20
    130c:	5f 93       	push	r21
    130e:	6f 93       	push	r22
    1310:	7f 93       	push	r23
    1312:	8f 93       	push	r24
    1314:	9f 93       	push	r25
    1316:	af 93       	push	r26
    1318:	bf 93       	push	r27
    131a:	ef 93       	push	r30
    131c:	ff 93       	push	r31
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
	if(ptr2 != NULL)
    1326:	80 91 ba 00 	lds	r24, 0x00BA
    132a:	90 91 bb 00 	lds	r25, 0x00BB
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	29 f0       	breq	.+10     	; 0x133c <__vector_2+0x40>
	ptr2();
    1332:	e0 91 ba 00 	lds	r30, 0x00BA
    1336:	f0 91 bb 00 	lds	r31, 0x00BB
    133a:	09 95       	icall
}
    133c:	cf 91       	pop	r28
    133e:	df 91       	pop	r29
    1340:	ff 91       	pop	r31
    1342:	ef 91       	pop	r30
    1344:	bf 91       	pop	r27
    1346:	af 91       	pop	r26
    1348:	9f 91       	pop	r25
    134a:	8f 91       	pop	r24
    134c:	7f 91       	pop	r23
    134e:	6f 91       	pop	r22
    1350:	5f 91       	pop	r21
    1352:	4f 91       	pop	r20
    1354:	3f 91       	pop	r19
    1356:	2f 91       	pop	r18
    1358:	0f 90       	pop	r0
    135a:	0f be       	out	0x3f, r0	; 63
    135c:	0f 90       	pop	r0
    135e:	1f 90       	pop	r1
    1360:	18 95       	reti

00001362 <__vector_3>:

void __vector_3(void) __attribute__ ((signal));
void __vector_3(void){
    1362:	1f 92       	push	r1
    1364:	0f 92       	push	r0
    1366:	0f b6       	in	r0, 0x3f	; 63
    1368:	0f 92       	push	r0
    136a:	11 24       	eor	r1, r1
    136c:	2f 93       	push	r18
    136e:	3f 93       	push	r19
    1370:	4f 93       	push	r20
    1372:	5f 93       	push	r21
    1374:	6f 93       	push	r22
    1376:	7f 93       	push	r23
    1378:	8f 93       	push	r24
    137a:	9f 93       	push	r25
    137c:	af 93       	push	r26
    137e:	bf 93       	push	r27
    1380:	ef 93       	push	r30
    1382:	ff 93       	push	r31
    1384:	df 93       	push	r29
    1386:	cf 93       	push	r28
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
	if(ptr3 != NULL)
    138c:	80 91 bc 00 	lds	r24, 0x00BC
    1390:	90 91 bd 00 	lds	r25, 0x00BD
    1394:	00 97       	sbiw	r24, 0x00	; 0
    1396:	29 f0       	breq	.+10     	; 0x13a2 <__vector_3+0x40>
	ptr3();
    1398:	e0 91 bc 00 	lds	r30, 0x00BC
    139c:	f0 91 bd 00 	lds	r31, 0x00BD
    13a0:	09 95       	icall
}
    13a2:	cf 91       	pop	r28
    13a4:	df 91       	pop	r29
    13a6:	ff 91       	pop	r31
    13a8:	ef 91       	pop	r30
    13aa:	bf 91       	pop	r27
    13ac:	af 91       	pop	r26
    13ae:	9f 91       	pop	r25
    13b0:	8f 91       	pop	r24
    13b2:	7f 91       	pop	r23
    13b4:	6f 91       	pop	r22
    13b6:	5f 91       	pop	r21
    13b8:	4f 91       	pop	r20
    13ba:	3f 91       	pop	r19
    13bc:	2f 91       	pop	r18
    13be:	0f 90       	pop	r0
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	0f 90       	pop	r0
    13c4:	1f 90       	pop	r1
    13c6:	18 95       	reti

000013c8 <Dio_Init>:
 *      Author: Esraa Ahmed Taha
 */

#include "Dio.h"

void Dio_Init(){
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	00 d0       	rcall	.+0      	; 0x13ce <Dio_Init+0x6>
    13ce:	00 d0       	rcall	.+0      	; 0x13d0 <Dio_Init+0x8>
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62

	for (int i=0 ; i< No_of_DIO ; i++){
    13d4:	1a 82       	std	Y+2, r1	; 0x02
    13d6:	19 82       	std	Y+1, r1	; 0x01
    13d8:	c7 c1       	rjmp	.+910    	; 0x1768 <Dio_Init+0x3a0>

		switch (Pin_Cfg[i].Port){
    13da:	29 81       	ldd	r18, Y+1	; 0x01
    13dc:	3a 81       	ldd	r19, Y+2	; 0x02
    13de:	c9 01       	movw	r24, r18
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	82 0f       	add	r24, r18
    13e6:	93 1f       	adc	r25, r19
    13e8:	fc 01       	movw	r30, r24
    13ea:	e7 58       	subi	r30, 0x87	; 135
    13ec:	ff 4f       	sbci	r31, 0xFF	; 255
    13ee:	80 81       	ld	r24, Z
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	3c 83       	std	Y+4, r19	; 0x04
    13f6:	2b 83       	std	Y+3, r18	; 0x03
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	9c 81       	ldd	r25, Y+4	; 0x04
    13fc:	81 30       	cpi	r24, 0x01	; 1
    13fe:	91 05       	cpc	r25, r1
    1400:	09 f4       	brne	.+2      	; 0x1404 <Dio_Init+0x3c>
    1402:	7d c0       	rjmp	.+250    	; 0x14fe <Dio_Init+0x136>
    1404:	2b 81       	ldd	r18, Y+3	; 0x03
    1406:	3c 81       	ldd	r19, Y+4	; 0x04
    1408:	22 30       	cpi	r18, 0x02	; 2
    140a:	31 05       	cpc	r19, r1
    140c:	2c f4       	brge	.+10     	; 0x1418 <Dio_Init+0x50>
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	9c 81       	ldd	r25, Y+4	; 0x04
    1412:	00 97       	sbiw	r24, 0x00	; 0
    1414:	71 f0       	breq	.+28     	; 0x1432 <Dio_Init+0x6a>
    1416:	a3 c1       	rjmp	.+838    	; 0x175e <Dio_Init+0x396>
    1418:	2b 81       	ldd	r18, Y+3	; 0x03
    141a:	3c 81       	ldd	r19, Y+4	; 0x04
    141c:	22 30       	cpi	r18, 0x02	; 2
    141e:	31 05       	cpc	r19, r1
    1420:	09 f4       	brne	.+2      	; 0x1424 <Dio_Init+0x5c>
    1422:	d3 c0       	rjmp	.+422    	; 0x15ca <Dio_Init+0x202>
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	9c 81       	ldd	r25, Y+4	; 0x04
    1428:	83 30       	cpi	r24, 0x03	; 3
    142a:	91 05       	cpc	r25, r1
    142c:	09 f4       	brne	.+2      	; 0x1430 <Dio_Init+0x68>
    142e:	33 c1       	rjmp	.+614    	; 0x1696 <Dio_Init+0x2ce>
    1430:	96 c1       	rjmp	.+812    	; 0x175e <Dio_Init+0x396>

			case Dio_PORTA :
				if(Pin_Cfg[i].Dir){
    1432:	29 81       	ldd	r18, Y+1	; 0x01
    1434:	3a 81       	ldd	r19, Y+2	; 0x02
    1436:	c9 01       	movw	r24, r18
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	82 0f       	add	r24, r18
    143e:	93 1f       	adc	r25, r19
    1440:	fc 01       	movw	r30, r24
    1442:	e5 58       	subi	r30, 0x85	; 133
    1444:	ff 4f       	sbci	r31, 0xFF	; 255
    1446:	80 81       	ld	r24, Z
    1448:	88 23       	and	r24, r24
    144a:	f1 f0       	breq	.+60     	; 0x1488 <Dio_Init+0xc0>
					SETBIT(DDRA , Pin_Cfg[i].Pin);
    144c:	aa e3       	ldi	r26, 0x3A	; 58
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	ea e3       	ldi	r30, 0x3A	; 58
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	48 2f       	mov	r20, r24
    1458:	29 81       	ldd	r18, Y+1	; 0x01
    145a:	3a 81       	ldd	r19, Y+2	; 0x02
    145c:	c9 01       	movw	r24, r18
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	82 0f       	add	r24, r18
    1464:	93 1f       	adc	r25, r19
    1466:	fc 01       	movw	r30, r24
    1468:	e6 58       	subi	r30, 0x86	; 134
    146a:	ff 4f       	sbci	r31, 0xFF	; 255
    146c:	80 81       	ld	r24, Z
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	02 2e       	mov	r0, r18
    1478:	02 c0       	rjmp	.+4      	; 0x147e <Dio_Init+0xb6>
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	0a 94       	dec	r0
    1480:	e2 f7       	brpl	.-8      	; 0x147a <Dio_Init+0xb2>
    1482:	84 2b       	or	r24, r20
    1484:	8c 93       	st	X, r24
    1486:	6b c1       	rjmp	.+726    	; 0x175e <Dio_Init+0x396>
				}
				else{
					CLRBIT(DDRA , Pin_Cfg[i].Pin);
    1488:	aa e3       	ldi	r26, 0x3A	; 58
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	ea e3       	ldi	r30, 0x3A	; 58
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	48 2f       	mov	r20, r24
    1494:	29 81       	ldd	r18, Y+1	; 0x01
    1496:	3a 81       	ldd	r19, Y+2	; 0x02
    1498:	c9 01       	movw	r24, r18
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	82 0f       	add	r24, r18
    14a0:	93 1f       	adc	r25, r19
    14a2:	fc 01       	movw	r30, r24
    14a4:	e6 58       	subi	r30, 0x86	; 134
    14a6:	ff 4f       	sbci	r31, 0xFF	; 255
    14a8:	80 81       	ld	r24, Z
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <Dio_Init+0xf0>
    14b4:	88 0f       	add	r24, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	2a 95       	dec	r18
    14ba:	e2 f7       	brpl	.-8      	; 0x14b4 <Dio_Init+0xec>
    14bc:	80 95       	com	r24
    14be:	84 23       	and	r24, r20
    14c0:	8c 93       	st	X, r24
					SETBIT(PORTA , Pin_Cfg[i].Pin);
    14c2:	ab e3       	ldi	r26, 0x3B	; 59
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	eb e3       	ldi	r30, 0x3B	; 59
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	48 2f       	mov	r20, r24
    14ce:	29 81       	ldd	r18, Y+1	; 0x01
    14d0:	3a 81       	ldd	r19, Y+2	; 0x02
    14d2:	c9 01       	movw	r24, r18
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	82 0f       	add	r24, r18
    14da:	93 1f       	adc	r25, r19
    14dc:	fc 01       	movw	r30, r24
    14de:	e6 58       	subi	r30, 0x86	; 134
    14e0:	ff 4f       	sbci	r31, 0xFF	; 255
    14e2:	80 81       	ld	r24, Z
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	02 2e       	mov	r0, r18
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <Dio_Init+0x12c>
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	0a 94       	dec	r0
    14f6:	e2 f7       	brpl	.-8      	; 0x14f0 <Dio_Init+0x128>
    14f8:	84 2b       	or	r24, r20
    14fa:	8c 93       	st	X, r24
    14fc:	30 c1       	rjmp	.+608    	; 0x175e <Dio_Init+0x396>
				}
				break;

			case Dio_PORTB :
				if(Pin_Cfg[i].Dir){
    14fe:	29 81       	ldd	r18, Y+1	; 0x01
    1500:	3a 81       	ldd	r19, Y+2	; 0x02
    1502:	c9 01       	movw	r24, r18
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	82 0f       	add	r24, r18
    150a:	93 1f       	adc	r25, r19
    150c:	fc 01       	movw	r30, r24
    150e:	e5 58       	subi	r30, 0x85	; 133
    1510:	ff 4f       	sbci	r31, 0xFF	; 255
    1512:	80 81       	ld	r24, Z
    1514:	88 23       	and	r24, r24
    1516:	f1 f0       	breq	.+60     	; 0x1554 <Dio_Init+0x18c>
					SETBIT(DDRB , Pin_Cfg[i].Pin);
    1518:	a7 e3       	ldi	r26, 0x37	; 55
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	e7 e3       	ldi	r30, 0x37	; 55
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	48 2f       	mov	r20, r24
    1524:	29 81       	ldd	r18, Y+1	; 0x01
    1526:	3a 81       	ldd	r19, Y+2	; 0x02
    1528:	c9 01       	movw	r24, r18
    152a:	88 0f       	add	r24, r24
    152c:	99 1f       	adc	r25, r25
    152e:	82 0f       	add	r24, r18
    1530:	93 1f       	adc	r25, r19
    1532:	fc 01       	movw	r30, r24
    1534:	e6 58       	subi	r30, 0x86	; 134
    1536:	ff 4f       	sbci	r31, 0xFF	; 255
    1538:	80 81       	ld	r24, Z
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	02 2e       	mov	r0, r18
    1544:	02 c0       	rjmp	.+4      	; 0x154a <Dio_Init+0x182>
    1546:	88 0f       	add	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	0a 94       	dec	r0
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <Dio_Init+0x17e>
    154e:	84 2b       	or	r24, r20
    1550:	8c 93       	st	X, r24
    1552:	05 c1       	rjmp	.+522    	; 0x175e <Dio_Init+0x396>
				}
				else{
					CLRBIT(DDRB , Pin_Cfg[i].Pin);
    1554:	a7 e3       	ldi	r26, 0x37	; 55
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e7 e3       	ldi	r30, 0x37	; 55
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	48 2f       	mov	r20, r24
    1560:	29 81       	ldd	r18, Y+1	; 0x01
    1562:	3a 81       	ldd	r19, Y+2	; 0x02
    1564:	c9 01       	movw	r24, r18
    1566:	88 0f       	add	r24, r24
    1568:	99 1f       	adc	r25, r25
    156a:	82 0f       	add	r24, r18
    156c:	93 1f       	adc	r25, r19
    156e:	fc 01       	movw	r30, r24
    1570:	e6 58       	subi	r30, 0x86	; 134
    1572:	ff 4f       	sbci	r31, 0xFF	; 255
    1574:	80 81       	ld	r24, Z
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <Dio_Init+0x1bc>
    1580:	88 0f       	add	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	2a 95       	dec	r18
    1586:	e2 f7       	brpl	.-8      	; 0x1580 <Dio_Init+0x1b8>
    1588:	80 95       	com	r24
    158a:	84 23       	and	r24, r20
    158c:	8c 93       	st	X, r24
					SETBIT(PORTB , Pin_Cfg[i].Pin);
    158e:	a8 e3       	ldi	r26, 0x38	; 56
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	e8 e3       	ldi	r30, 0x38	; 56
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	48 2f       	mov	r20, r24
    159a:	29 81       	ldd	r18, Y+1	; 0x01
    159c:	3a 81       	ldd	r19, Y+2	; 0x02
    159e:	c9 01       	movw	r24, r18
    15a0:	88 0f       	add	r24, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	82 0f       	add	r24, r18
    15a6:	93 1f       	adc	r25, r19
    15a8:	fc 01       	movw	r30, r24
    15aa:	e6 58       	subi	r30, 0x86	; 134
    15ac:	ff 4f       	sbci	r31, 0xFF	; 255
    15ae:	80 81       	ld	r24, Z
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	02 2e       	mov	r0, r18
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <Dio_Init+0x1f8>
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	0a 94       	dec	r0
    15c2:	e2 f7       	brpl	.-8      	; 0x15bc <Dio_Init+0x1f4>
    15c4:	84 2b       	or	r24, r20
    15c6:	8c 93       	st	X, r24
    15c8:	ca c0       	rjmp	.+404    	; 0x175e <Dio_Init+0x396>
				}
				break;

			case Dio_PORTC :
				if(Pin_Cfg[i].Dir){
    15ca:	29 81       	ldd	r18, Y+1	; 0x01
    15cc:	3a 81       	ldd	r19, Y+2	; 0x02
    15ce:	c9 01       	movw	r24, r18
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	82 0f       	add	r24, r18
    15d6:	93 1f       	adc	r25, r19
    15d8:	fc 01       	movw	r30, r24
    15da:	e5 58       	subi	r30, 0x85	; 133
    15dc:	ff 4f       	sbci	r31, 0xFF	; 255
    15de:	80 81       	ld	r24, Z
    15e0:	88 23       	and	r24, r24
    15e2:	f1 f0       	breq	.+60     	; 0x1620 <Dio_Init+0x258>
					SETBIT(DDRC , Pin_Cfg[i].Pin);
    15e4:	a4 e3       	ldi	r26, 0x34	; 52
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e4 e3       	ldi	r30, 0x34	; 52
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	48 2f       	mov	r20, r24
    15f0:	29 81       	ldd	r18, Y+1	; 0x01
    15f2:	3a 81       	ldd	r19, Y+2	; 0x02
    15f4:	c9 01       	movw	r24, r18
    15f6:	88 0f       	add	r24, r24
    15f8:	99 1f       	adc	r25, r25
    15fa:	82 0f       	add	r24, r18
    15fc:	93 1f       	adc	r25, r19
    15fe:	fc 01       	movw	r30, r24
    1600:	e6 58       	subi	r30, 0x86	; 134
    1602:	ff 4f       	sbci	r31, 0xFF	; 255
    1604:	80 81       	ld	r24, Z
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	02 2e       	mov	r0, r18
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <Dio_Init+0x24e>
    1612:	88 0f       	add	r24, r24
    1614:	99 1f       	adc	r25, r25
    1616:	0a 94       	dec	r0
    1618:	e2 f7       	brpl	.-8      	; 0x1612 <Dio_Init+0x24a>
    161a:	84 2b       	or	r24, r20
    161c:	8c 93       	st	X, r24
    161e:	9f c0       	rjmp	.+318    	; 0x175e <Dio_Init+0x396>
				}
				else{
					CLRBIT(DDRC , Pin_Cfg[i].Pin);
    1620:	a4 e3       	ldi	r26, 0x34	; 52
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	e4 e3       	ldi	r30, 0x34	; 52
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	48 2f       	mov	r20, r24
    162c:	29 81       	ldd	r18, Y+1	; 0x01
    162e:	3a 81       	ldd	r19, Y+2	; 0x02
    1630:	c9 01       	movw	r24, r18
    1632:	88 0f       	add	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	82 0f       	add	r24, r18
    1638:	93 1f       	adc	r25, r19
    163a:	fc 01       	movw	r30, r24
    163c:	e6 58       	subi	r30, 0x86	; 134
    163e:	ff 4f       	sbci	r31, 0xFF	; 255
    1640:	80 81       	ld	r24, Z
    1642:	28 2f       	mov	r18, r24
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <Dio_Init+0x288>
    164c:	88 0f       	add	r24, r24
    164e:	99 1f       	adc	r25, r25
    1650:	2a 95       	dec	r18
    1652:	e2 f7       	brpl	.-8      	; 0x164c <Dio_Init+0x284>
    1654:	80 95       	com	r24
    1656:	84 23       	and	r24, r20
    1658:	8c 93       	st	X, r24
					SETBIT(PORTC , Pin_Cfg[i].Pin);
    165a:	a5 e3       	ldi	r26, 0x35	; 53
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	e5 e3       	ldi	r30, 0x35	; 53
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	48 2f       	mov	r20, r24
    1666:	29 81       	ldd	r18, Y+1	; 0x01
    1668:	3a 81       	ldd	r19, Y+2	; 0x02
    166a:	c9 01       	movw	r24, r18
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	82 0f       	add	r24, r18
    1672:	93 1f       	adc	r25, r19
    1674:	fc 01       	movw	r30, r24
    1676:	e6 58       	subi	r30, 0x86	; 134
    1678:	ff 4f       	sbci	r31, 0xFF	; 255
    167a:	80 81       	ld	r24, Z
    167c:	28 2f       	mov	r18, r24
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	02 2e       	mov	r0, r18
    1686:	02 c0       	rjmp	.+4      	; 0x168c <Dio_Init+0x2c4>
    1688:	88 0f       	add	r24, r24
    168a:	99 1f       	adc	r25, r25
    168c:	0a 94       	dec	r0
    168e:	e2 f7       	brpl	.-8      	; 0x1688 <Dio_Init+0x2c0>
    1690:	84 2b       	or	r24, r20
    1692:	8c 93       	st	X, r24
    1694:	64 c0       	rjmp	.+200    	; 0x175e <Dio_Init+0x396>
				}
				break;

			case Dio_PORTD :
				if(Pin_Cfg[i].Dir){
    1696:	29 81       	ldd	r18, Y+1	; 0x01
    1698:	3a 81       	ldd	r19, Y+2	; 0x02
    169a:	c9 01       	movw	r24, r18
    169c:	88 0f       	add	r24, r24
    169e:	99 1f       	adc	r25, r25
    16a0:	82 0f       	add	r24, r18
    16a2:	93 1f       	adc	r25, r19
    16a4:	fc 01       	movw	r30, r24
    16a6:	e5 58       	subi	r30, 0x85	; 133
    16a8:	ff 4f       	sbci	r31, 0xFF	; 255
    16aa:	80 81       	ld	r24, Z
    16ac:	88 23       	and	r24, r24
    16ae:	f1 f0       	breq	.+60     	; 0x16ec <Dio_Init+0x324>
					SETBIT(DDRD , Pin_Cfg[i].Pin);
    16b0:	a1 e3       	ldi	r26, 0x31	; 49
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	e1 e3       	ldi	r30, 0x31	; 49
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	48 2f       	mov	r20, r24
    16bc:	29 81       	ldd	r18, Y+1	; 0x01
    16be:	3a 81       	ldd	r19, Y+2	; 0x02
    16c0:	c9 01       	movw	r24, r18
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	82 0f       	add	r24, r18
    16c8:	93 1f       	adc	r25, r19
    16ca:	fc 01       	movw	r30, r24
    16cc:	e6 58       	subi	r30, 0x86	; 134
    16ce:	ff 4f       	sbci	r31, 0xFF	; 255
    16d0:	80 81       	ld	r24, Z
    16d2:	28 2f       	mov	r18, r24
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	02 2e       	mov	r0, r18
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <Dio_Init+0x31a>
    16de:	88 0f       	add	r24, r24
    16e0:	99 1f       	adc	r25, r25
    16e2:	0a 94       	dec	r0
    16e4:	e2 f7       	brpl	.-8      	; 0x16de <Dio_Init+0x316>
    16e6:	84 2b       	or	r24, r20
    16e8:	8c 93       	st	X, r24
    16ea:	39 c0       	rjmp	.+114    	; 0x175e <Dio_Init+0x396>
				}
				else{
					CLRBIT(DDRD , Pin_Cfg[i].Pin);
    16ec:	a1 e3       	ldi	r26, 0x31	; 49
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	e1 e3       	ldi	r30, 0x31	; 49
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	48 2f       	mov	r20, r24
    16f8:	29 81       	ldd	r18, Y+1	; 0x01
    16fa:	3a 81       	ldd	r19, Y+2	; 0x02
    16fc:	c9 01       	movw	r24, r18
    16fe:	88 0f       	add	r24, r24
    1700:	99 1f       	adc	r25, r25
    1702:	82 0f       	add	r24, r18
    1704:	93 1f       	adc	r25, r19
    1706:	fc 01       	movw	r30, r24
    1708:	e6 58       	subi	r30, 0x86	; 134
    170a:	ff 4f       	sbci	r31, 0xFF	; 255
    170c:	80 81       	ld	r24, Z
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	02 c0       	rjmp	.+4      	; 0x171c <Dio_Init+0x354>
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	2a 95       	dec	r18
    171e:	e2 f7       	brpl	.-8      	; 0x1718 <Dio_Init+0x350>
    1720:	80 95       	com	r24
    1722:	84 23       	and	r24, r20
    1724:	8c 93       	st	X, r24
					SETBIT(PORTD , Pin_Cfg[i].Pin);
    1726:	a2 e3       	ldi	r26, 0x32	; 50
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e2 e3       	ldi	r30, 0x32	; 50
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	48 2f       	mov	r20, r24
    1732:	29 81       	ldd	r18, Y+1	; 0x01
    1734:	3a 81       	ldd	r19, Y+2	; 0x02
    1736:	c9 01       	movw	r24, r18
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	82 0f       	add	r24, r18
    173e:	93 1f       	adc	r25, r19
    1740:	fc 01       	movw	r30, r24
    1742:	e6 58       	subi	r30, 0x86	; 134
    1744:	ff 4f       	sbci	r31, 0xFF	; 255
    1746:	80 81       	ld	r24, Z
    1748:	28 2f       	mov	r18, r24
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	02 c0       	rjmp	.+4      	; 0x1756 <Dio_Init+0x38e>
    1752:	88 0f       	add	r24, r24
    1754:	99 1f       	adc	r25, r25
    1756:	2a 95       	dec	r18
    1758:	e2 f7       	brpl	.-8      	; 0x1752 <Dio_Init+0x38a>
    175a:	84 2b       	or	r24, r20
    175c:	8c 93       	st	X, r24

#include "Dio.h"

void Dio_Init(){

	for (int i=0 ; i< No_of_DIO ; i++){
    175e:	89 81       	ldd	r24, Y+1	; 0x01
    1760:	9a 81       	ldd	r25, Y+2	; 0x02
    1762:	01 96       	adiw	r24, 0x01	; 1
    1764:	9a 83       	std	Y+2, r25	; 0x02
    1766:	89 83       	std	Y+1, r24	; 0x01
    1768:	20 91 b2 00 	lds	r18, 0x00B2
    176c:	30 91 b3 00 	lds	r19, 0x00B3
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	9a 81       	ldd	r25, Y+2	; 0x02
    1774:	82 17       	cp	r24, r18
    1776:	93 07       	cpc	r25, r19
    1778:	0c f4       	brge	.+2      	; 0x177c <Dio_Init+0x3b4>
    177a:	2f ce       	rjmp	.-930    	; 0x13da <Dio_Init+0x12>
					SETBIT(PORTD , Pin_Cfg[i].Pin);
				}
				break;
		}
	}
}
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <Dio_WriteChannel>:

void Dio_WriteChannel(Pin_Channel_Type channel, Pin_Status_Type status){
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	00 d0       	rcall	.+0      	; 0x1790 <Dio_WriteChannel+0x6>
    1790:	00 d0       	rcall	.+0      	; 0x1792 <Dio_WriteChannel+0x8>
    1792:	00 d0       	rcall	.+0      	; 0x1794 <Dio_WriteChannel+0xa>
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
    1798:	8b 83       	std	Y+3, r24	; 0x03
    179a:	6c 83       	std	Y+4, r22	; 0x04

	Dio_Port_Type port = channel/8;
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	86 95       	lsr	r24
    17a0:	86 95       	lsr	r24
    17a2:	86 95       	lsr	r24
    17a4:	8a 83       	std	Y+2, r24	; 0x02
	UINT8 pin = channel%8;
    17a6:	8b 81       	ldd	r24, Y+3	; 0x03
    17a8:	87 70       	andi	r24, 0x07	; 7
    17aa:	89 83       	std	Y+1, r24	; 0x01

	switch (port) {
    17ac:	8a 81       	ldd	r24, Y+2	; 0x02
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	3e 83       	std	Y+6, r19	; 0x06
    17b4:	2d 83       	std	Y+5, r18	; 0x05
    17b6:	8d 81       	ldd	r24, Y+5	; 0x05
    17b8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ba:	81 30       	cpi	r24, 0x01	; 1
    17bc:	91 05       	cpc	r25, r1
    17be:	09 f4       	brne	.+2      	; 0x17c2 <Dio_WriteChannel+0x38>
    17c0:	43 c0       	rjmp	.+134    	; 0x1848 <Dio_WriteChannel+0xbe>
    17c2:	2d 81       	ldd	r18, Y+5	; 0x05
    17c4:	3e 81       	ldd	r19, Y+6	; 0x06
    17c6:	22 30       	cpi	r18, 0x02	; 2
    17c8:	31 05       	cpc	r19, r1
    17ca:	2c f4       	brge	.+10     	; 0x17d6 <Dio_WriteChannel+0x4c>
    17cc:	8d 81       	ldd	r24, Y+5	; 0x05
    17ce:	9e 81       	ldd	r25, Y+6	; 0x06
    17d0:	00 97       	sbiw	r24, 0x00	; 0
    17d2:	71 f0       	breq	.+28     	; 0x17f0 <Dio_WriteChannel+0x66>
    17d4:	bc c0       	rjmp	.+376    	; 0x194e <Dio_WriteChannel+0x1c4>
    17d6:	2d 81       	ldd	r18, Y+5	; 0x05
    17d8:	3e 81       	ldd	r19, Y+6	; 0x06
    17da:	22 30       	cpi	r18, 0x02	; 2
    17dc:	31 05       	cpc	r19, r1
    17de:	09 f4       	brne	.+2      	; 0x17e2 <Dio_WriteChannel+0x58>
    17e0:	5f c0       	rjmp	.+190    	; 0x18a0 <Dio_WriteChannel+0x116>
    17e2:	8d 81       	ldd	r24, Y+5	; 0x05
    17e4:	9e 81       	ldd	r25, Y+6	; 0x06
    17e6:	83 30       	cpi	r24, 0x03	; 3
    17e8:	91 05       	cpc	r25, r1
    17ea:	09 f4       	brne	.+2      	; 0x17ee <Dio_WriteChannel+0x64>
    17ec:	85 c0       	rjmp	.+266    	; 0x18f8 <Dio_WriteChannel+0x16e>
    17ee:	af c0       	rjmp	.+350    	; 0x194e <Dio_WriteChannel+0x1c4>
		case Dio_PORTA :
				if(status == LOW){
    17f0:	8c 81       	ldd	r24, Y+4	; 0x04
    17f2:	88 23       	and	r24, r24
    17f4:	a9 f4       	brne	.+42     	; 0x1820 <Dio_WriteChannel+0x96>
					CLRBIT(PORTA , pin);
    17f6:	ab e3       	ldi	r26, 0x3B	; 59
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	eb e3       	ldi	r30, 0x3B	; 59
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	48 2f       	mov	r20, r24
    1802:	89 81       	ldd	r24, Y+1	; 0x01
    1804:	28 2f       	mov	r18, r24
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	02 2e       	mov	r0, r18
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <Dio_WriteChannel+0x8a>
    1810:	88 0f       	add	r24, r24
    1812:	99 1f       	adc	r25, r25
    1814:	0a 94       	dec	r0
    1816:	e2 f7       	brpl	.-8      	; 0x1810 <Dio_WriteChannel+0x86>
    1818:	80 95       	com	r24
    181a:	84 23       	and	r24, r20
    181c:	8c 93       	st	X, r24
    181e:	97 c0       	rjmp	.+302    	; 0x194e <Dio_WriteChannel+0x1c4>
				}
				else{
					SETBIT(PORTA , pin);
    1820:	ab e3       	ldi	r26, 0x3B	; 59
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	eb e3       	ldi	r30, 0x3B	; 59
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	48 2f       	mov	r20, r24
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	02 2e       	mov	r0, r18
    1838:	02 c0       	rjmp	.+4      	; 0x183e <Dio_WriteChannel+0xb4>
    183a:	88 0f       	add	r24, r24
    183c:	99 1f       	adc	r25, r25
    183e:	0a 94       	dec	r0
    1840:	e2 f7       	brpl	.-8      	; 0x183a <Dio_WriteChannel+0xb0>
    1842:	84 2b       	or	r24, r20
    1844:	8c 93       	st	X, r24
    1846:	83 c0       	rjmp	.+262    	; 0x194e <Dio_WriteChannel+0x1c4>
				}
				break;

		case Dio_PORTB :
				if(status == LOW){
    1848:	8c 81       	ldd	r24, Y+4	; 0x04
    184a:	88 23       	and	r24, r24
    184c:	a9 f4       	brne	.+42     	; 0x1878 <Dio_WriteChannel+0xee>
					CLRBIT(PORTB , pin);
    184e:	a8 e3       	ldi	r26, 0x38	; 56
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	e8 e3       	ldi	r30, 0x38	; 56
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	48 2f       	mov	r20, r24
    185a:	89 81       	ldd	r24, Y+1	; 0x01
    185c:	28 2f       	mov	r18, r24
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	02 2e       	mov	r0, r18
    1866:	02 c0       	rjmp	.+4      	; 0x186c <Dio_WriteChannel+0xe2>
    1868:	88 0f       	add	r24, r24
    186a:	99 1f       	adc	r25, r25
    186c:	0a 94       	dec	r0
    186e:	e2 f7       	brpl	.-8      	; 0x1868 <Dio_WriteChannel+0xde>
    1870:	80 95       	com	r24
    1872:	84 23       	and	r24, r20
    1874:	8c 93       	st	X, r24
    1876:	6b c0       	rjmp	.+214    	; 0x194e <Dio_WriteChannel+0x1c4>
				}
				else{
					SETBIT(PORTB , pin);
    1878:	a8 e3       	ldi	r26, 0x38	; 56
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	e8 e3       	ldi	r30, 0x38	; 56
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	48 2f       	mov	r20, r24
    1884:	89 81       	ldd	r24, Y+1	; 0x01
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	02 2e       	mov	r0, r18
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <Dio_WriteChannel+0x10c>
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	0a 94       	dec	r0
    1898:	e2 f7       	brpl	.-8      	; 0x1892 <Dio_WriteChannel+0x108>
    189a:	84 2b       	or	r24, r20
    189c:	8c 93       	st	X, r24
    189e:	57 c0       	rjmp	.+174    	; 0x194e <Dio_WriteChannel+0x1c4>
				}
				break;

		case Dio_PORTC :
				if(status == LOW){
    18a0:	8c 81       	ldd	r24, Y+4	; 0x04
    18a2:	88 23       	and	r24, r24
    18a4:	a9 f4       	brne	.+42     	; 0x18d0 <Dio_WriteChannel+0x146>
					CLRBIT(PORTC , pin);
    18a6:	a5 e3       	ldi	r26, 0x35	; 53
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	e5 e3       	ldi	r30, 0x35	; 53
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	48 2f       	mov	r20, r24
    18b2:	89 81       	ldd	r24, Y+1	; 0x01
    18b4:	28 2f       	mov	r18, r24
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	02 2e       	mov	r0, r18
    18be:	02 c0       	rjmp	.+4      	; 0x18c4 <Dio_WriteChannel+0x13a>
    18c0:	88 0f       	add	r24, r24
    18c2:	99 1f       	adc	r25, r25
    18c4:	0a 94       	dec	r0
    18c6:	e2 f7       	brpl	.-8      	; 0x18c0 <Dio_WriteChannel+0x136>
    18c8:	80 95       	com	r24
    18ca:	84 23       	and	r24, r20
    18cc:	8c 93       	st	X, r24
    18ce:	3f c0       	rjmp	.+126    	; 0x194e <Dio_WriteChannel+0x1c4>
				}
				else{
					SETBIT(PORTC , pin);
    18d0:	a5 e3       	ldi	r26, 0x35	; 53
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	e5 e3       	ldi	r30, 0x35	; 53
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	48 2f       	mov	r20, r24
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	02 2e       	mov	r0, r18
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <Dio_WriteChannel+0x164>
    18ea:	88 0f       	add	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	0a 94       	dec	r0
    18f0:	e2 f7       	brpl	.-8      	; 0x18ea <Dio_WriteChannel+0x160>
    18f2:	84 2b       	or	r24, r20
    18f4:	8c 93       	st	X, r24
    18f6:	2b c0       	rjmp	.+86     	; 0x194e <Dio_WriteChannel+0x1c4>
				}
				break;

		case Dio_PORTD :
				if(status == LOW){
    18f8:	8c 81       	ldd	r24, Y+4	; 0x04
    18fa:	88 23       	and	r24, r24
    18fc:	a9 f4       	brne	.+42     	; 0x1928 <Dio_WriteChannel+0x19e>
					CLRBIT(PORTD , pin);
    18fe:	a2 e3       	ldi	r26, 0x32	; 50
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	e2 e3       	ldi	r30, 0x32	; 50
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	48 2f       	mov	r20, r24
    190a:	89 81       	ldd	r24, Y+1	; 0x01
    190c:	28 2f       	mov	r18, r24
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	02 2e       	mov	r0, r18
    1916:	02 c0       	rjmp	.+4      	; 0x191c <Dio_WriteChannel+0x192>
    1918:	88 0f       	add	r24, r24
    191a:	99 1f       	adc	r25, r25
    191c:	0a 94       	dec	r0
    191e:	e2 f7       	brpl	.-8      	; 0x1918 <Dio_WriteChannel+0x18e>
    1920:	80 95       	com	r24
    1922:	84 23       	and	r24, r20
    1924:	8c 93       	st	X, r24
    1926:	13 c0       	rjmp	.+38     	; 0x194e <Dio_WriteChannel+0x1c4>
				}
				else{
					SETBIT(PORTD , pin);
    1928:	a2 e3       	ldi	r26, 0x32	; 50
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	e2 e3       	ldi	r30, 0x32	; 50
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	48 2f       	mov	r20, r24
    1934:	89 81       	ldd	r24, Y+1	; 0x01
    1936:	28 2f       	mov	r18, r24
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	02 2e       	mov	r0, r18
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <Dio_WriteChannel+0x1bc>
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	0a 94       	dec	r0
    1948:	e2 f7       	brpl	.-8      	; 0x1942 <Dio_WriteChannel+0x1b8>
    194a:	84 2b       	or	r24, r20
    194c:	8c 93       	st	X, r24
				}
				break;
		}
}
    194e:	26 96       	adiw	r28, 0x06	; 6
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	f8 94       	cli
    1954:	de bf       	out	0x3e, r29	; 62
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	cd bf       	out	0x3d, r28	; 61
    195a:	cf 91       	pop	r28
    195c:	df 91       	pop	r29
    195e:	08 95       	ret

00001960 <Dio_ReadChannel>:

Pin_Status_Type Dio_ReadChannel (Pin_Channel_Type channel){
    1960:	df 93       	push	r29
    1962:	cf 93       	push	r28
    1964:	00 d0       	rcall	.+0      	; 0x1966 <Dio_ReadChannel+0x6>
    1966:	00 d0       	rcall	.+0      	; 0x1968 <Dio_ReadChannel+0x8>
    1968:	00 d0       	rcall	.+0      	; 0x196a <Dio_ReadChannel+0xa>
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
    196e:	8b 83       	std	Y+3, r24	; 0x03

	Dio_Port_Type port = channel/8;
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	86 95       	lsr	r24
    1974:	86 95       	lsr	r24
    1976:	86 95       	lsr	r24
    1978:	8a 83       	std	Y+2, r24	; 0x02
	UINT8 pin = channel%8;
    197a:	8b 81       	ldd	r24, Y+3	; 0x03
    197c:	87 70       	andi	r24, 0x07	; 7
    197e:	89 83       	std	Y+1, r24	; 0x01

	switch (port) {
    1980:	8a 81       	ldd	r24, Y+2	; 0x02
    1982:	28 2f       	mov	r18, r24
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	3e 83       	std	Y+6, r19	; 0x06
    1988:	2d 83       	std	Y+5, r18	; 0x05
    198a:	4d 81       	ldd	r20, Y+5	; 0x05
    198c:	5e 81       	ldd	r21, Y+6	; 0x06
    198e:	41 30       	cpi	r20, 0x01	; 1
    1990:	51 05       	cpc	r21, r1
    1992:	49 f1       	breq	.+82     	; 0x19e6 <Dio_ReadChannel+0x86>
    1994:	8d 81       	ldd	r24, Y+5	; 0x05
    1996:	9e 81       	ldd	r25, Y+6	; 0x06
    1998:	82 30       	cpi	r24, 0x02	; 2
    199a:	91 05       	cpc	r25, r1
    199c:	34 f4       	brge	.+12     	; 0x19aa <Dio_ReadChannel+0x4a>
    199e:	2d 81       	ldd	r18, Y+5	; 0x05
    19a0:	3e 81       	ldd	r19, Y+6	; 0x06
    19a2:	21 15       	cp	r18, r1
    19a4:	31 05       	cpc	r19, r1
    19a6:	61 f0       	breq	.+24     	; 0x19c0 <Dio_ReadChannel+0x60>
    19a8:	57 c0       	rjmp	.+174    	; 0x1a58 <Dio_ReadChannel+0xf8>
    19aa:	4d 81       	ldd	r20, Y+5	; 0x05
    19ac:	5e 81       	ldd	r21, Y+6	; 0x06
    19ae:	42 30       	cpi	r20, 0x02	; 2
    19b0:	51 05       	cpc	r21, r1
    19b2:	61 f1       	breq	.+88     	; 0x1a0c <Dio_ReadChannel+0xac>
    19b4:	8d 81       	ldd	r24, Y+5	; 0x05
    19b6:	9e 81       	ldd	r25, Y+6	; 0x06
    19b8:	83 30       	cpi	r24, 0x03	; 3
    19ba:	91 05       	cpc	r25, r1
    19bc:	d1 f1       	breq	.+116    	; 0x1a32 <Dio_ReadChannel+0xd2>
    19be:	4c c0       	rjmp	.+152    	; 0x1a58 <Dio_ReadChannel+0xf8>
			case Dio_PORTA :
					return READBIT(PINA , pin);
    19c0:	e9 e3       	ldi	r30, 0x39	; 57
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	28 2f       	mov	r18, r24
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	89 81       	ldd	r24, Y+1	; 0x01
    19cc:	88 2f       	mov	r24, r24
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	a9 01       	movw	r20, r18
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <Dio_ReadChannel+0x78>
    19d4:	55 95       	asr	r21
    19d6:	47 95       	ror	r20
    19d8:	8a 95       	dec	r24
    19da:	e2 f7       	brpl	.-8      	; 0x19d4 <Dio_ReadChannel+0x74>
    19dc:	ca 01       	movw	r24, r20
    19de:	58 2f       	mov	r21, r24
    19e0:	51 70       	andi	r21, 0x01	; 1
    19e2:	5c 83       	std	Y+4, r21	; 0x04
    19e4:	3b c0       	rjmp	.+118    	; 0x1a5c <Dio_ReadChannel+0xfc>

			case Dio_PORTB :
					return READBIT(PINB , pin);
    19e6:	e6 e3       	ldi	r30, 0x36	; 54
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	28 2f       	mov	r18, r24
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	88 2f       	mov	r24, r24
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	a9 01       	movw	r20, r18
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <Dio_ReadChannel+0x9e>
    19fa:	55 95       	asr	r21
    19fc:	47 95       	ror	r20
    19fe:	8a 95       	dec	r24
    1a00:	e2 f7       	brpl	.-8      	; 0x19fa <Dio_ReadChannel+0x9a>
    1a02:	ca 01       	movw	r24, r20
    1a04:	58 2f       	mov	r21, r24
    1a06:	51 70       	andi	r21, 0x01	; 1
    1a08:	5c 83       	std	Y+4, r21	; 0x04
    1a0a:	28 c0       	rjmp	.+80     	; 0x1a5c <Dio_ReadChannel+0xfc>

			case Dio_PORTC :
					return READBIT(PINC , pin);
    1a0c:	e3 e3       	ldi	r30, 0x33	; 51
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	28 2f       	mov	r18, r24
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
    1a18:	88 2f       	mov	r24, r24
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	a9 01       	movw	r20, r18
    1a1e:	02 c0       	rjmp	.+4      	; 0x1a24 <Dio_ReadChannel+0xc4>
    1a20:	55 95       	asr	r21
    1a22:	47 95       	ror	r20
    1a24:	8a 95       	dec	r24
    1a26:	e2 f7       	brpl	.-8      	; 0x1a20 <Dio_ReadChannel+0xc0>
    1a28:	ca 01       	movw	r24, r20
    1a2a:	58 2f       	mov	r21, r24
    1a2c:	51 70       	andi	r21, 0x01	; 1
    1a2e:	5c 83       	std	Y+4, r21	; 0x04
    1a30:	15 c0       	rjmp	.+42     	; 0x1a5c <Dio_ReadChannel+0xfc>

			case Dio_PORTD :
					return READBIT(PIND , pin);
    1a32:	e0 e3       	ldi	r30, 0x30	; 48
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	89 81       	ldd	r24, Y+1	; 0x01
    1a3e:	88 2f       	mov	r24, r24
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	a9 01       	movw	r20, r18
    1a44:	02 c0       	rjmp	.+4      	; 0x1a4a <Dio_ReadChannel+0xea>
    1a46:	55 95       	asr	r21
    1a48:	47 95       	ror	r20
    1a4a:	8a 95       	dec	r24
    1a4c:	e2 f7       	brpl	.-8      	; 0x1a46 <Dio_ReadChannel+0xe6>
    1a4e:	ca 01       	movw	r24, r20
    1a50:	58 2f       	mov	r21, r24
    1a52:	51 70       	andi	r21, 0x01	; 1
    1a54:	5c 83       	std	Y+4, r21	; 0x04
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <Dio_ReadChannel+0xfc>
		}

	return -1;
    1a58:	8f ef       	ldi	r24, 0xFF	; 255
    1a5a:	8c 83       	std	Y+4, r24	; 0x04
    1a5c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1a5e:	26 96       	adiw	r28, 0x06	; 6
    1a60:	0f b6       	in	r0, 0x3f	; 63
    1a62:	f8 94       	cli
    1a64:	de bf       	out	0x3e, r29	; 62
    1a66:	0f be       	out	0x3f, r0	; 63
    1a68:	cd bf       	out	0x3d, r28	; 61
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	08 95       	ret

00001a70 <Dio_WritePort>:

void Dio_WritePort(Dio_Port_Type port, UINT8 value){
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	00 d0       	rcall	.+0      	; 0x1a76 <Dio_WritePort+0x6>
    1a76:	00 d0       	rcall	.+0      	; 0x1a78 <Dio_WritePort+0x8>
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
    1a7c:	89 83       	std	Y+1, r24	; 0x01
    1a7e:	6a 83       	std	Y+2, r22	; 0x02

	switch (port) {
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	28 2f       	mov	r18, r24
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	3c 83       	std	Y+4, r19	; 0x04
    1a88:	2b 83       	std	Y+3, r18	; 0x03
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8e:	81 30       	cpi	r24, 0x01	; 1
    1a90:	91 05       	cpc	r25, r1
    1a92:	d1 f0       	breq	.+52     	; 0x1ac8 <Dio_WritePort+0x58>
    1a94:	2b 81       	ldd	r18, Y+3	; 0x03
    1a96:	3c 81       	ldd	r19, Y+4	; 0x04
    1a98:	22 30       	cpi	r18, 0x02	; 2
    1a9a:	31 05       	cpc	r19, r1
    1a9c:	2c f4       	brge	.+10     	; 0x1aa8 <Dio_WritePort+0x38>
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa2:	00 97       	sbiw	r24, 0x00	; 0
    1aa4:	61 f0       	breq	.+24     	; 0x1abe <Dio_WritePort+0x4e>
    1aa6:	1e c0       	rjmp	.+60     	; 0x1ae4 <Dio_WritePort+0x74>
    1aa8:	2b 81       	ldd	r18, Y+3	; 0x03
    1aaa:	3c 81       	ldd	r19, Y+4	; 0x04
    1aac:	22 30       	cpi	r18, 0x02	; 2
    1aae:	31 05       	cpc	r19, r1
    1ab0:	81 f0       	breq	.+32     	; 0x1ad2 <Dio_WritePort+0x62>
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab6:	83 30       	cpi	r24, 0x03	; 3
    1ab8:	91 05       	cpc	r25, r1
    1aba:	81 f0       	breq	.+32     	; 0x1adc <Dio_WritePort+0x6c>
    1abc:	13 c0       	rjmp	.+38     	; 0x1ae4 <Dio_WritePort+0x74>
		case Dio_PORTA :
				PORTA = value;
    1abe:	eb e3       	ldi	r30, 0x3B	; 59
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	80 83       	st	Z, r24
    1ac6:	0e c0       	rjmp	.+28     	; 0x1ae4 <Dio_WritePort+0x74>
				break;

		case Dio_PORTB :
				PORTB = value;
    1ac8:	e8 e3       	ldi	r30, 0x38	; 56
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ace:	80 83       	st	Z, r24
    1ad0:	09 c0       	rjmp	.+18     	; 0x1ae4 <Dio_WritePort+0x74>
				break;

		case Dio_PORTC :
				PORTC = value;
    1ad2:	e5 e3       	ldi	r30, 0x35	; 53
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad8:	80 83       	st	Z, r24
    1ada:	04 c0       	rjmp	.+8      	; 0x1ae4 <Dio_WritePort+0x74>
				break;

		case Dio_PORTD :
				PORTD = value;
    1adc:	e2 e3       	ldi	r30, 0x32	; 50
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	80 83       	st	Z, r24
				break;
		}
}
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	cf 91       	pop	r28
    1aee:	df 91       	pop	r29
    1af0:	08 95       	ret

00001af2 <Dio_ReadPort>:

UINT8 Dio_ReadPort (Dio_Port_Type port){
    1af2:	df 93       	push	r29
    1af4:	cf 93       	push	r28
    1af6:	00 d0       	rcall	.+0      	; 0x1af8 <Dio_ReadPort+0x6>
    1af8:	00 d0       	rcall	.+0      	; 0x1afa <Dio_ReadPort+0x8>
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
    1afe:	89 83       	std	Y+1, r24	; 0x01

	switch (port) {
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	28 2f       	mov	r18, r24
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	3c 83       	std	Y+4, r19	; 0x04
    1b08:	2b 83       	std	Y+3, r18	; 0x03
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0e:	81 30       	cpi	r24, 0x01	; 1
    1b10:	91 05       	cpc	r25, r1
    1b12:	d1 f0       	breq	.+52     	; 0x1b48 <Dio_ReadPort+0x56>
    1b14:	2b 81       	ldd	r18, Y+3	; 0x03
    1b16:	3c 81       	ldd	r19, Y+4	; 0x04
    1b18:	22 30       	cpi	r18, 0x02	; 2
    1b1a:	31 05       	cpc	r19, r1
    1b1c:	2c f4       	brge	.+10     	; 0x1b28 <Dio_ReadPort+0x36>
    1b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b20:	9c 81       	ldd	r25, Y+4	; 0x04
    1b22:	00 97       	sbiw	r24, 0x00	; 0
    1b24:	61 f0       	breq	.+24     	; 0x1b3e <Dio_ReadPort+0x4c>
    1b26:	1f c0       	rjmp	.+62     	; 0x1b66 <Dio_ReadPort+0x74>
    1b28:	2b 81       	ldd	r18, Y+3	; 0x03
    1b2a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b2c:	22 30       	cpi	r18, 0x02	; 2
    1b2e:	31 05       	cpc	r19, r1
    1b30:	81 f0       	breq	.+32     	; 0x1b52 <Dio_ReadPort+0x60>
    1b32:	8b 81       	ldd	r24, Y+3	; 0x03
    1b34:	9c 81       	ldd	r25, Y+4	; 0x04
    1b36:	83 30       	cpi	r24, 0x03	; 3
    1b38:	91 05       	cpc	r25, r1
    1b3a:	81 f0       	breq	.+32     	; 0x1b5c <Dio_ReadPort+0x6a>
    1b3c:	14 c0       	rjmp	.+40     	; 0x1b66 <Dio_ReadPort+0x74>
			case Dio_PORTA :
					return PINA;
    1b3e:	e9 e3       	ldi	r30, 0x39	; 57
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	90 81       	ld	r25, Z
    1b44:	9a 83       	std	Y+2, r25	; 0x02
    1b46:	11 c0       	rjmp	.+34     	; 0x1b6a <Dio_ReadPort+0x78>

			case Dio_PORTB :
					return PINB;
    1b48:	e6 e3       	ldi	r30, 0x36	; 54
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	20 81       	ld	r18, Z
    1b4e:	2a 83       	std	Y+2, r18	; 0x02
    1b50:	0c c0       	rjmp	.+24     	; 0x1b6a <Dio_ReadPort+0x78>

			case Dio_PORTC :
					return PINC;
    1b52:	e3 e3       	ldi	r30, 0x33	; 51
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	30 81       	ld	r19, Z
    1b58:	3a 83       	std	Y+2, r19	; 0x02
    1b5a:	07 c0       	rjmp	.+14     	; 0x1b6a <Dio_ReadPort+0x78>

			case Dio_PORTD :
					return PIND;
    1b5c:	e0 e3       	ldi	r30, 0x30	; 48
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	8a 83       	std	Y+2, r24	; 0x02
    1b64:	02 c0       	rjmp	.+4      	; 0x1b6a <Dio_ReadPort+0x78>
		}

	return -1;
    1b66:	9f ef       	ldi	r25, 0xFF	; 255
    1b68:	9a 83       	std	Y+2, r25	; 0x02
    1b6a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	0f 90       	pop	r0
    1b72:	0f 90       	pop	r0
    1b74:	cf 91       	pop	r28
    1b76:	df 91       	pop	r29
    1b78:	08 95       	ret

00001b7a <ADC_Init>:
 */
#include "ADC_Interface.h"

static void (*ptr1) (void) = NULL;

void ADC_Init (void){
    1b7a:	df 93       	push	r29
    1b7c:	cf 93       	push	r28
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
	SETBIT(ADCSRA,ADPS0);
	CLRBIT(ADCSRA,ADPS1);
	SETBIT(ADCSRA,ADPS2);

#elif ADC_Prescaler == ADC_Prescalling_64
	CLRBIT(ADCSRA,ADPS0);
    1b82:	a6 e2       	ldi	r26, 0x26	; 38
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	e6 e2       	ldi	r30, 0x26	; 38
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	80 81       	ld	r24, Z
    1b8c:	8e 7f       	andi	r24, 0xFE	; 254
    1b8e:	8c 93       	st	X, r24
	SETBIT(ADCSRA,ADPS1);
    1b90:	a6 e2       	ldi	r26, 0x26	; 38
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	e6 e2       	ldi	r30, 0x26	; 38
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	82 60       	ori	r24, 0x02	; 2
    1b9c:	8c 93       	st	X, r24
	SETBIT(ADCSRA,ADPS2);
    1b9e:	a6 e2       	ldi	r26, 0x26	; 38
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	e6 e2       	ldi	r30, 0x26	; 38
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	84 60       	ori	r24, 0x04	; 4
    1baa:	8c 93       	st	X, r24
#if Voltage_Ref == External_AREF
	CLRBIT(ADMUX,REFS0);
	CLRBIT(ADMUX,REFS1);

#elif Voltage_Ref == Internal_AVCC
	SETBIT(ADMUX,REFS0);
    1bac:	a7 e2       	ldi	r26, 0x27	; 39
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	e7 e2       	ldi	r30, 0x27	; 39
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	80 64       	ori	r24, 0x40	; 64
    1bb8:	8c 93       	st	X, r24
	CLRBIT(ADMUX,REFS1);
    1bba:	a7 e2       	ldi	r26, 0x27	; 39
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	e7 e2       	ldi	r30, 0x27	; 39
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	8f 77       	andi	r24, 0x7F	; 127
    1bc6:	8c 93       	st	X, r24
	SETBIT(ADMUX,REFS0);
	SETBIT(ADMUX,REFS1);

#endif

	SETBIT(ADCSRA,ADEN);
    1bc8:	a6 e2       	ldi	r26, 0x26	; 38
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
    1bcc:	e6 e2       	ldi	r30, 0x26	; 38
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	80 81       	ld	r24, Z
    1bd2:	80 68       	ori	r24, 0x80	; 128
    1bd4:	8c 93       	st	X, r24

}
    1bd6:	cf 91       	pop	r28
    1bd8:	df 91       	pop	r29
    1bda:	08 95       	ret

00001bdc <ADC_Select_Channel>:

void ADC_Select_Channel(UINT8 Channel){
    1bdc:	df 93       	push	r29
    1bde:	cf 93       	push	r28
    1be0:	00 d0       	rcall	.+0      	; 0x1be2 <ADC_Select_Channel+0x6>
    1be2:	0f 92       	push	r0
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
    1be8:	89 83       	std	Y+1, r24	; 0x01
	switch(Channel){
    1bea:	89 81       	ldd	r24, Y+1	; 0x01
    1bec:	28 2f       	mov	r18, r24
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	3b 83       	std	Y+3, r19	; 0x03
    1bf2:	2a 83       	std	Y+2, r18	; 0x02
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	9b 81       	ldd	r25, Y+3	; 0x03
    1bf8:	83 30       	cpi	r24, 0x03	; 3
    1bfa:	91 05       	cpc	r25, r1
    1bfc:	09 f4       	brne	.+2      	; 0x1c00 <ADC_Select_Channel+0x24>
    1bfe:	70 c0       	rjmp	.+224    	; 0x1ce0 <ADC_Select_Channel+0x104>
    1c00:	2a 81       	ldd	r18, Y+2	; 0x02
    1c02:	3b 81       	ldd	r19, Y+3	; 0x03
    1c04:	24 30       	cpi	r18, 0x04	; 4
    1c06:	31 05       	cpc	r19, r1
    1c08:	84 f4       	brge	.+32     	; 0x1c2a <ADC_Select_Channel+0x4e>
    1c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c0e:	81 30       	cpi	r24, 0x01	; 1
    1c10:	91 05       	cpc	r25, r1
    1c12:	d1 f1       	breq	.+116    	; 0x1c88 <ADC_Select_Channel+0xac>
    1c14:	2a 81       	ldd	r18, Y+2	; 0x02
    1c16:	3b 81       	ldd	r19, Y+3	; 0x03
    1c18:	22 30       	cpi	r18, 0x02	; 2
    1c1a:	31 05       	cpc	r19, r1
    1c1c:	0c f0       	brlt	.+2      	; 0x1c20 <ADC_Select_Channel+0x44>
    1c1e:	4a c0       	rjmp	.+148    	; 0x1cb4 <ADC_Select_Channel+0xd8>
    1c20:	8a 81       	ldd	r24, Y+2	; 0x02
    1c22:	9b 81       	ldd	r25, Y+3	; 0x03
    1c24:	00 97       	sbiw	r24, 0x00	; 0
    1c26:	d1 f0       	breq	.+52     	; 0x1c5c <ADC_Select_Channel+0x80>
    1c28:	c8 c0       	rjmp	.+400    	; 0x1dba <ADC_Select_Channel+0x1de>
    1c2a:	2a 81       	ldd	r18, Y+2	; 0x02
    1c2c:	3b 81       	ldd	r19, Y+3	; 0x03
    1c2e:	25 30       	cpi	r18, 0x05	; 5
    1c30:	31 05       	cpc	r19, r1
    1c32:	09 f4       	brne	.+2      	; 0x1c36 <ADC_Select_Channel+0x5a>
    1c34:	81 c0       	rjmp	.+258    	; 0x1d38 <ADC_Select_Channel+0x15c>
    1c36:	8a 81       	ldd	r24, Y+2	; 0x02
    1c38:	9b 81       	ldd	r25, Y+3	; 0x03
    1c3a:	85 30       	cpi	r24, 0x05	; 5
    1c3c:	91 05       	cpc	r25, r1
    1c3e:	0c f4       	brge	.+2      	; 0x1c42 <ADC_Select_Channel+0x66>
    1c40:	65 c0       	rjmp	.+202    	; 0x1d0c <ADC_Select_Channel+0x130>
    1c42:	2a 81       	ldd	r18, Y+2	; 0x02
    1c44:	3b 81       	ldd	r19, Y+3	; 0x03
    1c46:	26 30       	cpi	r18, 0x06	; 6
    1c48:	31 05       	cpc	r19, r1
    1c4a:	09 f4       	brne	.+2      	; 0x1c4e <ADC_Select_Channel+0x72>
    1c4c:	8b c0       	rjmp	.+278    	; 0x1d64 <ADC_Select_Channel+0x188>
    1c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c50:	9b 81       	ldd	r25, Y+3	; 0x03
    1c52:	87 30       	cpi	r24, 0x07	; 7
    1c54:	91 05       	cpc	r25, r1
    1c56:	09 f4       	brne	.+2      	; 0x1c5a <ADC_Select_Channel+0x7e>
    1c58:	9b c0       	rjmp	.+310    	; 0x1d90 <ADC_Select_Channel+0x1b4>
    1c5a:	af c0       	rjmp	.+350    	; 0x1dba <ADC_Select_Channel+0x1de>
	case 0:
		CLRBIT(ADMUX,MUX0);
    1c5c:	a7 e2       	ldi	r26, 0x27	; 39
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	e7 e2       	ldi	r30, 0x27	; 39
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	8e 7f       	andi	r24, 0xFE	; 254
    1c68:	8c 93       	st	X, r24
		CLRBIT(ADMUX,MUX1);
    1c6a:	a7 e2       	ldi	r26, 0x27	; 39
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	e7 e2       	ldi	r30, 0x27	; 39
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	8d 7f       	andi	r24, 0xFD	; 253
    1c76:	8c 93       	st	X, r24
		CLRBIT(ADMUX,MUX2);
    1c78:	a7 e2       	ldi	r26, 0x27	; 39
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	e7 e2       	ldi	r30, 0x27	; 39
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	8b 7f       	andi	r24, 0xFB	; 251
    1c84:	8c 93       	st	X, r24
    1c86:	99 c0       	rjmp	.+306    	; 0x1dba <ADC_Select_Channel+0x1de>
		break;

	case 1:
		SETBIT(ADMUX,MUX0);
    1c88:	a7 e2       	ldi	r26, 0x27	; 39
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	e7 e2       	ldi	r30, 0x27	; 39
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	81 60       	ori	r24, 0x01	; 1
    1c94:	8c 93       	st	X, r24
		CLRBIT(ADMUX,MUX1);
    1c96:	a7 e2       	ldi	r26, 0x27	; 39
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	e7 e2       	ldi	r30, 0x27	; 39
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	8d 7f       	andi	r24, 0xFD	; 253
    1ca2:	8c 93       	st	X, r24
		CLRBIT(ADMUX,MUX2);
    1ca4:	a7 e2       	ldi	r26, 0x27	; 39
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	e7 e2       	ldi	r30, 0x27	; 39
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	8b 7f       	andi	r24, 0xFB	; 251
    1cb0:	8c 93       	st	X, r24
    1cb2:	83 c0       	rjmp	.+262    	; 0x1dba <ADC_Select_Channel+0x1de>
		break;

	case 2:
		CLRBIT(ADMUX,MUX0);
    1cb4:	a7 e2       	ldi	r26, 0x27	; 39
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	e7 e2       	ldi	r30, 0x27	; 39
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	8e 7f       	andi	r24, 0xFE	; 254
    1cc0:	8c 93       	st	X, r24
		SETBIT(ADMUX,MUX1);
    1cc2:	a7 e2       	ldi	r26, 0x27	; 39
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	e7 e2       	ldi	r30, 0x27	; 39
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	82 60       	ori	r24, 0x02	; 2
    1cce:	8c 93       	st	X, r24
		CLRBIT(ADMUX,MUX2);
    1cd0:	a7 e2       	ldi	r26, 0x27	; 39
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	e7 e2       	ldi	r30, 0x27	; 39
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	8b 7f       	andi	r24, 0xFB	; 251
    1cdc:	8c 93       	st	X, r24
    1cde:	6d c0       	rjmp	.+218    	; 0x1dba <ADC_Select_Channel+0x1de>
		break;

	case 3:
		SETBIT(ADMUX,MUX0);
    1ce0:	a7 e2       	ldi	r26, 0x27	; 39
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	e7 e2       	ldi	r30, 0x27	; 39
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	81 60       	ori	r24, 0x01	; 1
    1cec:	8c 93       	st	X, r24
		SETBIT(ADMUX,MUX1);
    1cee:	a7 e2       	ldi	r26, 0x27	; 39
    1cf0:	b0 e0       	ldi	r27, 0x00	; 0
    1cf2:	e7 e2       	ldi	r30, 0x27	; 39
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	82 60       	ori	r24, 0x02	; 2
    1cfa:	8c 93       	st	X, r24
		CLRBIT(ADMUX,MUX2);
    1cfc:	a7 e2       	ldi	r26, 0x27	; 39
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	e7 e2       	ldi	r30, 0x27	; 39
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	8b 7f       	andi	r24, 0xFB	; 251
    1d08:	8c 93       	st	X, r24
    1d0a:	57 c0       	rjmp	.+174    	; 0x1dba <ADC_Select_Channel+0x1de>
		break;

	case 4:
		CLRBIT(ADMUX,MUX0);
    1d0c:	a7 e2       	ldi	r26, 0x27	; 39
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	e7 e2       	ldi	r30, 0x27	; 39
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	8e 7f       	andi	r24, 0xFE	; 254
    1d18:	8c 93       	st	X, r24
		CLRBIT(ADMUX,MUX1);
    1d1a:	a7 e2       	ldi	r26, 0x27	; 39
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	e7 e2       	ldi	r30, 0x27	; 39
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	8d 7f       	andi	r24, 0xFD	; 253
    1d26:	8c 93       	st	X, r24
		SETBIT(ADMUX,MUX2);
    1d28:	a7 e2       	ldi	r26, 0x27	; 39
    1d2a:	b0 e0       	ldi	r27, 0x00	; 0
    1d2c:	e7 e2       	ldi	r30, 0x27	; 39
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	80 81       	ld	r24, Z
    1d32:	84 60       	ori	r24, 0x04	; 4
    1d34:	8c 93       	st	X, r24
    1d36:	41 c0       	rjmp	.+130    	; 0x1dba <ADC_Select_Channel+0x1de>
		break;

	case 5:
		SETBIT(ADMUX,MUX0);
    1d38:	a7 e2       	ldi	r26, 0x27	; 39
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	e7 e2       	ldi	r30, 0x27	; 39
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	81 60       	ori	r24, 0x01	; 1
    1d44:	8c 93       	st	X, r24
		CLRBIT(ADMUX,MUX1);
    1d46:	a7 e2       	ldi	r26, 0x27	; 39
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	e7 e2       	ldi	r30, 0x27	; 39
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	8d 7f       	andi	r24, 0xFD	; 253
    1d52:	8c 93       	st	X, r24
		SETBIT(ADMUX,MUX2);
    1d54:	a7 e2       	ldi	r26, 0x27	; 39
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	e7 e2       	ldi	r30, 0x27	; 39
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	84 60       	ori	r24, 0x04	; 4
    1d60:	8c 93       	st	X, r24
    1d62:	2b c0       	rjmp	.+86     	; 0x1dba <ADC_Select_Channel+0x1de>
		break;

	case 6:
		CLRBIT(ADMUX,MUX0);
    1d64:	a7 e2       	ldi	r26, 0x27	; 39
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	e7 e2       	ldi	r30, 0x27	; 39
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	8e 7f       	andi	r24, 0xFE	; 254
    1d70:	8c 93       	st	X, r24
		SETBIT(ADMUX,MUX1);
    1d72:	a7 e2       	ldi	r26, 0x27	; 39
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	e7 e2       	ldi	r30, 0x27	; 39
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	82 60       	ori	r24, 0x02	; 2
    1d7e:	8c 93       	st	X, r24
		SETBIT(ADMUX,MUX2);
    1d80:	a7 e2       	ldi	r26, 0x27	; 39
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	e7 e2       	ldi	r30, 0x27	; 39
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	84 60       	ori	r24, 0x04	; 4
    1d8c:	8c 93       	st	X, r24
    1d8e:	15 c0       	rjmp	.+42     	; 0x1dba <ADC_Select_Channel+0x1de>
		break;

	case 7:
		SETBIT(ADMUX,MUX0);
    1d90:	a7 e2       	ldi	r26, 0x27	; 39
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	e7 e2       	ldi	r30, 0x27	; 39
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	81 60       	ori	r24, 0x01	; 1
    1d9c:	8c 93       	st	X, r24
		SETBIT(ADMUX,MUX1);
    1d9e:	a7 e2       	ldi	r26, 0x27	; 39
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	e7 e2       	ldi	r30, 0x27	; 39
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	82 60       	ori	r24, 0x02	; 2
    1daa:	8c 93       	st	X, r24
		SETBIT(ADMUX,MUX2);
    1dac:	a7 e2       	ldi	r26, 0x27	; 39
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	e7 e2       	ldi	r30, 0x27	; 39
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	84 60       	ori	r24, 0x04	; 4
    1db8:	8c 93       	st	X, r24
		break;
	}
}
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	0f 90       	pop	r0
    1dc0:	cf 91       	pop	r28
    1dc2:	df 91       	pop	r29
    1dc4:	08 95       	ret

00001dc6 <ADC_Read>:

UINT16 ADC_Read (void){
    1dc6:	df 93       	push	r29
    1dc8:	cf 93       	push	r28
    1dca:	cd b7       	in	r28, 0x3d	; 61
    1dcc:	de b7       	in	r29, 0x3e	; 62
	return (UINT16) ADC ;
    1dce:	e4 e2       	ldi	r30, 0x24	; 36
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	91 81       	ldd	r25, Z+1	; 0x01
}
    1dd6:	cf 91       	pop	r28
    1dd8:	df 91       	pop	r29
    1dda:	08 95       	ret

00001ddc <ADC_Start_Conversion>:

void ADC_Start_Conversion(void){
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
	SETBIT(ADCSRA,ADSC);
    1de4:	a6 e2       	ldi	r26, 0x26	; 38
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	e6 e2       	ldi	r30, 0x26	; 38
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	80 64       	ori	r24, 0x40	; 64
    1df0:	8c 93       	st	X, r24
}
    1df2:	cf 91       	pop	r28
    1df4:	df 91       	pop	r29
    1df6:	08 95       	ret

00001df8 <ADC_Stop>:

void ADC_Stop(void){
    1df8:	df 93       	push	r29
    1dfa:	cf 93       	push	r28
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62
	CLRBIT(ADCSRA,ADEN);
    1e00:	a6 e2       	ldi	r26, 0x26	; 38
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	e6 e2       	ldi	r30, 0x26	; 38
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	8f 77       	andi	r24, 0x7F	; 127
    1e0c:	8c 93       	st	X, r24
}
    1e0e:	cf 91       	pop	r28
    1e10:	df 91       	pop	r29
    1e12:	08 95       	ret

00001e14 <ADC_INTEnable>:

void ADC_INTEnable(void){
    1e14:	df 93       	push	r29
    1e16:	cf 93       	push	r28
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
	SETBIT(ADCSRA,ADIE);
    1e1c:	a6 e2       	ldi	r26, 0x26	; 38
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	e6 e2       	ldi	r30, 0x26	; 38
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	88 60       	ori	r24, 0x08	; 8
    1e28:	8c 93       	st	X, r24
}
    1e2a:	cf 91       	pop	r28
    1e2c:	df 91       	pop	r29
    1e2e:	08 95       	ret

00001e30 <ADC_Complete_Check>:

void ADC_Complete_Check(void){
    1e30:	df 93       	push	r29
    1e32:	cf 93       	push	r28
    1e34:	cd b7       	in	r28, 0x3d	; 61
    1e36:	de b7       	in	r29, 0x3e	; 62
	while (READBIT(ADCSRA,ADIF)==0);
    1e38:	e6 e2       	ldi	r30, 0x26	; 38
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	82 95       	swap	r24
    1e40:	8f 70       	andi	r24, 0x0F	; 15
    1e42:	88 2f       	mov	r24, r24
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	81 70       	andi	r24, 0x01	; 1
    1e48:	90 70       	andi	r25, 0x00	; 0
    1e4a:	00 97       	sbiw	r24, 0x00	; 0
    1e4c:	a9 f3       	breq	.-22     	; 0x1e38 <ADC_Complete_Check+0x8>
	SETBIT(ADCSRA,ADIF);
    1e4e:	a6 e2       	ldi	r26, 0x26	; 38
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	e6 e2       	ldi	r30, 0x26	; 38
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	80 61       	ori	r24, 0x10	; 16
    1e5a:	8c 93       	st	X, r24
}
    1e5c:	cf 91       	pop	r28
    1e5e:	df 91       	pop	r29
    1e60:	08 95       	ret

00001e62 <ADC_SetCallBack>:

void ADC_SetCallBack (void (*p2f) (void)){
    1e62:	df 93       	push	r29
    1e64:	cf 93       	push	r28
    1e66:	00 d0       	rcall	.+0      	; 0x1e68 <ADC_SetCallBack+0x6>
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
    1e6c:	9a 83       	std	Y+2, r25	; 0x02
    1e6e:	89 83       	std	Y+1, r24	; 0x01
	ptr1 = p2f ;
    1e70:	89 81       	ldd	r24, Y+1	; 0x01
    1e72:	9a 81       	ldd	r25, Y+2	; 0x02
    1e74:	90 93 bf 00 	sts	0x00BF, r25
    1e78:	80 93 be 00 	sts	0x00BE, r24
}
    1e7c:	0f 90       	pop	r0
    1e7e:	0f 90       	pop	r0
    1e80:	cf 91       	pop	r28
    1e82:	df 91       	pop	r29
    1e84:	08 95       	ret

00001e86 <__vector_16>:

void __vector_16(void) __attribute__ ((signal));
void __vector_16(void){
    1e86:	1f 92       	push	r1
    1e88:	0f 92       	push	r0
    1e8a:	0f b6       	in	r0, 0x3f	; 63
    1e8c:	0f 92       	push	r0
    1e8e:	11 24       	eor	r1, r1
    1e90:	2f 93       	push	r18
    1e92:	3f 93       	push	r19
    1e94:	4f 93       	push	r20
    1e96:	5f 93       	push	r21
    1e98:	6f 93       	push	r22
    1e9a:	7f 93       	push	r23
    1e9c:	8f 93       	push	r24
    1e9e:	9f 93       	push	r25
    1ea0:	af 93       	push	r26
    1ea2:	bf 93       	push	r27
    1ea4:	ef 93       	push	r30
    1ea6:	ff 93       	push	r31
    1ea8:	df 93       	push	r29
    1eaa:	cf 93       	push	r28
    1eac:	cd b7       	in	r28, 0x3d	; 61
    1eae:	de b7       	in	r29, 0x3e	; 62
	if(ptr1 != NULL)
    1eb0:	80 91 be 00 	lds	r24, 0x00BE
    1eb4:	90 91 bf 00 	lds	r25, 0x00BF
    1eb8:	00 97       	sbiw	r24, 0x00	; 0
    1eba:	29 f0       	breq	.+10     	; 0x1ec6 <__vector_16+0x40>
	ptr1();
    1ebc:	e0 91 be 00 	lds	r30, 0x00BE
    1ec0:	f0 91 bf 00 	lds	r31, 0x00BF
    1ec4:	09 95       	icall
}
    1ec6:	cf 91       	pop	r28
    1ec8:	df 91       	pop	r29
    1eca:	ff 91       	pop	r31
    1ecc:	ef 91       	pop	r30
    1ece:	bf 91       	pop	r27
    1ed0:	af 91       	pop	r26
    1ed2:	9f 91       	pop	r25
    1ed4:	8f 91       	pop	r24
    1ed6:	7f 91       	pop	r23
    1ed8:	6f 91       	pop	r22
    1eda:	5f 91       	pop	r21
    1edc:	4f 91       	pop	r20
    1ede:	3f 91       	pop	r19
    1ee0:	2f 91       	pop	r18
    1ee2:	0f 90       	pop	r0
    1ee4:	0f be       	out	0x3f, r0	; 63
    1ee6:	0f 90       	pop	r0
    1ee8:	1f 90       	pop	r1
    1eea:	18 95       	reti

00001eec <LCD_VInit>:
#include "LCD_Interface.h"
#include "LCD_Private.h"
#define F_CPU 16000000
#include "util/delay.h"

void LCD_VInit (void){
    1eec:	0f 93       	push	r16
    1eee:	1f 93       	push	r17
    1ef0:	df 93       	push	r29
    1ef2:	cf 93       	push	r28
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
    1ef8:	cc 54       	subi	r28, 0x4C	; 76
    1efa:	d0 40       	sbci	r29, 0x00	; 0
    1efc:	0f b6       	in	r0, 0x3f	; 63
    1efe:	f8 94       	cli
    1f00:	de bf       	out	0x3e, r29	; 62
    1f02:	0f be       	out	0x3f, r0	; 63
    1f04:	cd bf       	out	0x3d, r28	; 61
    1f06:	fe 01       	movw	r30, r28
    1f08:	e7 5b       	subi	r30, 0xB7	; 183
    1f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	ac e0       	ldi	r26, 0x0C	; 12
    1f12:	b2 e4       	ldi	r27, 0x42	; 66
    1f14:	80 83       	st	Z, r24
    1f16:	91 83       	std	Z+1, r25	; 0x01
    1f18:	a2 83       	std	Z+2, r26	; 0x02
    1f1a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f1c:	8e 01       	movw	r16, r28
    1f1e:	0b 5b       	subi	r16, 0xBB	; 187
    1f20:	1f 4f       	sbci	r17, 0xFF	; 255
    1f22:	fe 01       	movw	r30, r28
    1f24:	e7 5b       	subi	r30, 0xB7	; 183
    1f26:	ff 4f       	sbci	r31, 0xFF	; 255
    1f28:	60 81       	ld	r22, Z
    1f2a:	71 81       	ldd	r23, Z+1	; 0x01
    1f2c:	82 81       	ldd	r24, Z+2	; 0x02
    1f2e:	93 81       	ldd	r25, Z+3	; 0x03
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	4a e7       	ldi	r20, 0x7A	; 122
    1f36:	55 e4       	ldi	r21, 0x45	; 69
    1f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	f8 01       	movw	r30, r16
    1f42:	80 83       	st	Z, r24
    1f44:	91 83       	std	Z+1, r25	; 0x01
    1f46:	a2 83       	std	Z+2, r26	; 0x02
    1f48:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f4a:	fe 01       	movw	r30, r28
    1f4c:	eb 5b       	subi	r30, 0xBB	; 187
    1f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f50:	60 81       	ld	r22, Z
    1f52:	71 81       	ldd	r23, Z+1	; 0x01
    1f54:	82 81       	ldd	r24, Z+2	; 0x02
    1f56:	93 81       	ldd	r25, Z+3	; 0x03
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	40 e8       	ldi	r20, 0x80	; 128
    1f5e:	5f e3       	ldi	r21, 0x3F	; 63
    1f60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f64:	88 23       	and	r24, r24
    1f66:	44 f4       	brge	.+16     	; 0x1f78 <LCD_VInit+0x8c>
		__ticks = 1;
    1f68:	fe 01       	movw	r30, r28
    1f6a:	ed 5b       	subi	r30, 0xBD	; 189
    1f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	91 83       	std	Z+1, r25	; 0x01
    1f74:	80 83       	st	Z, r24
    1f76:	64 c0       	rjmp	.+200    	; 0x2040 <LCD_VInit+0x154>
	else if (__tmp > 65535)
    1f78:	fe 01       	movw	r30, r28
    1f7a:	eb 5b       	subi	r30, 0xBB	; 187
    1f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7e:	60 81       	ld	r22, Z
    1f80:	71 81       	ldd	r23, Z+1	; 0x01
    1f82:	82 81       	ldd	r24, Z+2	; 0x02
    1f84:	93 81       	ldd	r25, Z+3	; 0x03
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	3f ef       	ldi	r19, 0xFF	; 255
    1f8a:	4f e7       	ldi	r20, 0x7F	; 127
    1f8c:	57 e4       	ldi	r21, 0x47	; 71
    1f8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f92:	18 16       	cp	r1, r24
    1f94:	0c f0       	brlt	.+2      	; 0x1f98 <LCD_VInit+0xac>
    1f96:	43 c0       	rjmp	.+134    	; 0x201e <LCD_VInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f98:	fe 01       	movw	r30, r28
    1f9a:	e7 5b       	subi	r30, 0xB7	; 183
    1f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9e:	60 81       	ld	r22, Z
    1fa0:	71 81       	ldd	r23, Z+1	; 0x01
    1fa2:	82 81       	ldd	r24, Z+2	; 0x02
    1fa4:	93 81       	ldd	r25, Z+3	; 0x03
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	40 e2       	ldi	r20, 0x20	; 32
    1fac:	51 e4       	ldi	r21, 0x41	; 65
    1fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	8e 01       	movw	r16, r28
    1fb8:	0d 5b       	subi	r16, 0xBD	; 189
    1fba:	1f 4f       	sbci	r17, 0xFF	; 255
    1fbc:	bc 01       	movw	r22, r24
    1fbe:	cd 01       	movw	r24, r26
    1fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	f8 01       	movw	r30, r16
    1fca:	91 83       	std	Z+1, r25	; 0x01
    1fcc:	80 83       	st	Z, r24
    1fce:	1f c0       	rjmp	.+62     	; 0x200e <LCD_VInit+0x122>
    1fd0:	fe 01       	movw	r30, r28
    1fd2:	ef 5b       	subi	r30, 0xBF	; 191
    1fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd6:	80 e9       	ldi	r24, 0x90	; 144
    1fd8:	91 e0       	ldi	r25, 0x01	; 1
    1fda:	91 83       	std	Z+1, r25	; 0x01
    1fdc:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fde:	fe 01       	movw	r30, r28
    1fe0:	ef 5b       	subi	r30, 0xBF	; 191
    1fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe4:	80 81       	ld	r24, Z
    1fe6:	91 81       	ldd	r25, Z+1	; 0x01
    1fe8:	01 97       	sbiw	r24, 0x01	; 1
    1fea:	f1 f7       	brne	.-4      	; 0x1fe8 <LCD_VInit+0xfc>
    1fec:	fe 01       	movw	r30, r28
    1fee:	ef 5b       	subi	r30, 0xBF	; 191
    1ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff2:	91 83       	std	Z+1, r25	; 0x01
    1ff4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff6:	de 01       	movw	r26, r28
    1ff8:	ad 5b       	subi	r26, 0xBD	; 189
    1ffa:	bf 4f       	sbci	r27, 0xFF	; 255
    1ffc:	fe 01       	movw	r30, r28
    1ffe:	ed 5b       	subi	r30, 0xBD	; 189
    2000:	ff 4f       	sbci	r31, 0xFF	; 255
    2002:	80 81       	ld	r24, Z
    2004:	91 81       	ldd	r25, Z+1	; 0x01
    2006:	01 97       	sbiw	r24, 0x01	; 1
    2008:	11 96       	adiw	r26, 0x01	; 1
    200a:	9c 93       	st	X, r25
    200c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    200e:	fe 01       	movw	r30, r28
    2010:	ed 5b       	subi	r30, 0xBD	; 189
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	80 81       	ld	r24, Z
    2016:	91 81       	ldd	r25, Z+1	; 0x01
    2018:	00 97       	sbiw	r24, 0x00	; 0
    201a:	d1 f6       	brne	.-76     	; 0x1fd0 <LCD_VInit+0xe4>
    201c:	24 c0       	rjmp	.+72     	; 0x2066 <LCD_VInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    201e:	8e 01       	movw	r16, r28
    2020:	0d 5b       	subi	r16, 0xBD	; 189
    2022:	1f 4f       	sbci	r17, 0xFF	; 255
    2024:	fe 01       	movw	r30, r28
    2026:	eb 5b       	subi	r30, 0xBB	; 187
    2028:	ff 4f       	sbci	r31, 0xFF	; 255
    202a:	60 81       	ld	r22, Z
    202c:	71 81       	ldd	r23, Z+1	; 0x01
    202e:	82 81       	ldd	r24, Z+2	; 0x02
    2030:	93 81       	ldd	r25, Z+3	; 0x03
    2032:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	f8 01       	movw	r30, r16
    203c:	91 83       	std	Z+1, r25	; 0x01
    203e:	80 83       	st	Z, r24
    2040:	fe 01       	movw	r30, r28
    2042:	ed 5b       	subi	r30, 0xBD	; 189
    2044:	ff 4f       	sbci	r31, 0xFF	; 255
    2046:	80 81       	ld	r24, Z
    2048:	91 81       	ldd	r25, Z+1	; 0x01
    204a:	fe 01       	movw	r30, r28
    204c:	ff 96       	adiw	r30, 0x3f	; 63
    204e:	91 83       	std	Z+1, r25	; 0x01
    2050:	80 83       	st	Z, r24
    2052:	fe 01       	movw	r30, r28
    2054:	ff 96       	adiw	r30, 0x3f	; 63
    2056:	80 81       	ld	r24, Z
    2058:	91 81       	ldd	r25, Z+1	; 0x01
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	f1 f7       	brne	.-4      	; 0x205a <LCD_VInit+0x16e>
    205e:	fe 01       	movw	r30, r28
    2060:	ff 96       	adiw	r30, 0x3f	; 63
    2062:	91 83       	std	Z+1, r25	; 0x01
    2064:	80 83       	st	Z, r24

	_delay_ms(35);
	Private_VWriteHalfPort(0b0010);
    2066:	82 e0       	ldi	r24, 0x02	; 2
    2068:	0e 94 86 13 	call	0x270c	; 0x270c <Private_VWriteHalfPort>
	Private_VEnable();
    206c:	0e 94 b2 13 	call	0x2764	; 0x2764 <Private_VEnable>
	/*LCD_VSendCmnd(0b0010000);*/
	LCD_VSendCmnd(LCD_Function_Set);
    2070:	88 e2       	ldi	r24, 0x28	; 40
    2072:	0e 94 3e 12 	call	0x247c	; 0x247c <LCD_VSendCmnd>
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	a4 e3       	ldi	r26, 0x34	; 52
    207c:	b2 e4       	ldi	r27, 0x42	; 66
    207e:	8b af       	std	Y+59, r24	; 0x3b
    2080:	9c af       	std	Y+60, r25	; 0x3c
    2082:	ad af       	std	Y+61, r26	; 0x3d
    2084:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2086:	6b ad       	ldd	r22, Y+59	; 0x3b
    2088:	7c ad       	ldd	r23, Y+60	; 0x3c
    208a:	8d ad       	ldd	r24, Y+61	; 0x3d
    208c:	9e ad       	ldd	r25, Y+62	; 0x3e
    208e:	2b ea       	ldi	r18, 0xAB	; 171
    2090:	3a ea       	ldi	r19, 0xAA	; 170
    2092:	4a ea       	ldi	r20, 0xAA	; 170
    2094:	50 e4       	ldi	r21, 0x40	; 64
    2096:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	8f ab       	std	Y+55, r24	; 0x37
    20a0:	98 af       	std	Y+56, r25	; 0x38
    20a2:	a9 af       	std	Y+57, r26	; 0x39
    20a4:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    20a6:	6f a9       	ldd	r22, Y+55	; 0x37
    20a8:	78 ad       	ldd	r23, Y+56	; 0x38
    20aa:	89 ad       	ldd	r24, Y+57	; 0x39
    20ac:	9a ad       	ldd	r25, Y+58	; 0x3a
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	40 e8       	ldi	r20, 0x80	; 128
    20b4:	5f e3       	ldi	r21, 0x3F	; 63
    20b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20ba:	88 23       	and	r24, r24
    20bc:	1c f4       	brge	.+6      	; 0x20c4 <LCD_VInit+0x1d8>
		__ticks = 1;
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	8e ab       	std	Y+54, r24	; 0x36
    20c2:	91 c0       	rjmp	.+290    	; 0x21e6 <LCD_VInit+0x2fa>
	else if (__tmp > 255)
    20c4:	6f a9       	ldd	r22, Y+55	; 0x37
    20c6:	78 ad       	ldd	r23, Y+56	; 0x38
    20c8:	89 ad       	ldd	r24, Y+57	; 0x39
    20ca:	9a ad       	ldd	r25, Y+58	; 0x3a
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	4f e7       	ldi	r20, 0x7F	; 127
    20d2:	53 e4       	ldi	r21, 0x43	; 67
    20d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20d8:	18 16       	cp	r1, r24
    20da:	0c f0       	brlt	.+2      	; 0x20de <LCD_VInit+0x1f2>
    20dc:	7b c0       	rjmp	.+246    	; 0x21d4 <LCD_VInit+0x2e8>
	{
		_delay_ms(__us / 1000.0);
    20de:	6b ad       	ldd	r22, Y+59	; 0x3b
    20e0:	7c ad       	ldd	r23, Y+60	; 0x3c
    20e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    20e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	4a e7       	ldi	r20, 0x7A	; 122
    20ec:	54 e4       	ldi	r21, 0x44	; 68
    20ee:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	8a ab       	std	Y+50, r24	; 0x32
    20f8:	9b ab       	std	Y+51, r25	; 0x33
    20fa:	ac ab       	std	Y+52, r26	; 0x34
    20fc:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20fe:	6a a9       	ldd	r22, Y+50	; 0x32
    2100:	7b a9       	ldd	r23, Y+51	; 0x33
    2102:	8c a9       	ldd	r24, Y+52	; 0x34
    2104:	9d a9       	ldd	r25, Y+53	; 0x35
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	4a e7       	ldi	r20, 0x7A	; 122
    210c:	55 e4       	ldi	r21, 0x45	; 69
    210e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	8e a7       	std	Y+46, r24	; 0x2e
    2118:	9f a7       	std	Y+47, r25	; 0x2f
    211a:	a8 ab       	std	Y+48, r26	; 0x30
    211c:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    211e:	6e a5       	ldd	r22, Y+46	; 0x2e
    2120:	7f a5       	ldd	r23, Y+47	; 0x2f
    2122:	88 a9       	ldd	r24, Y+48	; 0x30
    2124:	99 a9       	ldd	r25, Y+49	; 0x31
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	40 e8       	ldi	r20, 0x80	; 128
    212c:	5f e3       	ldi	r21, 0x3F	; 63
    212e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2132:	88 23       	and	r24, r24
    2134:	2c f4       	brge	.+10     	; 0x2140 <LCD_VInit+0x254>
		__ticks = 1;
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	9d a7       	std	Y+45, r25	; 0x2d
    213c:	8c a7       	std	Y+44, r24	; 0x2c
    213e:	3f c0       	rjmp	.+126    	; 0x21be <LCD_VInit+0x2d2>
	else if (__tmp > 65535)
    2140:	6e a5       	ldd	r22, Y+46	; 0x2e
    2142:	7f a5       	ldd	r23, Y+47	; 0x2f
    2144:	88 a9       	ldd	r24, Y+48	; 0x30
    2146:	99 a9       	ldd	r25, Y+49	; 0x31
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	3f ef       	ldi	r19, 0xFF	; 255
    214c:	4f e7       	ldi	r20, 0x7F	; 127
    214e:	57 e4       	ldi	r21, 0x47	; 71
    2150:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2154:	18 16       	cp	r1, r24
    2156:	4c f5       	brge	.+82     	; 0x21aa <LCD_VInit+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2158:	6a a9       	ldd	r22, Y+50	; 0x32
    215a:	7b a9       	ldd	r23, Y+51	; 0x33
    215c:	8c a9       	ldd	r24, Y+52	; 0x34
    215e:	9d a9       	ldd	r25, Y+53	; 0x35
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	40 e2       	ldi	r20, 0x20	; 32
    2166:	51 e4       	ldi	r21, 0x41	; 65
    2168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	bc 01       	movw	r22, r24
    2172:	cd 01       	movw	r24, r26
    2174:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	9d a7       	std	Y+45, r25	; 0x2d
    217e:	8c a7       	std	Y+44, r24	; 0x2c
    2180:	0f c0       	rjmp	.+30     	; 0x21a0 <LCD_VInit+0x2b4>
    2182:	80 e9       	ldi	r24, 0x90	; 144
    2184:	91 e0       	ldi	r25, 0x01	; 1
    2186:	9b a7       	std	Y+43, r25	; 0x2b
    2188:	8a a7       	std	Y+42, r24	; 0x2a
    218a:	8a a5       	ldd	r24, Y+42	; 0x2a
    218c:	9b a5       	ldd	r25, Y+43	; 0x2b
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	f1 f7       	brne	.-4      	; 0x218e <LCD_VInit+0x2a2>
    2192:	9b a7       	std	Y+43, r25	; 0x2b
    2194:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2196:	8c a5       	ldd	r24, Y+44	; 0x2c
    2198:	9d a5       	ldd	r25, Y+45	; 0x2d
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	9d a7       	std	Y+45, r25	; 0x2d
    219e:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a0:	8c a5       	ldd	r24, Y+44	; 0x2c
    21a2:	9d a5       	ldd	r25, Y+45	; 0x2d
    21a4:	00 97       	sbiw	r24, 0x00	; 0
    21a6:	69 f7       	brne	.-38     	; 0x2182 <LCD_VInit+0x296>
    21a8:	24 c0       	rjmp	.+72     	; 0x21f2 <LCD_VInit+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21aa:	6e a5       	ldd	r22, Y+46	; 0x2e
    21ac:	7f a5       	ldd	r23, Y+47	; 0x2f
    21ae:	88 a9       	ldd	r24, Y+48	; 0x30
    21b0:	99 a9       	ldd	r25, Y+49	; 0x31
    21b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	9d a7       	std	Y+45, r25	; 0x2d
    21bc:	8c a7       	std	Y+44, r24	; 0x2c
    21be:	8c a5       	ldd	r24, Y+44	; 0x2c
    21c0:	9d a5       	ldd	r25, Y+45	; 0x2d
    21c2:	99 a7       	std	Y+41, r25	; 0x29
    21c4:	88 a7       	std	Y+40, r24	; 0x28
    21c6:	88 a5       	ldd	r24, Y+40	; 0x28
    21c8:	99 a5       	ldd	r25, Y+41	; 0x29
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	f1 f7       	brne	.-4      	; 0x21ca <LCD_VInit+0x2de>
    21ce:	99 a7       	std	Y+41, r25	; 0x29
    21d0:	88 a7       	std	Y+40, r24	; 0x28
    21d2:	0f c0       	rjmp	.+30     	; 0x21f2 <LCD_VInit+0x306>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21d4:	6f a9       	ldd	r22, Y+55	; 0x37
    21d6:	78 ad       	ldd	r23, Y+56	; 0x38
    21d8:	89 ad       	ldd	r24, Y+57	; 0x39
    21da:	9a ad       	ldd	r25, Y+58	; 0x3a
    21dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e0:	dc 01       	movw	r26, r24
    21e2:	cb 01       	movw	r24, r22
    21e4:	8e ab       	std	Y+54, r24	; 0x36
    21e6:	8e a9       	ldd	r24, Y+54	; 0x36
    21e8:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21ea:	8f a1       	ldd	r24, Y+39	; 0x27
    21ec:	8a 95       	dec	r24
    21ee:	f1 f7       	brne	.-4      	; 0x21ec <LCD_VInit+0x300>
    21f0:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(45);
	LCD_VSendCmnd(LCD_Display_Control);
    21f2:	8f e0       	ldi	r24, 0x0F	; 15
    21f4:	0e 94 3e 12 	call	0x247c	; 0x247c <LCD_VSendCmnd>
    21f8:	80 e0       	ldi	r24, 0x00	; 0
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	a4 e3       	ldi	r26, 0x34	; 52
    21fe:	b2 e4       	ldi	r27, 0x42	; 66
    2200:	8b a3       	std	Y+35, r24	; 0x23
    2202:	9c a3       	std	Y+36, r25	; 0x24
    2204:	ad a3       	std	Y+37, r26	; 0x25
    2206:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2208:	6b a1       	ldd	r22, Y+35	; 0x23
    220a:	7c a1       	ldd	r23, Y+36	; 0x24
    220c:	8d a1       	ldd	r24, Y+37	; 0x25
    220e:	9e a1       	ldd	r25, Y+38	; 0x26
    2210:	2b ea       	ldi	r18, 0xAB	; 171
    2212:	3a ea       	ldi	r19, 0xAA	; 170
    2214:	4a ea       	ldi	r20, 0xAA	; 170
    2216:	50 e4       	ldi	r21, 0x40	; 64
    2218:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	8f 8f       	std	Y+31, r24	; 0x1f
    2222:	98 a3       	std	Y+32, r25	; 0x20
    2224:	a9 a3       	std	Y+33, r26	; 0x21
    2226:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2228:	6f 8d       	ldd	r22, Y+31	; 0x1f
    222a:	78 a1       	ldd	r23, Y+32	; 0x20
    222c:	89 a1       	ldd	r24, Y+33	; 0x21
    222e:	9a a1       	ldd	r25, Y+34	; 0x22
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	40 e8       	ldi	r20, 0x80	; 128
    2236:	5f e3       	ldi	r21, 0x3F	; 63
    2238:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    223c:	88 23       	and	r24, r24
    223e:	1c f4       	brge	.+6      	; 0x2246 <LCD_VInit+0x35a>
		__ticks = 1;
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	8e 8f       	std	Y+30, r24	; 0x1e
    2244:	91 c0       	rjmp	.+290    	; 0x2368 <LCD_VInit+0x47c>
	else if (__tmp > 255)
    2246:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2248:	78 a1       	ldd	r23, Y+32	; 0x20
    224a:	89 a1       	ldd	r24, Y+33	; 0x21
    224c:	9a a1       	ldd	r25, Y+34	; 0x22
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	4f e7       	ldi	r20, 0x7F	; 127
    2254:	53 e4       	ldi	r21, 0x43	; 67
    2256:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    225a:	18 16       	cp	r1, r24
    225c:	0c f0       	brlt	.+2      	; 0x2260 <LCD_VInit+0x374>
    225e:	7b c0       	rjmp	.+246    	; 0x2356 <LCD_VInit+0x46a>
	{
		_delay_ms(__us / 1000.0);
    2260:	6b a1       	ldd	r22, Y+35	; 0x23
    2262:	7c a1       	ldd	r23, Y+36	; 0x24
    2264:	8d a1       	ldd	r24, Y+37	; 0x25
    2266:	9e a1       	ldd	r25, Y+38	; 0x26
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	4a e7       	ldi	r20, 0x7A	; 122
    226e:	54 e4       	ldi	r21, 0x44	; 68
    2270:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	8a 8f       	std	Y+26, r24	; 0x1a
    227a:	9b 8f       	std	Y+27, r25	; 0x1b
    227c:	ac 8f       	std	Y+28, r26	; 0x1c
    227e:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2280:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2282:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2284:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2286:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	4a e7       	ldi	r20, 0x7A	; 122
    228e:	55 e4       	ldi	r21, 0x45	; 69
    2290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	8e 8b       	std	Y+22, r24	; 0x16
    229a:	9f 8b       	std	Y+23, r25	; 0x17
    229c:	a8 8f       	std	Y+24, r26	; 0x18
    229e:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    22a0:	6e 89       	ldd	r22, Y+22	; 0x16
    22a2:	7f 89       	ldd	r23, Y+23	; 0x17
    22a4:	88 8d       	ldd	r24, Y+24	; 0x18
    22a6:	99 8d       	ldd	r25, Y+25	; 0x19
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	40 e8       	ldi	r20, 0x80	; 128
    22ae:	5f e3       	ldi	r21, 0x3F	; 63
    22b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22b4:	88 23       	and	r24, r24
    22b6:	2c f4       	brge	.+10     	; 0x22c2 <LCD_VInit+0x3d6>
		__ticks = 1;
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	9d 8b       	std	Y+21, r25	; 0x15
    22be:	8c 8b       	std	Y+20, r24	; 0x14
    22c0:	3f c0       	rjmp	.+126    	; 0x2340 <LCD_VInit+0x454>
	else if (__tmp > 65535)
    22c2:	6e 89       	ldd	r22, Y+22	; 0x16
    22c4:	7f 89       	ldd	r23, Y+23	; 0x17
    22c6:	88 8d       	ldd	r24, Y+24	; 0x18
    22c8:	99 8d       	ldd	r25, Y+25	; 0x19
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	3f ef       	ldi	r19, 0xFF	; 255
    22ce:	4f e7       	ldi	r20, 0x7F	; 127
    22d0:	57 e4       	ldi	r21, 0x47	; 71
    22d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22d6:	18 16       	cp	r1, r24
    22d8:	4c f5       	brge	.+82     	; 0x232c <LCD_VInit+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22da:	6a 8d       	ldd	r22, Y+26	; 0x1a
    22dc:	7b 8d       	ldd	r23, Y+27	; 0x1b
    22de:	8c 8d       	ldd	r24, Y+28	; 0x1c
    22e0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	40 e2       	ldi	r20, 0x20	; 32
    22e8:	51 e4       	ldi	r21, 0x41	; 65
    22ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	bc 01       	movw	r22, r24
    22f4:	cd 01       	movw	r24, r26
    22f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	9d 8b       	std	Y+21, r25	; 0x15
    2300:	8c 8b       	std	Y+20, r24	; 0x14
    2302:	0f c0       	rjmp	.+30     	; 0x2322 <LCD_VInit+0x436>
    2304:	80 e9       	ldi	r24, 0x90	; 144
    2306:	91 e0       	ldi	r25, 0x01	; 1
    2308:	9b 8b       	std	Y+19, r25	; 0x13
    230a:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    230c:	8a 89       	ldd	r24, Y+18	; 0x12
    230e:	9b 89       	ldd	r25, Y+19	; 0x13
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	f1 f7       	brne	.-4      	; 0x2310 <LCD_VInit+0x424>
    2314:	9b 8b       	std	Y+19, r25	; 0x13
    2316:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2318:	8c 89       	ldd	r24, Y+20	; 0x14
    231a:	9d 89       	ldd	r25, Y+21	; 0x15
    231c:	01 97       	sbiw	r24, 0x01	; 1
    231e:	9d 8b       	std	Y+21, r25	; 0x15
    2320:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2322:	8c 89       	ldd	r24, Y+20	; 0x14
    2324:	9d 89       	ldd	r25, Y+21	; 0x15
    2326:	00 97       	sbiw	r24, 0x00	; 0
    2328:	69 f7       	brne	.-38     	; 0x2304 <LCD_VInit+0x418>
    232a:	24 c0       	rjmp	.+72     	; 0x2374 <LCD_VInit+0x488>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    232c:	6e 89       	ldd	r22, Y+22	; 0x16
    232e:	7f 89       	ldd	r23, Y+23	; 0x17
    2330:	88 8d       	ldd	r24, Y+24	; 0x18
    2332:	99 8d       	ldd	r25, Y+25	; 0x19
    2334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	9d 8b       	std	Y+21, r25	; 0x15
    233e:	8c 8b       	std	Y+20, r24	; 0x14
    2340:	8c 89       	ldd	r24, Y+20	; 0x14
    2342:	9d 89       	ldd	r25, Y+21	; 0x15
    2344:	99 8b       	std	Y+17, r25	; 0x11
    2346:	88 8b       	std	Y+16, r24	; 0x10
    2348:	88 89       	ldd	r24, Y+16	; 0x10
    234a:	99 89       	ldd	r25, Y+17	; 0x11
    234c:	01 97       	sbiw	r24, 0x01	; 1
    234e:	f1 f7       	brne	.-4      	; 0x234c <LCD_VInit+0x460>
    2350:	99 8b       	std	Y+17, r25	; 0x11
    2352:	88 8b       	std	Y+16, r24	; 0x10
    2354:	0f c0       	rjmp	.+30     	; 0x2374 <LCD_VInit+0x488>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2356:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2358:	78 a1       	ldd	r23, Y+32	; 0x20
    235a:	89 a1       	ldd	r24, Y+33	; 0x21
    235c:	9a a1       	ldd	r25, Y+34	; 0x22
    235e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	8e 8f       	std	Y+30, r24	; 0x1e
    2368:	8e 8d       	ldd	r24, Y+30	; 0x1e
    236a:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    236c:	8f 85       	ldd	r24, Y+15	; 0x0f
    236e:	8a 95       	dec	r24
    2370:	f1 f7       	brne	.-4      	; 0x236e <LCD_VInit+0x482>
    2372:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(45);
	LCD_VSendCmnd(LCD_Display_Clear);
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	0e 94 3e 12 	call	0x247c	; 0x247c <LCD_VSendCmnd>
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	a0 e0       	ldi	r26, 0x00	; 0
    2380:	b0 e4       	ldi	r27, 0x40	; 64
    2382:	8b 87       	std	Y+11, r24	; 0x0b
    2384:	9c 87       	std	Y+12, r25	; 0x0c
    2386:	ad 87       	std	Y+13, r26	; 0x0d
    2388:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    238a:	6b 85       	ldd	r22, Y+11	; 0x0b
    238c:	7c 85       	ldd	r23, Y+12	; 0x0c
    238e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2390:	9e 85       	ldd	r25, Y+14	; 0x0e
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	4a e7       	ldi	r20, 0x7A	; 122
    2398:	55 e4       	ldi	r21, 0x45	; 69
    239a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	8f 83       	std	Y+7, r24	; 0x07
    23a4:	98 87       	std	Y+8, r25	; 0x08
    23a6:	a9 87       	std	Y+9, r26	; 0x09
    23a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23aa:	6f 81       	ldd	r22, Y+7	; 0x07
    23ac:	78 85       	ldd	r23, Y+8	; 0x08
    23ae:	89 85       	ldd	r24, Y+9	; 0x09
    23b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	40 e8       	ldi	r20, 0x80	; 128
    23b8:	5f e3       	ldi	r21, 0x3F	; 63
    23ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23be:	88 23       	and	r24, r24
    23c0:	2c f4       	brge	.+10     	; 0x23cc <LCD_VInit+0x4e0>
		__ticks = 1;
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	9e 83       	std	Y+6, r25	; 0x06
    23c8:	8d 83       	std	Y+5, r24	; 0x05
    23ca:	3f c0       	rjmp	.+126    	; 0x244a <LCD_VInit+0x55e>
	else if (__tmp > 65535)
    23cc:	6f 81       	ldd	r22, Y+7	; 0x07
    23ce:	78 85       	ldd	r23, Y+8	; 0x08
    23d0:	89 85       	ldd	r24, Y+9	; 0x09
    23d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	3f ef       	ldi	r19, 0xFF	; 255
    23d8:	4f e7       	ldi	r20, 0x7F	; 127
    23da:	57 e4       	ldi	r21, 0x47	; 71
    23dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23e0:	18 16       	cp	r1, r24
    23e2:	4c f5       	brge	.+82     	; 0x2436 <LCD_VInit+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    23e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    23e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	40 e2       	ldi	r20, 0x20	; 32
    23f2:	51 e4       	ldi	r21, 0x41	; 65
    23f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f8:	dc 01       	movw	r26, r24
    23fa:	cb 01       	movw	r24, r22
    23fc:	bc 01       	movw	r22, r24
    23fe:	cd 01       	movw	r24, r26
    2400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	9e 83       	std	Y+6, r25	; 0x06
    240a:	8d 83       	std	Y+5, r24	; 0x05
    240c:	0f c0       	rjmp	.+30     	; 0x242c <LCD_VInit+0x540>
    240e:	80 e9       	ldi	r24, 0x90	; 144
    2410:	91 e0       	ldi	r25, 0x01	; 1
    2412:	9c 83       	std	Y+4, r25	; 0x04
    2414:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2416:	8b 81       	ldd	r24, Y+3	; 0x03
    2418:	9c 81       	ldd	r25, Y+4	; 0x04
    241a:	01 97       	sbiw	r24, 0x01	; 1
    241c:	f1 f7       	brne	.-4      	; 0x241a <LCD_VInit+0x52e>
    241e:	9c 83       	std	Y+4, r25	; 0x04
    2420:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2422:	8d 81       	ldd	r24, Y+5	; 0x05
    2424:	9e 81       	ldd	r25, Y+6	; 0x06
    2426:	01 97       	sbiw	r24, 0x01	; 1
    2428:	9e 83       	std	Y+6, r25	; 0x06
    242a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    242c:	8d 81       	ldd	r24, Y+5	; 0x05
    242e:	9e 81       	ldd	r25, Y+6	; 0x06
    2430:	00 97       	sbiw	r24, 0x00	; 0
    2432:	69 f7       	brne	.-38     	; 0x240e <LCD_VInit+0x522>
    2434:	14 c0       	rjmp	.+40     	; 0x245e <LCD_VInit+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2436:	6f 81       	ldd	r22, Y+7	; 0x07
    2438:	78 85       	ldd	r23, Y+8	; 0x08
    243a:	89 85       	ldd	r24, Y+9	; 0x09
    243c:	9a 85       	ldd	r25, Y+10	; 0x0a
    243e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	9e 83       	std	Y+6, r25	; 0x06
    2448:	8d 83       	std	Y+5, r24	; 0x05
    244a:	8d 81       	ldd	r24, Y+5	; 0x05
    244c:	9e 81       	ldd	r25, Y+6	; 0x06
    244e:	9a 83       	std	Y+2, r25	; 0x02
    2450:	89 83       	std	Y+1, r24	; 0x01
    2452:	89 81       	ldd	r24, Y+1	; 0x01
    2454:	9a 81       	ldd	r25, Y+2	; 0x02
    2456:	01 97       	sbiw	r24, 0x01	; 1
    2458:	f1 f7       	brne	.-4      	; 0x2456 <LCD_VInit+0x56a>
    245a:	9a 83       	std	Y+2, r25	; 0x02
    245c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_VSendCmnd(LCD_Entry_Mode);
    245e:	86 e0       	ldi	r24, 0x06	; 6
    2460:	0e 94 3e 12 	call	0x247c	; 0x247c <LCD_VSendCmnd>

}
    2464:	c4 5b       	subi	r28, 0xB4	; 180
    2466:	df 4f       	sbci	r29, 0xFF	; 255
    2468:	0f b6       	in	r0, 0x3f	; 63
    246a:	f8 94       	cli
    246c:	de bf       	out	0x3e, r29	; 62
    246e:	0f be       	out	0x3f, r0	; 63
    2470:	cd bf       	out	0x3d, r28	; 61
    2472:	cf 91       	pop	r28
    2474:	df 91       	pop	r29
    2476:	1f 91       	pop	r17
    2478:	0f 91       	pop	r16
    247a:	08 95       	ret

0000247c <LCD_VSendCmnd>:

void LCD_VSendCmnd (UINT8 Cmnd){
    247c:	df 93       	push	r29
    247e:	cf 93       	push	r28
    2480:	0f 92       	push	r0
    2482:	cd b7       	in	r28, 0x3d	; 61
    2484:	de b7       	in	r29, 0x3e	; 62
    2486:	89 83       	std	Y+1, r24	; 0x01

	Dio_WriteChannel(LCD_Rs , LOW);
    2488:	83 e0       	ldi	r24, 0x03	; 3
    248a:	60 e0       	ldi	r22, 0x00	; 0
    248c:	0e 94 c5 0b 	call	0x178a	; 0x178a <Dio_WriteChannel>
	Private_VWriteHalfPort(Cmnd>>4);
    2490:	89 81       	ldd	r24, Y+1	; 0x01
    2492:	82 95       	swap	r24
    2494:	8f 70       	andi	r24, 0x0F	; 15
    2496:	0e 94 86 13 	call	0x270c	; 0x270c <Private_VWriteHalfPort>
	Private_VEnable();
    249a:	0e 94 b2 13 	call	0x2764	; 0x2764 <Private_VEnable>
	Private_VWriteHalfPort(Cmnd);
    249e:	89 81       	ldd	r24, Y+1	; 0x01
    24a0:	0e 94 86 13 	call	0x270c	; 0x270c <Private_VWriteHalfPort>
	Private_VEnable();
    24a4:	0e 94 b2 13 	call	0x2764	; 0x2764 <Private_VEnable>

}
    24a8:	0f 90       	pop	r0
    24aa:	cf 91       	pop	r28
    24ac:	df 91       	pop	r29
    24ae:	08 95       	ret

000024b0 <LCD_VSendChar>:

void LCD_VSendChar (UINT8 Data){
    24b0:	df 93       	push	r29
    24b2:	cf 93       	push	r28
    24b4:	0f 92       	push	r0
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
    24ba:	89 83       	std	Y+1, r24	; 0x01

	Dio_WriteChannel(LCD_Rs , HIGH);
    24bc:	83 e0       	ldi	r24, 0x03	; 3
    24be:	61 e0       	ldi	r22, 0x01	; 1
    24c0:	0e 94 c5 0b 	call	0x178a	; 0x178a <Dio_WriteChannel>
	Private_VWriteHalfPort(Data>>4);
    24c4:	89 81       	ldd	r24, Y+1	; 0x01
    24c6:	82 95       	swap	r24
    24c8:	8f 70       	andi	r24, 0x0F	; 15
    24ca:	0e 94 86 13 	call	0x270c	; 0x270c <Private_VWriteHalfPort>
	Private_VEnable();
    24ce:	0e 94 b2 13 	call	0x2764	; 0x2764 <Private_VEnable>
	Private_VWriteHalfPort(Data);
    24d2:	89 81       	ldd	r24, Y+1	; 0x01
    24d4:	0e 94 86 13 	call	0x270c	; 0x270c <Private_VWriteHalfPort>
	Private_VEnable();
    24d8:	0e 94 b2 13 	call	0x2764	; 0x2764 <Private_VEnable>

}
    24dc:	0f 90       	pop	r0
    24de:	cf 91       	pop	r28
    24e0:	df 91       	pop	r29
    24e2:	08 95       	ret

000024e4 <LCD_VSendString>:

void LCD_VSendString (UINT8 *arr){
    24e4:	df 93       	push	r29
    24e6:	cf 93       	push	r28
    24e8:	00 d0       	rcall	.+0      	; 0x24ea <LCD_VSendString+0x6>
    24ea:	0f 92       	push	r0
    24ec:	cd b7       	in	r28, 0x3d	; 61
    24ee:	de b7       	in	r29, 0x3e	; 62
    24f0:	9b 83       	std	Y+3, r25	; 0x03
    24f2:	8a 83       	std	Y+2, r24	; 0x02
	UINT8 i = 0;
    24f4:	19 82       	std	Y+1, r1	; 0x01
    24f6:	0e c0       	rjmp	.+28     	; 0x2514 <LCD_VSendString+0x30>
	while(arr[i] != '\0'){
		LCD_VSendChar (arr[i]);
    24f8:	89 81       	ldd	r24, Y+1	; 0x01
    24fa:	28 2f       	mov	r18, r24
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2500:	9b 81       	ldd	r25, Y+3	; 0x03
    2502:	fc 01       	movw	r30, r24
    2504:	e2 0f       	add	r30, r18
    2506:	f3 1f       	adc	r31, r19
    2508:	80 81       	ld	r24, Z
    250a:	0e 94 58 12 	call	0x24b0	; 0x24b0 <LCD_VSendChar>
		i++;
    250e:	89 81       	ldd	r24, Y+1	; 0x01
    2510:	8f 5f       	subi	r24, 0xFF	; 255
    2512:	89 83       	std	Y+1, r24	; 0x01

}

void LCD_VSendString (UINT8 *arr){
	UINT8 i = 0;
	while(arr[i] != '\0'){
    2514:	89 81       	ldd	r24, Y+1	; 0x01
    2516:	28 2f       	mov	r18, r24
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	8a 81       	ldd	r24, Y+2	; 0x02
    251c:	9b 81       	ldd	r25, Y+3	; 0x03
    251e:	fc 01       	movw	r30, r24
    2520:	e2 0f       	add	r30, r18
    2522:	f3 1f       	adc	r31, r19
    2524:	80 81       	ld	r24, Z
    2526:	88 23       	and	r24, r24
    2528:	39 f7       	brne	.-50     	; 0x24f8 <LCD_VSendString+0x14>
		LCD_VSendChar (arr[i]);
		i++;
	}
}
    252a:	0f 90       	pop	r0
    252c:	0f 90       	pop	r0
    252e:	0f 90       	pop	r0
    2530:	cf 91       	pop	r28
    2532:	df 91       	pop	r29
    2534:	08 95       	ret

00002536 <LCD_VGoToRowCol>:

void LCD_VGoToRowCol(UINT8 row, UINT8 col){
    2536:	df 93       	push	r29
    2538:	cf 93       	push	r28
    253a:	00 d0       	rcall	.+0      	; 0x253c <LCD_VGoToRowCol+0x6>
    253c:	00 d0       	rcall	.+0      	; 0x253e <LCD_VGoToRowCol+0x8>
    253e:	0f 92       	push	r0
    2540:	cd b7       	in	r28, 0x3d	; 61
    2542:	de b7       	in	r29, 0x3e	; 62
    2544:	8a 83       	std	Y+2, r24	; 0x02
    2546:	6b 83       	std	Y+3, r22	; 0x03

	UINT8 address;
		switch (row)
    2548:	8a 81       	ldd	r24, Y+2	; 0x02
    254a:	28 2f       	mov	r18, r24
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	3d 83       	std	Y+5, r19	; 0x05
    2550:	2c 83       	std	Y+4, r18	; 0x04
    2552:	8c 81       	ldd	r24, Y+4	; 0x04
    2554:	9d 81       	ldd	r25, Y+5	; 0x05
    2556:	81 30       	cpi	r24, 0x01	; 1
    2558:	91 05       	cpc	r25, r1
    255a:	c1 f0       	breq	.+48     	; 0x258c <LCD_VGoToRowCol+0x56>
    255c:	2c 81       	ldd	r18, Y+4	; 0x04
    255e:	3d 81       	ldd	r19, Y+5	; 0x05
    2560:	22 30       	cpi	r18, 0x02	; 2
    2562:	31 05       	cpc	r19, r1
    2564:	2c f4       	brge	.+10     	; 0x2570 <LCD_VGoToRowCol+0x3a>
    2566:	8c 81       	ldd	r24, Y+4	; 0x04
    2568:	9d 81       	ldd	r25, Y+5	; 0x05
    256a:	00 97       	sbiw	r24, 0x00	; 0
    256c:	61 f0       	breq	.+24     	; 0x2586 <LCD_VGoToRowCol+0x50>
    256e:	19 c0       	rjmp	.+50     	; 0x25a2 <LCD_VGoToRowCol+0x6c>
    2570:	2c 81       	ldd	r18, Y+4	; 0x04
    2572:	3d 81       	ldd	r19, Y+5	; 0x05
    2574:	22 30       	cpi	r18, 0x02	; 2
    2576:	31 05       	cpc	r19, r1
    2578:	69 f0       	breq	.+26     	; 0x2594 <LCD_VGoToRowCol+0x5e>
    257a:	8c 81       	ldd	r24, Y+4	; 0x04
    257c:	9d 81       	ldd	r25, Y+5	; 0x05
    257e:	83 30       	cpi	r24, 0x03	; 3
    2580:	91 05       	cpc	r25, r1
    2582:	61 f0       	breq	.+24     	; 0x259c <LCD_VGoToRowCol+0x66>
    2584:	0e c0       	rjmp	.+28     	; 0x25a2 <LCD_VGoToRowCol+0x6c>
		{
			case 0:
				address = col;
    2586:	8b 81       	ldd	r24, Y+3	; 0x03
    2588:	89 83       	std	Y+1, r24	; 0x01
    258a:	0b c0       	rjmp	.+22     	; 0x25a2 <LCD_VGoToRowCol+0x6c>
				break;
			case 1:
				address = col + 0x40;
    258c:	8b 81       	ldd	r24, Y+3	; 0x03
    258e:	80 5c       	subi	r24, 0xC0	; 192
    2590:	89 83       	std	Y+1, r24	; 0x01
    2592:	07 c0       	rjmp	.+14     	; 0x25a2 <LCD_VGoToRowCol+0x6c>
				break;
			case 2:
				address = col + 0x14;
    2594:	8b 81       	ldd	r24, Y+3	; 0x03
    2596:	8c 5e       	subi	r24, 0xEC	; 236
    2598:	89 83       	std	Y+1, r24	; 0x01
    259a:	03 c0       	rjmp	.+6      	; 0x25a2 <LCD_VGoToRowCol+0x6c>
				break;
			case 3:
				address = col + 0x54;
    259c:	8b 81       	ldd	r24, Y+3	; 0x03
    259e:	8c 5a       	subi	r24, 0xAC	; 172
    25a0:	89 83       	std	Y+1, r24	; 0x01
				break;

		}
		LCD_VSendCmnd(address | SET_CURSOR_LOCATION);
    25a2:	89 81       	ldd	r24, Y+1	; 0x01
    25a4:	80 68       	ori	r24, 0x80	; 128
    25a6:	0e 94 3e 12 	call	0x247c	; 0x247c <LCD_VSendCmnd>
}
    25aa:	0f 90       	pop	r0
    25ac:	0f 90       	pop	r0
    25ae:	0f 90       	pop	r0
    25b0:	0f 90       	pop	r0
    25b2:	0f 90       	pop	r0
    25b4:	cf 91       	pop	r28
    25b6:	df 91       	pop	r29
    25b8:	08 95       	ret

000025ba <LCD_VIntegerToString>:

void LCD_VIntegerToString(UINT16 data){
    25ba:	df 93       	push	r29
    25bc:	cf 93       	push	r28
    25be:	cd b7       	in	r28, 0x3d	; 61
    25c0:	de b7       	in	r29, 0x3e	; 62
    25c2:	62 97       	sbiw	r28, 0x12	; 18
    25c4:	0f b6       	in	r0, 0x3f	; 63
    25c6:	f8 94       	cli
    25c8:	de bf       	out	0x3e, r29	; 62
    25ca:	0f be       	out	0x3f, r0	; 63
    25cc:	cd bf       	out	0x3d, r28	; 61
    25ce:	9a 8b       	std	Y+18, r25	; 0x12
    25d0:	89 8b       	std	Y+17, r24	; 0x11

	UINT8 BUFF[16];
	//itoa(data,BUFF,10);
	Private_VintToStr(data,BUFF);
    25d2:	89 89       	ldd	r24, Y+17	; 0x11
    25d4:	9a 89       	ldd	r25, Y+18	; 0x12
    25d6:	9e 01       	movw	r18, r28
    25d8:	2f 5f       	subi	r18, 0xFF	; 255
    25da:	3f 4f       	sbci	r19, 0xFF	; 255
    25dc:	b9 01       	movw	r22, r18
    25de:	0e 94 3f 14 	call	0x287e	; 0x287e <Private_VintToStr>
	LCD_VSendString(BUFF);
    25e2:	ce 01       	movw	r24, r28
    25e4:	01 96       	adiw	r24, 0x01	; 1
    25e6:	0e 94 72 12 	call	0x24e4	; 0x24e4 <LCD_VSendString>

}
    25ea:	62 96       	adiw	r28, 0x12	; 18
    25ec:	0f b6       	in	r0, 0x3f	; 63
    25ee:	f8 94       	cli
    25f0:	de bf       	out	0x3e, r29	; 62
    25f2:	0f be       	out	0x3f, r0	; 63
    25f4:	cd bf       	out	0x3d, r28	; 61
    25f6:	cf 91       	pop	r28
    25f8:	df 91       	pop	r29
    25fa:	08 95       	ret

000025fc <LCD_VClearScreen>:

void LCD_VClearScreen(){
    25fc:	df 93       	push	r29
    25fe:	cf 93       	push	r28
    2600:	cd b7       	in	r28, 0x3d	; 61
    2602:	de b7       	in	r29, 0x3e	; 62
    2604:	2e 97       	sbiw	r28, 0x0e	; 14
    2606:	0f b6       	in	r0, 0x3f	; 63
    2608:	f8 94       	cli
    260a:	de bf       	out	0x3e, r29	; 62
    260c:	0f be       	out	0x3f, r0	; 63
    260e:	cd bf       	out	0x3d, r28	; 61
	LCD_VSendCmnd(LCD_Display_Clear);
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	0e 94 3e 12 	call	0x247c	; 0x247c <LCD_VSendCmnd>
    2616:	80 e0       	ldi	r24, 0x00	; 0
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	a0 e0       	ldi	r26, 0x00	; 0
    261c:	b0 e4       	ldi	r27, 0x40	; 64
    261e:	8b 87       	std	Y+11, r24	; 0x0b
    2620:	9c 87       	std	Y+12, r25	; 0x0c
    2622:	ad 87       	std	Y+13, r26	; 0x0d
    2624:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2626:	6b 85       	ldd	r22, Y+11	; 0x0b
    2628:	7c 85       	ldd	r23, Y+12	; 0x0c
    262a:	8d 85       	ldd	r24, Y+13	; 0x0d
    262c:	9e 85       	ldd	r25, Y+14	; 0x0e
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	4a e7       	ldi	r20, 0x7A	; 122
    2634:	55 e4       	ldi	r21, 0x45	; 69
    2636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	8f 83       	std	Y+7, r24	; 0x07
    2640:	98 87       	std	Y+8, r25	; 0x08
    2642:	a9 87       	std	Y+9, r26	; 0x09
    2644:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2646:	6f 81       	ldd	r22, Y+7	; 0x07
    2648:	78 85       	ldd	r23, Y+8	; 0x08
    264a:	89 85       	ldd	r24, Y+9	; 0x09
    264c:	9a 85       	ldd	r25, Y+10	; 0x0a
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	40 e8       	ldi	r20, 0x80	; 128
    2654:	5f e3       	ldi	r21, 0x3F	; 63
    2656:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    265a:	88 23       	and	r24, r24
    265c:	2c f4       	brge	.+10     	; 0x2668 <LCD_VClearScreen+0x6c>
		__ticks = 1;
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	9e 83       	std	Y+6, r25	; 0x06
    2664:	8d 83       	std	Y+5, r24	; 0x05
    2666:	3f c0       	rjmp	.+126    	; 0x26e6 <LCD_VClearScreen+0xea>
	else if (__tmp > 65535)
    2668:	6f 81       	ldd	r22, Y+7	; 0x07
    266a:	78 85       	ldd	r23, Y+8	; 0x08
    266c:	89 85       	ldd	r24, Y+9	; 0x09
    266e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	3f ef       	ldi	r19, 0xFF	; 255
    2674:	4f e7       	ldi	r20, 0x7F	; 127
    2676:	57 e4       	ldi	r21, 0x47	; 71
    2678:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    267c:	18 16       	cp	r1, r24
    267e:	4c f5       	brge	.+82     	; 0x26d2 <LCD_VClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2680:	6b 85       	ldd	r22, Y+11	; 0x0b
    2682:	7c 85       	ldd	r23, Y+12	; 0x0c
    2684:	8d 85       	ldd	r24, Y+13	; 0x0d
    2686:	9e 85       	ldd	r25, Y+14	; 0x0e
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	40 e2       	ldi	r20, 0x20	; 32
    268e:	51 e4       	ldi	r21, 0x41	; 65
    2690:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	bc 01       	movw	r22, r24
    269a:	cd 01       	movw	r24, r26
    269c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	9e 83       	std	Y+6, r25	; 0x06
    26a6:	8d 83       	std	Y+5, r24	; 0x05
    26a8:	0f c0       	rjmp	.+30     	; 0x26c8 <LCD_VClearScreen+0xcc>
    26aa:	80 e9       	ldi	r24, 0x90	; 144
    26ac:	91 e0       	ldi	r25, 0x01	; 1
    26ae:	9c 83       	std	Y+4, r25	; 0x04
    26b0:	8b 83       	std	Y+3, r24	; 0x03
    26b2:	8b 81       	ldd	r24, Y+3	; 0x03
    26b4:	9c 81       	ldd	r25, Y+4	; 0x04
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	f1 f7       	brne	.-4      	; 0x26b6 <LCD_VClearScreen+0xba>
    26ba:	9c 83       	std	Y+4, r25	; 0x04
    26bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26be:	8d 81       	ldd	r24, Y+5	; 0x05
    26c0:	9e 81       	ldd	r25, Y+6	; 0x06
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	9e 83       	std	Y+6, r25	; 0x06
    26c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ca:	9e 81       	ldd	r25, Y+6	; 0x06
    26cc:	00 97       	sbiw	r24, 0x00	; 0
    26ce:	69 f7       	brne	.-38     	; 0x26aa <LCD_VClearScreen+0xae>
    26d0:	14 c0       	rjmp	.+40     	; 0x26fa <LCD_VClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d2:	6f 81       	ldd	r22, Y+7	; 0x07
    26d4:	78 85       	ldd	r23, Y+8	; 0x08
    26d6:	89 85       	ldd	r24, Y+9	; 0x09
    26d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	9e 83       	std	Y+6, r25	; 0x06
    26e4:	8d 83       	std	Y+5, r24	; 0x05
    26e6:	8d 81       	ldd	r24, Y+5	; 0x05
    26e8:	9e 81       	ldd	r25, Y+6	; 0x06
    26ea:	9a 83       	std	Y+2, r25	; 0x02
    26ec:	89 83       	std	Y+1, r24	; 0x01
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	9a 81       	ldd	r25, Y+2	; 0x02
    26f2:	01 97       	sbiw	r24, 0x01	; 1
    26f4:	f1 f7       	brne	.-4      	; 0x26f2 <LCD_VClearScreen+0xf6>
    26f6:	9a 83       	std	Y+2, r25	; 0x02
    26f8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    26fa:	2e 96       	adiw	r28, 0x0e	; 14
    26fc:	0f b6       	in	r0, 0x3f	; 63
    26fe:	f8 94       	cli
    2700:	de bf       	out	0x3e, r29	; 62
    2702:	0f be       	out	0x3f, r0	; 63
    2704:	cd bf       	out	0x3d, r28	; 61
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	08 95       	ret

0000270c <Private_VWriteHalfPort>:

static void Private_VWriteHalfPort(UINT8 value){
    270c:	df 93       	push	r29
    270e:	cf 93       	push	r28
    2710:	0f 92       	push	r0
    2712:	cd b7       	in	r28, 0x3d	; 61
    2714:	de b7       	in	r29, 0x3e	; 62
    2716:	89 83       	std	Y+1, r24	; 0x01

	Dio_WriteChannel(LCD_D4 , READBIT(value , 0));
    2718:	89 81       	ldd	r24, Y+1	; 0x01
    271a:	98 2f       	mov	r25, r24
    271c:	91 70       	andi	r25, 0x01	; 1
    271e:	88 e0       	ldi	r24, 0x08	; 8
    2720:	69 2f       	mov	r22, r25
    2722:	0e 94 c5 0b 	call	0x178a	; 0x178a <Dio_WriteChannel>
	Dio_WriteChannel(LCD_D5 , READBIT(value , 1));
    2726:	89 81       	ldd	r24, Y+1	; 0x01
    2728:	86 95       	lsr	r24
    272a:	98 2f       	mov	r25, r24
    272c:	91 70       	andi	r25, 0x01	; 1
    272e:	89 e0       	ldi	r24, 0x09	; 9
    2730:	69 2f       	mov	r22, r25
    2732:	0e 94 c5 0b 	call	0x178a	; 0x178a <Dio_WriteChannel>
	Dio_WriteChannel(LCD_D6 , READBIT(value , 2));
    2736:	89 81       	ldd	r24, Y+1	; 0x01
    2738:	86 95       	lsr	r24
    273a:	86 95       	lsr	r24
    273c:	98 2f       	mov	r25, r24
    273e:	91 70       	andi	r25, 0x01	; 1
    2740:	8a e0       	ldi	r24, 0x0A	; 10
    2742:	69 2f       	mov	r22, r25
    2744:	0e 94 c5 0b 	call	0x178a	; 0x178a <Dio_WriteChannel>
	Dio_WriteChannel(LCD_D7 , READBIT(value , 3));
    2748:	89 81       	ldd	r24, Y+1	; 0x01
    274a:	86 95       	lsr	r24
    274c:	86 95       	lsr	r24
    274e:	86 95       	lsr	r24
    2750:	98 2f       	mov	r25, r24
    2752:	91 70       	andi	r25, 0x01	; 1
    2754:	8c e0       	ldi	r24, 0x0C	; 12
    2756:	69 2f       	mov	r22, r25
    2758:	0e 94 c5 0b 	call	0x178a	; 0x178a <Dio_WriteChannel>

}
    275c:	0f 90       	pop	r0
    275e:	cf 91       	pop	r28
    2760:	df 91       	pop	r29
    2762:	08 95       	ret

00002764 <Private_VEnable>:

static void Private_VEnable(void){
    2764:	df 93       	push	r29
    2766:	cf 93       	push	r28
    2768:	cd b7       	in	r28, 0x3d	; 61
    276a:	de b7       	in	r29, 0x3e	; 62
    276c:	2e 97       	sbiw	r28, 0x0e	; 14
    276e:	0f b6       	in	r0, 0x3f	; 63
    2770:	f8 94       	cli
    2772:	de bf       	out	0x3e, r29	; 62
    2774:	0f be       	out	0x3f, r0	; 63
    2776:	cd bf       	out	0x3d, r28	; 61

	Dio_WriteChannel(LCD_En , HIGH);
    2778:	82 e0       	ldi	r24, 0x02	; 2
    277a:	61 e0       	ldi	r22, 0x01	; 1
    277c:	0e 94 c5 0b 	call	0x178a	; 0x178a <Dio_WriteChannel>
    2780:	80 e0       	ldi	r24, 0x00	; 0
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	a0 e8       	ldi	r26, 0x80	; 128
    2786:	bf e3       	ldi	r27, 0x3F	; 63
    2788:	8b 87       	std	Y+11, r24	; 0x0b
    278a:	9c 87       	std	Y+12, r25	; 0x0c
    278c:	ad 87       	std	Y+13, r26	; 0x0d
    278e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2790:	6b 85       	ldd	r22, Y+11	; 0x0b
    2792:	7c 85       	ldd	r23, Y+12	; 0x0c
    2794:	8d 85       	ldd	r24, Y+13	; 0x0d
    2796:	9e 85       	ldd	r25, Y+14	; 0x0e
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	4a e7       	ldi	r20, 0x7A	; 122
    279e:	55 e4       	ldi	r21, 0x45	; 69
    27a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	8f 83       	std	Y+7, r24	; 0x07
    27aa:	98 87       	std	Y+8, r25	; 0x08
    27ac:	a9 87       	std	Y+9, r26	; 0x09
    27ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27b0:	6f 81       	ldd	r22, Y+7	; 0x07
    27b2:	78 85       	ldd	r23, Y+8	; 0x08
    27b4:	89 85       	ldd	r24, Y+9	; 0x09
    27b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	40 e8       	ldi	r20, 0x80	; 128
    27be:	5f e3       	ldi	r21, 0x3F	; 63
    27c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27c4:	88 23       	and	r24, r24
    27c6:	2c f4       	brge	.+10     	; 0x27d2 <Private_VEnable+0x6e>
		__ticks = 1;
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	9e 83       	std	Y+6, r25	; 0x06
    27ce:	8d 83       	std	Y+5, r24	; 0x05
    27d0:	3f c0       	rjmp	.+126    	; 0x2850 <Private_VEnable+0xec>
	else if (__tmp > 65535)
    27d2:	6f 81       	ldd	r22, Y+7	; 0x07
    27d4:	78 85       	ldd	r23, Y+8	; 0x08
    27d6:	89 85       	ldd	r24, Y+9	; 0x09
    27d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	3f ef       	ldi	r19, 0xFF	; 255
    27de:	4f e7       	ldi	r20, 0x7F	; 127
    27e0:	57 e4       	ldi	r21, 0x47	; 71
    27e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27e6:	18 16       	cp	r1, r24
    27e8:	4c f5       	brge	.+82     	; 0x283c <Private_VEnable+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    27ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    27f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	40 e2       	ldi	r20, 0x20	; 32
    27f8:	51 e4       	ldi	r21, 0x41	; 65
    27fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	bc 01       	movw	r22, r24
    2804:	cd 01       	movw	r24, r26
    2806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	9e 83       	std	Y+6, r25	; 0x06
    2810:	8d 83       	std	Y+5, r24	; 0x05
    2812:	0f c0       	rjmp	.+30     	; 0x2832 <Private_VEnable+0xce>
    2814:	80 e9       	ldi	r24, 0x90	; 144
    2816:	91 e0       	ldi	r25, 0x01	; 1
    2818:	9c 83       	std	Y+4, r25	; 0x04
    281a:	8b 83       	std	Y+3, r24	; 0x03
    281c:	8b 81       	ldd	r24, Y+3	; 0x03
    281e:	9c 81       	ldd	r25, Y+4	; 0x04
    2820:	01 97       	sbiw	r24, 0x01	; 1
    2822:	f1 f7       	brne	.-4      	; 0x2820 <Private_VEnable+0xbc>
    2824:	9c 83       	std	Y+4, r25	; 0x04
    2826:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2828:	8d 81       	ldd	r24, Y+5	; 0x05
    282a:	9e 81       	ldd	r25, Y+6	; 0x06
    282c:	01 97       	sbiw	r24, 0x01	; 1
    282e:	9e 83       	std	Y+6, r25	; 0x06
    2830:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2832:	8d 81       	ldd	r24, Y+5	; 0x05
    2834:	9e 81       	ldd	r25, Y+6	; 0x06
    2836:	00 97       	sbiw	r24, 0x00	; 0
    2838:	69 f7       	brne	.-38     	; 0x2814 <Private_VEnable+0xb0>
    283a:	14 c0       	rjmp	.+40     	; 0x2864 <Private_VEnable+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    283c:	6f 81       	ldd	r22, Y+7	; 0x07
    283e:	78 85       	ldd	r23, Y+8	; 0x08
    2840:	89 85       	ldd	r24, Y+9	; 0x09
    2842:	9a 85       	ldd	r25, Y+10	; 0x0a
    2844:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2848:	dc 01       	movw	r26, r24
    284a:	cb 01       	movw	r24, r22
    284c:	9e 83       	std	Y+6, r25	; 0x06
    284e:	8d 83       	std	Y+5, r24	; 0x05
    2850:	8d 81       	ldd	r24, Y+5	; 0x05
    2852:	9e 81       	ldd	r25, Y+6	; 0x06
    2854:	9a 83       	std	Y+2, r25	; 0x02
    2856:	89 83       	std	Y+1, r24	; 0x01
    2858:	89 81       	ldd	r24, Y+1	; 0x01
    285a:	9a 81       	ldd	r25, Y+2	; 0x02
    285c:	01 97       	sbiw	r24, 0x01	; 1
    285e:	f1 f7       	brne	.-4      	; 0x285c <Private_VEnable+0xf8>
    2860:	9a 83       	std	Y+2, r25	; 0x02
    2862:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	Dio_WriteChannel(LCD_En , LOW);
    2864:	82 e0       	ldi	r24, 0x02	; 2
    2866:	60 e0       	ldi	r22, 0x00	; 0
    2868:	0e 94 c5 0b 	call	0x178a	; 0x178a <Dio_WriteChannel>

}
    286c:	2e 96       	adiw	r28, 0x0e	; 14
    286e:	0f b6       	in	r0, 0x3f	; 63
    2870:	f8 94       	cli
    2872:	de bf       	out	0x3e, r29	; 62
    2874:	0f be       	out	0x3f, r0	; 63
    2876:	cd bf       	out	0x3d, r28	; 61
    2878:	cf 91       	pop	r28
    287a:	df 91       	pop	r29
    287c:	08 95       	ret

0000287e <Private_VintToStr>:

static void Private_VintToStr(UINT16 num, UINT8 str[]) {
    287e:	df 93       	push	r29
    2880:	cf 93       	push	r28
    2882:	cd b7       	in	r28, 0x3d	; 61
    2884:	de b7       	in	r29, 0x3e	; 62
    2886:	2b 97       	sbiw	r28, 0x0b	; 11
    2888:	0f b6       	in	r0, 0x3f	; 63
    288a:	f8 94       	cli
    288c:	de bf       	out	0x3e, r29	; 62
    288e:	0f be       	out	0x3f, r0	; 63
    2890:	cd bf       	out	0x3d, r28	; 61
    2892:	99 87       	std	Y+9, r25	; 0x09
    2894:	88 87       	std	Y+8, r24	; 0x08
    2896:	7b 87       	std	Y+11, r23	; 0x0b
    2898:	6a 87       	std	Y+10, r22	; 0x0a
    int i = 0;
    289a:	1f 82       	std	Y+7, r1	; 0x07
    289c:	1e 82       	std	Y+6, r1	; 0x06

    do {
        str[i++] = num % 10 + '0';
    289e:	2e 81       	ldd	r18, Y+6	; 0x06
    28a0:	3f 81       	ldd	r19, Y+7	; 0x07
    28a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    28a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    28a6:	fc 01       	movw	r30, r24
    28a8:	e2 0f       	add	r30, r18
    28aa:	f3 1f       	adc	r31, r19
    28ac:	88 85       	ldd	r24, Y+8	; 0x08
    28ae:	99 85       	ldd	r25, Y+9	; 0x09
    28b0:	2a e0       	ldi	r18, 0x0A	; 10
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	b9 01       	movw	r22, r18
    28b6:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <__udivmodhi4>
    28ba:	80 5d       	subi	r24, 0xD0	; 208
    28bc:	80 83       	st	Z, r24
    28be:	8e 81       	ldd	r24, Y+6	; 0x06
    28c0:	9f 81       	ldd	r25, Y+7	; 0x07
    28c2:	01 96       	adiw	r24, 0x01	; 1
    28c4:	9f 83       	std	Y+7, r25	; 0x07
    28c6:	8e 83       	std	Y+6, r24	; 0x06
        num /= 10;
    28c8:	88 85       	ldd	r24, Y+8	; 0x08
    28ca:	99 85       	ldd	r25, Y+9	; 0x09
    28cc:	2a e0       	ldi	r18, 0x0A	; 10
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	b9 01       	movw	r22, r18
    28d2:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <__udivmodhi4>
    28d6:	cb 01       	movw	r24, r22
    28d8:	99 87       	std	Y+9, r25	; 0x09
    28da:	88 87       	std	Y+8, r24	; 0x08
    } while (num > 0);
    28dc:	88 85       	ldd	r24, Y+8	; 0x08
    28de:	99 85       	ldd	r25, Y+9	; 0x09
    28e0:	00 97       	sbiw	r24, 0x00	; 0
    28e2:	e9 f6       	brne	.-70     	; 0x289e <Private_VintToStr+0x20>

    str[i] = '\0';
    28e4:	2e 81       	ldd	r18, Y+6	; 0x06
    28e6:	3f 81       	ldd	r19, Y+7	; 0x07
    28e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    28ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    28ec:	fc 01       	movw	r30, r24
    28ee:	e2 0f       	add	r30, r18
    28f0:	f3 1f       	adc	r31, r19
    28f2:	10 82       	st	Z, r1

    int start = 0;
    28f4:	1d 82       	std	Y+5, r1	; 0x05
    28f6:	1c 82       	std	Y+4, r1	; 0x04
    int end = i - 1;
    28f8:	8e 81       	ldd	r24, Y+6	; 0x06
    28fa:	9f 81       	ldd	r25, Y+7	; 0x07
    28fc:	01 97       	sbiw	r24, 0x01	; 1
    28fe:	9b 83       	std	Y+3, r25	; 0x03
    2900:	8a 83       	std	Y+2, r24	; 0x02
    2902:	2c c0       	rjmp	.+88     	; 0x295c <Private_VintToStr+0xde>
    while (start < end) {
        char temp = str[start];
    2904:	2c 81       	ldd	r18, Y+4	; 0x04
    2906:	3d 81       	ldd	r19, Y+5	; 0x05
    2908:	8a 85       	ldd	r24, Y+10	; 0x0a
    290a:	9b 85       	ldd	r25, Y+11	; 0x0b
    290c:	fc 01       	movw	r30, r24
    290e:	e2 0f       	add	r30, r18
    2910:	f3 1f       	adc	r31, r19
    2912:	80 81       	ld	r24, Z
    2914:	89 83       	std	Y+1, r24	; 0x01
        str[start] = str[end];
    2916:	2c 81       	ldd	r18, Y+4	; 0x04
    2918:	3d 81       	ldd	r19, Y+5	; 0x05
    291a:	8a 85       	ldd	r24, Y+10	; 0x0a
    291c:	9b 85       	ldd	r25, Y+11	; 0x0b
    291e:	dc 01       	movw	r26, r24
    2920:	a2 0f       	add	r26, r18
    2922:	b3 1f       	adc	r27, r19
    2924:	2a 81       	ldd	r18, Y+2	; 0x02
    2926:	3b 81       	ldd	r19, Y+3	; 0x03
    2928:	8a 85       	ldd	r24, Y+10	; 0x0a
    292a:	9b 85       	ldd	r25, Y+11	; 0x0b
    292c:	fc 01       	movw	r30, r24
    292e:	e2 0f       	add	r30, r18
    2930:	f3 1f       	adc	r31, r19
    2932:	80 81       	ld	r24, Z
    2934:	8c 93       	st	X, r24
        str[end] = temp;
    2936:	2a 81       	ldd	r18, Y+2	; 0x02
    2938:	3b 81       	ldd	r19, Y+3	; 0x03
    293a:	8a 85       	ldd	r24, Y+10	; 0x0a
    293c:	9b 85       	ldd	r25, Y+11	; 0x0b
    293e:	fc 01       	movw	r30, r24
    2940:	e2 0f       	add	r30, r18
    2942:	f3 1f       	adc	r31, r19
    2944:	89 81       	ldd	r24, Y+1	; 0x01
    2946:	80 83       	st	Z, r24
        start++;
    2948:	8c 81       	ldd	r24, Y+4	; 0x04
    294a:	9d 81       	ldd	r25, Y+5	; 0x05
    294c:	01 96       	adiw	r24, 0x01	; 1
    294e:	9d 83       	std	Y+5, r25	; 0x05
    2950:	8c 83       	std	Y+4, r24	; 0x04
        end--;
    2952:	8a 81       	ldd	r24, Y+2	; 0x02
    2954:	9b 81       	ldd	r25, Y+3	; 0x03
    2956:	01 97       	sbiw	r24, 0x01	; 1
    2958:	9b 83       	std	Y+3, r25	; 0x03
    295a:	8a 83       	std	Y+2, r24	; 0x02

    str[i] = '\0';

    int start = 0;
    int end = i - 1;
    while (start < end) {
    295c:	2c 81       	ldd	r18, Y+4	; 0x04
    295e:	3d 81       	ldd	r19, Y+5	; 0x05
    2960:	8a 81       	ldd	r24, Y+2	; 0x02
    2962:	9b 81       	ldd	r25, Y+3	; 0x03
    2964:	28 17       	cp	r18, r24
    2966:	39 07       	cpc	r19, r25
    2968:	6c f2       	brlt	.-102    	; 0x2904 <Private_VintToStr+0x86>
        str[start] = str[end];
        str[end] = temp;
        start++;
        end--;
    }
}
    296a:	2b 96       	adiw	r28, 0x0b	; 11
    296c:	0f b6       	in	r0, 0x3f	; 63
    296e:	f8 94       	cli
    2970:	de bf       	out	0x3e, r29	; 62
    2972:	0f be       	out	0x3f, r0	; 63
    2974:	cd bf       	out	0x3d, r28	; 61
    2976:	cf 91       	pop	r28
    2978:	df 91       	pop	r29
    297a:	08 95       	ret

0000297c <ADC_TEST>:
#include "util/delay.h"

volatile UINT32 Val ;
volatile UINT16 Duty_Val ;

void ADC_TEST (void){
    297c:	df 93       	push	r29
    297e:	cf 93       	push	r28
    2980:	cd b7       	in	r28, 0x3d	; 61
    2982:	de b7       	in	r29, 0x3e	; 62
	LCD_VClearScreen();
    2984:	0e 94 fe 12 	call	0x25fc	; 0x25fc <LCD_VClearScreen>
	Val = ADC_Read();
    2988:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <ADC_Read>
    298c:	cc 01       	movw	r24, r24
    298e:	a0 e0       	ldi	r26, 0x00	; 0
    2990:	b0 e0       	ldi	r27, 0x00	; 0
    2992:	80 93 c2 00 	sts	0x00C2, r24
    2996:	90 93 c3 00 	sts	0x00C3, r25
    299a:	a0 93 c4 00 	sts	0x00C4, r26
    299e:	b0 93 c5 00 	sts	0x00C5, r27
	LCD_VSendString("ADC_Read:");
    29a2:	80 e6       	ldi	r24, 0x60	; 96
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	0e 94 72 12 	call	0x24e4	; 0x24e4 <LCD_VSendString>
	LCD_VIntegerToString(Val);
    29aa:	80 91 c2 00 	lds	r24, 0x00C2
    29ae:	90 91 c3 00 	lds	r25, 0x00C3
    29b2:	a0 91 c4 00 	lds	r26, 0x00C4
    29b6:	b0 91 c5 00 	lds	r27, 0x00C5
    29ba:	0e 94 dd 12 	call	0x25ba	; 0x25ba <LCD_VIntegerToString>
	LCD_VSendString(" Duty:");
    29be:	8a e6       	ldi	r24, 0x6A	; 106
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	0e 94 72 12 	call	0x24e4	; 0x24e4 <LCD_VSendString>
	Duty_Val = (UINT16)((Val * 100) /1023);
    29c6:	80 91 c2 00 	lds	r24, 0x00C2
    29ca:	90 91 c3 00 	lds	r25, 0x00C3
    29ce:	a0 91 c4 00 	lds	r26, 0x00C4
    29d2:	b0 91 c5 00 	lds	r27, 0x00C5
    29d6:	24 e6       	ldi	r18, 0x64	; 100
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	40 e0       	ldi	r20, 0x00	; 0
    29dc:	50 e0       	ldi	r21, 0x00	; 0
    29de:	bc 01       	movw	r22, r24
    29e0:	cd 01       	movw	r24, r26
    29e2:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__mulsi3>
    29e6:	dc 01       	movw	r26, r24
    29e8:	cb 01       	movw	r24, r22
    29ea:	2f ef       	ldi	r18, 0xFF	; 255
    29ec:	33 e0       	ldi	r19, 0x03	; 3
    29ee:	40 e0       	ldi	r20, 0x00	; 0
    29f0:	50 e0       	ldi	r21, 0x00	; 0
    29f2:	bc 01       	movw	r22, r24
    29f4:	cd 01       	movw	r24, r26
    29f6:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <__udivmodsi4>
    29fa:	da 01       	movw	r26, r20
    29fc:	c9 01       	movw	r24, r18
    29fe:	90 93 c1 00 	sts	0x00C1, r25
    2a02:	80 93 c0 00 	sts	0x00C0, r24
	LCD_VIntegerToString(Duty_Val);
    2a06:	80 91 c0 00 	lds	r24, 0x00C0
    2a0a:	90 91 c1 00 	lds	r25, 0x00C1
    2a0e:	0e 94 dd 12 	call	0x25ba	; 0x25ba <LCD_VIntegerToString>
	Timer0_Duty_FastPWM(Duty_Val);
    2a12:	80 91 c0 00 	lds	r24, 0x00C0
    2a16:	90 91 c1 00 	lds	r25, 0x00C1
    2a1a:	0e 94 c7 06 	call	0xd8e	; 0xd8e <Timer0_Duty_FastPWM>
}
    2a1e:	cf 91       	pop	r28
    2a20:	df 91       	pop	r29
    2a22:	08 95       	ret

00002a24 <EXTINT_TEST>:

void EXTINT_TEST (void){
    2a24:	df 93       	push	r29
    2a26:	cf 93       	push	r28
    2a28:	cd b7       	in	r28, 0x3d	; 61
    2a2a:	de b7       	in	r29, 0x3e	; 62
	LCD_VClearScreen();
    2a2c:	0e 94 fe 12 	call	0x25fc	; 0x25fc <LCD_VClearScreen>
	ADC_Stop();
    2a30:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <ADC_Stop>
	Timer0_Stop();
    2a34:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <Timer0_Stop>
}
    2a38:	cf 91       	pop	r28
    2a3a:	df 91       	pop	r29
    2a3c:	08 95       	ret

00002a3e <main>:
int main (void){
    2a3e:	df 93       	push	r29
    2a40:	cf 93       	push	r28
    2a42:	cd b7       	in	r28, 0x3d	; 61
    2a44:	de b7       	in	r29, 0x3e	; 62
    2a46:	2e 97       	sbiw	r28, 0x0e	; 14
    2a48:	0f b6       	in	r0, 0x3f	; 63
    2a4a:	f8 94       	cli
    2a4c:	de bf       	out	0x3e, r29	; 62
    2a4e:	0f be       	out	0x3f, r0	; 63
    2a50:	cd bf       	out	0x3d, r28	; 61

	Dio_Init();
    2a52:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <Dio_Init>
	ADC_Init();
    2a56:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <ADC_Init>
	LCD_VInit();
    2a5a:	0e 94 76 0f 	call	0x1eec	; 0x1eec <LCD_VInit>
	GI_VEnable();
    2a5e:	0e 94 ad 07 	call	0xf5a	; 0xf5a <GI_VEnable>
	ADC_Select_Channel(0);
    2a62:	80 e0       	ldi	r24, 0x00	; 0
    2a64:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <ADC_Select_Channel>
	ADC_SetCallBack(ADC_TEST);
    2a68:	8e eb       	ldi	r24, 0xBE	; 190
    2a6a:	94 e1       	ldi	r25, 0x14	; 20
    2a6c:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <ADC_SetCallBack>
	EXTI1_SetCallBack (EXTINT_TEST);
    2a70:	82 e1       	ldi	r24, 0x12	; 18
    2a72:	95 e1       	ldi	r25, 0x15	; 21
    2a74:	0e 94 27 09 	call	0x124e	; 0x124e <EXTI1_SetCallBack>
	EXTI_VEnable (EXTI1 , Sence_Rising);
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	63 e0       	ldi	r22, 0x03	; 3
    2a7c:	0e 94 c9 07 	call	0xf92	; 0xf92 <EXTI_VEnable>
	ADC_INTEnable();
    2a80:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <ADC_INTEnable>
	Timer0_VInit();
    2a84:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Timer0_VInit>

	while (1){
		ADC_Start_Conversion();
    2a88:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <ADC_Start_Conversion>
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	a8 ec       	ldi	r26, 0xC8	; 200
    2a92:	b2 e4       	ldi	r27, 0x42	; 66
    2a94:	8b 87       	std	Y+11, r24	; 0x0b
    2a96:	9c 87       	std	Y+12, r25	; 0x0c
    2a98:	ad 87       	std	Y+13, r26	; 0x0d
    2a9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aa0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	4a e7       	ldi	r20, 0x7A	; 122
    2aaa:	55 e4       	ldi	r21, 0x45	; 69
    2aac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	8f 83       	std	Y+7, r24	; 0x07
    2ab6:	98 87       	std	Y+8, r25	; 0x08
    2ab8:	a9 87       	std	Y+9, r26	; 0x09
    2aba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2abc:	6f 81       	ldd	r22, Y+7	; 0x07
    2abe:	78 85       	ldd	r23, Y+8	; 0x08
    2ac0:	89 85       	ldd	r24, Y+9	; 0x09
    2ac2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	40 e8       	ldi	r20, 0x80	; 128
    2aca:	5f e3       	ldi	r21, 0x3F	; 63
    2acc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ad0:	88 23       	and	r24, r24
    2ad2:	2c f4       	brge	.+10     	; 0x2ade <main+0xa0>
		__ticks = 1;
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	9e 83       	std	Y+6, r25	; 0x06
    2ada:	8d 83       	std	Y+5, r24	; 0x05
    2adc:	3f c0       	rjmp	.+126    	; 0x2b5c <main+0x11e>
	else if (__tmp > 65535)
    2ade:	6f 81       	ldd	r22, Y+7	; 0x07
    2ae0:	78 85       	ldd	r23, Y+8	; 0x08
    2ae2:	89 85       	ldd	r24, Y+9	; 0x09
    2ae4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	3f ef       	ldi	r19, 0xFF	; 255
    2aea:	4f e7       	ldi	r20, 0x7F	; 127
    2aec:	57 e4       	ldi	r21, 0x47	; 71
    2aee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2af2:	18 16       	cp	r1, r24
    2af4:	4c f5       	brge	.+82     	; 0x2b48 <main+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2af8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2afa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2afc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	40 e2       	ldi	r20, 0x20	; 32
    2b04:	51 e4       	ldi	r21, 0x41	; 65
    2b06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	bc 01       	movw	r22, r24
    2b10:	cd 01       	movw	r24, r26
    2b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	9e 83       	std	Y+6, r25	; 0x06
    2b1c:	8d 83       	std	Y+5, r24	; 0x05
    2b1e:	0f c0       	rjmp	.+30     	; 0x2b3e <main+0x100>
    2b20:	80 e9       	ldi	r24, 0x90	; 144
    2b22:	91 e0       	ldi	r25, 0x01	; 1
    2b24:	9c 83       	std	Y+4, r25	; 0x04
    2b26:	8b 83       	std	Y+3, r24	; 0x03
    2b28:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b2c:	01 97       	sbiw	r24, 0x01	; 1
    2b2e:	f1 f7       	brne	.-4      	; 0x2b2c <main+0xee>
    2b30:	9c 83       	std	Y+4, r25	; 0x04
    2b32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b34:	8d 81       	ldd	r24, Y+5	; 0x05
    2b36:	9e 81       	ldd	r25, Y+6	; 0x06
    2b38:	01 97       	sbiw	r24, 0x01	; 1
    2b3a:	9e 83       	std	Y+6, r25	; 0x06
    2b3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b40:	9e 81       	ldd	r25, Y+6	; 0x06
    2b42:	00 97       	sbiw	r24, 0x00	; 0
    2b44:	69 f7       	brne	.-38     	; 0x2b20 <main+0xe2>
    2b46:	a0 cf       	rjmp	.-192    	; 0x2a88 <main+0x4a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b48:	6f 81       	ldd	r22, Y+7	; 0x07
    2b4a:	78 85       	ldd	r23, Y+8	; 0x08
    2b4c:	89 85       	ldd	r24, Y+9	; 0x09
    2b4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	9e 83       	std	Y+6, r25	; 0x06
    2b5a:	8d 83       	std	Y+5, r24	; 0x05
    2b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b60:	9a 83       	std	Y+2, r25	; 0x02
    2b62:	89 83       	std	Y+1, r24	; 0x01
    2b64:	89 81       	ldd	r24, Y+1	; 0x01
    2b66:	9a 81       	ldd	r25, Y+2	; 0x02
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	f1 f7       	brne	.-4      	; 0x2b68 <main+0x12a>
    2b6c:	9a 83       	std	Y+2, r25	; 0x02
    2b6e:	89 83       	std	Y+1, r24	; 0x01
    2b70:	8b cf       	rjmp	.-234    	; 0x2a88 <main+0x4a>

00002b72 <__mulsi3>:
    2b72:	62 9f       	mul	r22, r18
    2b74:	d0 01       	movw	r26, r0
    2b76:	73 9f       	mul	r23, r19
    2b78:	f0 01       	movw	r30, r0
    2b7a:	82 9f       	mul	r24, r18
    2b7c:	e0 0d       	add	r30, r0
    2b7e:	f1 1d       	adc	r31, r1
    2b80:	64 9f       	mul	r22, r20
    2b82:	e0 0d       	add	r30, r0
    2b84:	f1 1d       	adc	r31, r1
    2b86:	92 9f       	mul	r25, r18
    2b88:	f0 0d       	add	r31, r0
    2b8a:	83 9f       	mul	r24, r19
    2b8c:	f0 0d       	add	r31, r0
    2b8e:	74 9f       	mul	r23, r20
    2b90:	f0 0d       	add	r31, r0
    2b92:	65 9f       	mul	r22, r21
    2b94:	f0 0d       	add	r31, r0
    2b96:	99 27       	eor	r25, r25
    2b98:	72 9f       	mul	r23, r18
    2b9a:	b0 0d       	add	r27, r0
    2b9c:	e1 1d       	adc	r30, r1
    2b9e:	f9 1f       	adc	r31, r25
    2ba0:	63 9f       	mul	r22, r19
    2ba2:	b0 0d       	add	r27, r0
    2ba4:	e1 1d       	adc	r30, r1
    2ba6:	f9 1f       	adc	r31, r25
    2ba8:	bd 01       	movw	r22, r26
    2baa:	cf 01       	movw	r24, r30
    2bac:	11 24       	eor	r1, r1
    2bae:	08 95       	ret

00002bb0 <__udivmodhi4>:
    2bb0:	aa 1b       	sub	r26, r26
    2bb2:	bb 1b       	sub	r27, r27
    2bb4:	51 e1       	ldi	r21, 0x11	; 17
    2bb6:	07 c0       	rjmp	.+14     	; 0x2bc6 <__udivmodhi4_ep>

00002bb8 <__udivmodhi4_loop>:
    2bb8:	aa 1f       	adc	r26, r26
    2bba:	bb 1f       	adc	r27, r27
    2bbc:	a6 17       	cp	r26, r22
    2bbe:	b7 07       	cpc	r27, r23
    2bc0:	10 f0       	brcs	.+4      	; 0x2bc6 <__udivmodhi4_ep>
    2bc2:	a6 1b       	sub	r26, r22
    2bc4:	b7 0b       	sbc	r27, r23

00002bc6 <__udivmodhi4_ep>:
    2bc6:	88 1f       	adc	r24, r24
    2bc8:	99 1f       	adc	r25, r25
    2bca:	5a 95       	dec	r21
    2bcc:	a9 f7       	brne	.-22     	; 0x2bb8 <__udivmodhi4_loop>
    2bce:	80 95       	com	r24
    2bd0:	90 95       	com	r25
    2bd2:	bc 01       	movw	r22, r24
    2bd4:	cd 01       	movw	r24, r26
    2bd6:	08 95       	ret

00002bd8 <__divmodhi4>:
    2bd8:	97 fb       	bst	r25, 7
    2bda:	09 2e       	mov	r0, r25
    2bdc:	07 26       	eor	r0, r23
    2bde:	0a d0       	rcall	.+20     	; 0x2bf4 <__divmodhi4_neg1>
    2be0:	77 fd       	sbrc	r23, 7
    2be2:	04 d0       	rcall	.+8      	; 0x2bec <__divmodhi4_neg2>
    2be4:	e5 df       	rcall	.-54     	; 0x2bb0 <__udivmodhi4>
    2be6:	06 d0       	rcall	.+12     	; 0x2bf4 <__divmodhi4_neg1>
    2be8:	00 20       	and	r0, r0
    2bea:	1a f4       	brpl	.+6      	; 0x2bf2 <__divmodhi4_exit>

00002bec <__divmodhi4_neg2>:
    2bec:	70 95       	com	r23
    2bee:	61 95       	neg	r22
    2bf0:	7f 4f       	sbci	r23, 0xFF	; 255

00002bf2 <__divmodhi4_exit>:
    2bf2:	08 95       	ret

00002bf4 <__divmodhi4_neg1>:
    2bf4:	f6 f7       	brtc	.-4      	; 0x2bf2 <__divmodhi4_exit>
    2bf6:	90 95       	com	r25
    2bf8:	81 95       	neg	r24
    2bfa:	9f 4f       	sbci	r25, 0xFF	; 255
    2bfc:	08 95       	ret

00002bfe <__udivmodsi4>:
    2bfe:	a1 e2       	ldi	r26, 0x21	; 33
    2c00:	1a 2e       	mov	r1, r26
    2c02:	aa 1b       	sub	r26, r26
    2c04:	bb 1b       	sub	r27, r27
    2c06:	fd 01       	movw	r30, r26
    2c08:	0d c0       	rjmp	.+26     	; 0x2c24 <__udivmodsi4_ep>

00002c0a <__udivmodsi4_loop>:
    2c0a:	aa 1f       	adc	r26, r26
    2c0c:	bb 1f       	adc	r27, r27
    2c0e:	ee 1f       	adc	r30, r30
    2c10:	ff 1f       	adc	r31, r31
    2c12:	a2 17       	cp	r26, r18
    2c14:	b3 07       	cpc	r27, r19
    2c16:	e4 07       	cpc	r30, r20
    2c18:	f5 07       	cpc	r31, r21
    2c1a:	20 f0       	brcs	.+8      	; 0x2c24 <__udivmodsi4_ep>
    2c1c:	a2 1b       	sub	r26, r18
    2c1e:	b3 0b       	sbc	r27, r19
    2c20:	e4 0b       	sbc	r30, r20
    2c22:	f5 0b       	sbc	r31, r21

00002c24 <__udivmodsi4_ep>:
    2c24:	66 1f       	adc	r22, r22
    2c26:	77 1f       	adc	r23, r23
    2c28:	88 1f       	adc	r24, r24
    2c2a:	99 1f       	adc	r25, r25
    2c2c:	1a 94       	dec	r1
    2c2e:	69 f7       	brne	.-38     	; 0x2c0a <__udivmodsi4_loop>
    2c30:	60 95       	com	r22
    2c32:	70 95       	com	r23
    2c34:	80 95       	com	r24
    2c36:	90 95       	com	r25
    2c38:	9b 01       	movw	r18, r22
    2c3a:	ac 01       	movw	r20, r24
    2c3c:	bd 01       	movw	r22, r26
    2c3e:	cf 01       	movw	r24, r30
    2c40:	08 95       	ret

00002c42 <__prologue_saves__>:
    2c42:	2f 92       	push	r2
    2c44:	3f 92       	push	r3
    2c46:	4f 92       	push	r4
    2c48:	5f 92       	push	r5
    2c4a:	6f 92       	push	r6
    2c4c:	7f 92       	push	r7
    2c4e:	8f 92       	push	r8
    2c50:	9f 92       	push	r9
    2c52:	af 92       	push	r10
    2c54:	bf 92       	push	r11
    2c56:	cf 92       	push	r12
    2c58:	df 92       	push	r13
    2c5a:	ef 92       	push	r14
    2c5c:	ff 92       	push	r15
    2c5e:	0f 93       	push	r16
    2c60:	1f 93       	push	r17
    2c62:	cf 93       	push	r28
    2c64:	df 93       	push	r29
    2c66:	cd b7       	in	r28, 0x3d	; 61
    2c68:	de b7       	in	r29, 0x3e	; 62
    2c6a:	ca 1b       	sub	r28, r26
    2c6c:	db 0b       	sbc	r29, r27
    2c6e:	0f b6       	in	r0, 0x3f	; 63
    2c70:	f8 94       	cli
    2c72:	de bf       	out	0x3e, r29	; 62
    2c74:	0f be       	out	0x3f, r0	; 63
    2c76:	cd bf       	out	0x3d, r28	; 61
    2c78:	09 94       	ijmp

00002c7a <__epilogue_restores__>:
    2c7a:	2a 88       	ldd	r2, Y+18	; 0x12
    2c7c:	39 88       	ldd	r3, Y+17	; 0x11
    2c7e:	48 88       	ldd	r4, Y+16	; 0x10
    2c80:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c82:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c84:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c86:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c88:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c8a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c8c:	b9 84       	ldd	r11, Y+9	; 0x09
    2c8e:	c8 84       	ldd	r12, Y+8	; 0x08
    2c90:	df 80       	ldd	r13, Y+7	; 0x07
    2c92:	ee 80       	ldd	r14, Y+6	; 0x06
    2c94:	fd 80       	ldd	r15, Y+5	; 0x05
    2c96:	0c 81       	ldd	r16, Y+4	; 0x04
    2c98:	1b 81       	ldd	r17, Y+3	; 0x03
    2c9a:	aa 81       	ldd	r26, Y+2	; 0x02
    2c9c:	b9 81       	ldd	r27, Y+1	; 0x01
    2c9e:	ce 0f       	add	r28, r30
    2ca0:	d1 1d       	adc	r29, r1
    2ca2:	0f b6       	in	r0, 0x3f	; 63
    2ca4:	f8 94       	cli
    2ca6:	de bf       	out	0x3e, r29	; 62
    2ca8:	0f be       	out	0x3f, r0	; 63
    2caa:	cd bf       	out	0x3d, r28	; 61
    2cac:	ed 01       	movw	r28, r26
    2cae:	08 95       	ret

00002cb0 <_exit>:
    2cb0:	f8 94       	cli

00002cb2 <__stop_program>:
    2cb2:	ff cf       	rjmp	.-2      	; 0x2cb2 <__stop_program>
