
ADC_Threshold_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  00002a82  00002b16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008000b4  008000b4  00002b6a  2**0
                  ALLOC
  3 .stab         000027a8  00000000  00000000  00002b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001894  00000000  00000000  00005314  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00006d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00006e97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00008edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00009fdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000af60  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b0e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b3a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bc30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__vector_1>
       8:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__vector_2>
       c:	0c 94 53 08 	jmp	0x10a6	; 0x10a6 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 e5 0d 	jmp	0x1bca	; 0x1bca <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e8       	ldi	r30, 0x82	; 130
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3b       	cpi	r26, 0xB4	; 180
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 eb       	ldi	r26, 0xB4	; 180
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3c       	cpi	r26, 0xC0	; 192
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 24 14 	call	0x2848	; 0x2848 <main>
      8a:	0c 94 3f 15 	jmp	0x2a7e	; 0x2a7e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 08 15 	jmp	0x2a10	; 0x2a10 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 24 15 	jmp	0x2a48	; 0x2a48 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 14 15 	jmp	0x2a28	; 0x2a28 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 30 15 	jmp	0x2a60	; 0x2a60 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 14 15 	jmp	0x2a28	; 0x2a28 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 30 15 	jmp	0x2a60	; 0x2a60 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 08 15 	jmp	0x2a10	; 0x2a10 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 24 15 	jmp	0x2a48	; 0x2a48 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 10 15 	jmp	0x2a20	; 0x2a20 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 2c 15 	jmp	0x2a58	; 0x2a58 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 14 15 	jmp	0x2a28	; 0x2a28 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 30 15 	jmp	0x2a60	; 0x2a60 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 14 15 	jmp	0x2a28	; 0x2a28 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 30 15 	jmp	0x2a60	; 0x2a60 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 14 15 	jmp	0x2a28	; 0x2a28 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 30 15 	jmp	0x2a60	; 0x2a60 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 18 15 	jmp	0x2a30	; 0x2a30 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <GI_VEnable>:
 *      Author: Esraa Ahmed Taha
 */

#include "GI_Interface.h"

void GI_VEnable(void){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	SETBIT(SREG , GI_Pin);
     ca6:	af e5       	ldi	r26, 0x5F	; 95
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	ef e5       	ldi	r30, 0x5F	; 95
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 68       	ori	r24, 0x80	; 128
     cb2:	8c 93       	st	X, r24
}
     cb4:	cf 91       	pop	r28
     cb6:	df 91       	pop	r29
     cb8:	08 95       	ret

00000cba <GI_VDisable>:

void GI_VDisable(void){
     cba:	df 93       	push	r29
     cbc:	cf 93       	push	r28
     cbe:	cd b7       	in	r28, 0x3d	; 61
     cc0:	de b7       	in	r29, 0x3e	; 62
	CLRBIT(SREG , GI_Pin);
     cc2:	af e5       	ldi	r26, 0x5F	; 95
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	ef e5       	ldi	r30, 0x5F	; 95
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	8c 93       	st	X, r24
}
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	08 95       	ret

00000cd6 <EXTI_VEnable>:

static void (*ptr1) (void) = NULL;
static void (*ptr2) (void) = NULL;
static void (*ptr3) (void) = NULL;

void EXTI_VEnable (EXTI_Source source, EXTI_Sence_Mode mode){
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	2a 97       	sbiw	r28, 0x0a	; 10
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
     cea:	89 83       	std	Y+1, r24	; 0x01
     cec:	6a 83       	std	Y+2, r22	; 0x02
	switch(source){
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	3a 87       	std	Y+10, r19	; 0x0a
     cf6:	29 87       	std	Y+9, r18	; 0x09
     cf8:	89 85       	ldd	r24, Y+9	; 0x09
     cfa:	9a 85       	ldd	r25, Y+10	; 0x0a
     cfc:	81 30       	cpi	r24, 0x01	; 1
     cfe:	91 05       	cpc	r25, r1
     d00:	09 f4       	brne	.+2      	; 0xd04 <EXTI_VEnable+0x2e>
     d02:	6d c0       	rjmp	.+218    	; 0xdde <EXTI_VEnable+0x108>
     d04:	29 85       	ldd	r18, Y+9	; 0x09
     d06:	3a 85       	ldd	r19, Y+10	; 0x0a
     d08:	22 30       	cpi	r18, 0x02	; 2
     d0a:	31 05       	cpc	r19, r1
     d0c:	09 f4       	brne	.+2      	; 0xd10 <EXTI_VEnable+0x3a>
     d0e:	c9 c0       	rjmp	.+402    	; 0xea2 <EXTI_VEnable+0x1cc>
     d10:	89 85       	ldd	r24, Y+9	; 0x09
     d12:	9a 85       	ldd	r25, Y+10	; 0x0a
     d14:	00 97       	sbiw	r24, 0x00	; 0
     d16:	09 f0       	breq	.+2      	; 0xd1a <EXTI_VEnable+0x44>
     d18:	ea c0       	rjmp	.+468    	; 0xeee <EXTI_VEnable+0x218>

		case EXTI0:
			switch (mode)
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	38 87       	std	Y+8, r19	; 0x08
     d22:	2f 83       	std	Y+7, r18	; 0x07
     d24:	8f 81       	ldd	r24, Y+7	; 0x07
     d26:	98 85       	ldd	r25, Y+8	; 0x08
     d28:	81 30       	cpi	r24, 0x01	; 1
     d2a:	91 05       	cpc	r25, r1
     d2c:	21 f1       	breq	.+72     	; 0xd76 <EXTI_VEnable+0xa0>
     d2e:	2f 81       	ldd	r18, Y+7	; 0x07
     d30:	38 85       	ldd	r19, Y+8	; 0x08
     d32:	22 30       	cpi	r18, 0x02	; 2
     d34:	31 05       	cpc	r19, r1
     d36:	2c f4       	brge	.+10     	; 0xd42 <EXTI_VEnable+0x6c>
     d38:	8f 81       	ldd	r24, Y+7	; 0x07
     d3a:	98 85       	ldd	r25, Y+8	; 0x08
     d3c:	00 97       	sbiw	r24, 0x00	; 0
     d3e:	61 f0       	breq	.+24     	; 0xd58 <EXTI_VEnable+0x82>
     d40:	46 c0       	rjmp	.+140    	; 0xdce <EXTI_VEnable+0xf8>
     d42:	2f 81       	ldd	r18, Y+7	; 0x07
     d44:	38 85       	ldd	r19, Y+8	; 0x08
     d46:	22 30       	cpi	r18, 0x02	; 2
     d48:	31 05       	cpc	r19, r1
     d4a:	21 f1       	breq	.+72     	; 0xd94 <EXTI_VEnable+0xbe>
     d4c:	8f 81       	ldd	r24, Y+7	; 0x07
     d4e:	98 85       	ldd	r25, Y+8	; 0x08
     d50:	83 30       	cpi	r24, 0x03	; 3
     d52:	91 05       	cpc	r25, r1
     d54:	71 f1       	breq	.+92     	; 0xdb2 <EXTI_VEnable+0xdc>
     d56:	3b c0       	rjmp	.+118    	; 0xdce <EXTI_VEnable+0xf8>
			{

				case Sence_LOW:
					CLRBIT(MCUCR , ISC00);
     d58:	a5 e5       	ldi	r26, 0x55	; 85
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e5 e5       	ldi	r30, 0x55	; 85
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	8e 7f       	andi	r24, 0xFE	; 254
     d64:	8c 93       	st	X, r24
					CLRBIT(MCUCR , ISC01);
     d66:	a5 e5       	ldi	r26, 0x55	; 85
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e5 e5       	ldi	r30, 0x55	; 85
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	8d 7f       	andi	r24, 0xFD	; 253
     d72:	8c 93       	st	X, r24
     d74:	2c c0       	rjmp	.+88     	; 0xdce <EXTI_VEnable+0xf8>
					break;
				case Sence_ANY:
					SETBIT(MCUCR , ISC00);
     d76:	a5 e5       	ldi	r26, 0x55	; 85
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	e5 e5       	ldi	r30, 0x55	; 85
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	81 60       	ori	r24, 0x01	; 1
     d82:	8c 93       	st	X, r24
					CLRBIT(MCUCR , ISC01);
     d84:	a5 e5       	ldi	r26, 0x55	; 85
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	e5 e5       	ldi	r30, 0x55	; 85
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	8d 7f       	andi	r24, 0xFD	; 253
     d90:	8c 93       	st	X, r24
     d92:	1d c0       	rjmp	.+58     	; 0xdce <EXTI_VEnable+0xf8>
					break;
				case Sence_Falling:
					CLRBIT(MCUCR , ISC00);
     d94:	a5 e5       	ldi	r26, 0x55	; 85
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	e5 e5       	ldi	r30, 0x55	; 85
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	8e 7f       	andi	r24, 0xFE	; 254
     da0:	8c 93       	st	X, r24
					SETBIT(MCUCR , ISC01);
     da2:	a5 e5       	ldi	r26, 0x55	; 85
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	e5 e5       	ldi	r30, 0x55	; 85
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	82 60       	ori	r24, 0x02	; 2
     dae:	8c 93       	st	X, r24
     db0:	0e c0       	rjmp	.+28     	; 0xdce <EXTI_VEnable+0xf8>
					break;
				case Sence_Rising:
					SETBIT(MCUCR , ISC00);
     db2:	a5 e5       	ldi	r26, 0x55	; 85
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	e5 e5       	ldi	r30, 0x55	; 85
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	81 60       	ori	r24, 0x01	; 1
     dbe:	8c 93       	st	X, r24
					SETBIT(MCUCR , ISC01);
     dc0:	a5 e5       	ldi	r26, 0x55	; 85
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	e5 e5       	ldi	r30, 0x55	; 85
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	82 60       	ori	r24, 0x02	; 2
     dcc:	8c 93       	st	X, r24
					break;

			}
			SETBIT(GICR , INT0);
     dce:	ab e5       	ldi	r26, 0x5B	; 91
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	eb e5       	ldi	r30, 0x5B	; 91
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	80 64       	ori	r24, 0x40	; 64
     dda:	8c 93       	st	X, r24
     ddc:	88 c0       	rjmp	.+272    	; 0xeee <EXTI_VEnable+0x218>
			break;

		case EXTI1:
			switch (mode)
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	3e 83       	std	Y+6, r19	; 0x06
     de6:	2d 83       	std	Y+5, r18	; 0x05
     de8:	8d 81       	ldd	r24, Y+5	; 0x05
     dea:	9e 81       	ldd	r25, Y+6	; 0x06
     dec:	81 30       	cpi	r24, 0x01	; 1
     dee:	91 05       	cpc	r25, r1
     df0:	21 f1       	breq	.+72     	; 0xe3a <EXTI_VEnable+0x164>
     df2:	2d 81       	ldd	r18, Y+5	; 0x05
     df4:	3e 81       	ldd	r19, Y+6	; 0x06
     df6:	22 30       	cpi	r18, 0x02	; 2
     df8:	31 05       	cpc	r19, r1
     dfa:	2c f4       	brge	.+10     	; 0xe06 <EXTI_VEnable+0x130>
     dfc:	8d 81       	ldd	r24, Y+5	; 0x05
     dfe:	9e 81       	ldd	r25, Y+6	; 0x06
     e00:	00 97       	sbiw	r24, 0x00	; 0
     e02:	61 f0       	breq	.+24     	; 0xe1c <EXTI_VEnable+0x146>
     e04:	46 c0       	rjmp	.+140    	; 0xe92 <EXTI_VEnable+0x1bc>
     e06:	2d 81       	ldd	r18, Y+5	; 0x05
     e08:	3e 81       	ldd	r19, Y+6	; 0x06
     e0a:	22 30       	cpi	r18, 0x02	; 2
     e0c:	31 05       	cpc	r19, r1
     e0e:	21 f1       	breq	.+72     	; 0xe58 <EXTI_VEnable+0x182>
     e10:	8d 81       	ldd	r24, Y+5	; 0x05
     e12:	9e 81       	ldd	r25, Y+6	; 0x06
     e14:	83 30       	cpi	r24, 0x03	; 3
     e16:	91 05       	cpc	r25, r1
     e18:	71 f1       	breq	.+92     	; 0xe76 <EXTI_VEnable+0x1a0>
     e1a:	3b c0       	rjmp	.+118    	; 0xe92 <EXTI_VEnable+0x1bc>
			{

				case Sence_LOW:
					CLRBIT(MCUCR , ISC10);
     e1c:	a5 e5       	ldi	r26, 0x55	; 85
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e5 e5       	ldi	r30, 0x55	; 85
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	8b 7f       	andi	r24, 0xFB	; 251
     e28:	8c 93       	st	X, r24
					CLRBIT(MCUCR , ISC11);
     e2a:	a5 e5       	ldi	r26, 0x55	; 85
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e5 e5       	ldi	r30, 0x55	; 85
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	87 7f       	andi	r24, 0xF7	; 247
     e36:	8c 93       	st	X, r24
     e38:	2c c0       	rjmp	.+88     	; 0xe92 <EXTI_VEnable+0x1bc>
					break;
				case Sence_ANY:
					SETBIT(MCUCR , ISC10);
     e3a:	a5 e5       	ldi	r26, 0x55	; 85
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e5       	ldi	r30, 0x55	; 85
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	84 60       	ori	r24, 0x04	; 4
     e46:	8c 93       	st	X, r24
					CLRBIT(MCUCR , ISC11);
     e48:	a5 e5       	ldi	r26, 0x55	; 85
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e5 e5       	ldi	r30, 0x55	; 85
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	87 7f       	andi	r24, 0xF7	; 247
     e54:	8c 93       	st	X, r24
     e56:	1d c0       	rjmp	.+58     	; 0xe92 <EXTI_VEnable+0x1bc>
					break;
				case Sence_Falling:
					CLRBIT(MCUCR , ISC10);
     e58:	a5 e5       	ldi	r26, 0x55	; 85
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e5 e5       	ldi	r30, 0x55	; 85
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	8b 7f       	andi	r24, 0xFB	; 251
     e64:	8c 93       	st	X, r24
					SETBIT(MCUCR , ISC11);
     e66:	a5 e5       	ldi	r26, 0x55	; 85
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e5 e5       	ldi	r30, 0x55	; 85
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	88 60       	ori	r24, 0x08	; 8
     e72:	8c 93       	st	X, r24
     e74:	0e c0       	rjmp	.+28     	; 0xe92 <EXTI_VEnable+0x1bc>
					break;
				case Sence_Rising:
					SETBIT(MCUCR , ISC10);
     e76:	a5 e5       	ldi	r26, 0x55	; 85
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e5 e5       	ldi	r30, 0x55	; 85
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	84 60       	ori	r24, 0x04	; 4
     e82:	8c 93       	st	X, r24
					SETBIT(MCUCR , ISC11);
     e84:	a5 e5       	ldi	r26, 0x55	; 85
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e5 e5       	ldi	r30, 0x55	; 85
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	88 60       	ori	r24, 0x08	; 8
     e90:	8c 93       	st	X, r24
					break;

			}
			SETBIT(GICR , INT1);
     e92:	ab e5       	ldi	r26, 0x5B	; 91
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	eb e5       	ldi	r30, 0x5B	; 91
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	80 68       	ori	r24, 0x80	; 128
     e9e:	8c 93       	st	X, r24
     ea0:	26 c0       	rjmp	.+76     	; 0xeee <EXTI_VEnable+0x218>
			break;

		case EXTI2:
			switch (mode)
     ea2:	8a 81       	ldd	r24, Y+2	; 0x02
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	3c 83       	std	Y+4, r19	; 0x04
     eaa:	2b 83       	std	Y+3, r18	; 0x03
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	9c 81       	ldd	r25, Y+4	; 0x04
     eb0:	82 30       	cpi	r24, 0x02	; 2
     eb2:	91 05       	cpc	r25, r1
     eb4:	31 f0       	breq	.+12     	; 0xec2 <EXTI_VEnable+0x1ec>
     eb6:	2b 81       	ldd	r18, Y+3	; 0x03
     eb8:	3c 81       	ldd	r19, Y+4	; 0x04
     eba:	23 30       	cpi	r18, 0x03	; 3
     ebc:	31 05       	cpc	r19, r1
     ebe:	49 f0       	breq	.+18     	; 0xed2 <EXTI_VEnable+0x1fc>
     ec0:	0f c0       	rjmp	.+30     	; 0xee0 <EXTI_VEnable+0x20a>
			{

				case Sence_Falling:
					CLRBIT(MCUCSR , ISC2);
     ec2:	a4 e5       	ldi	r26, 0x54	; 84
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e4 e5       	ldi	r30, 0x54	; 84
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	8f 7b       	andi	r24, 0xBF	; 191
     ece:	8c 93       	st	X, r24
     ed0:	07 c0       	rjmp	.+14     	; 0xee0 <EXTI_VEnable+0x20a>
					break;
				case Sence_Rising:
					SETBIT(MCUCSR , ISC2);
     ed2:	a4 e5       	ldi	r26, 0x54	; 84
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e4 e5       	ldi	r30, 0x54	; 84
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	80 64       	ori	r24, 0x40	; 64
     ede:	8c 93       	st	X, r24
					break;
				default:
					break;

			}
			SETBIT(GICR , INT2);
     ee0:	ab e5       	ldi	r26, 0x5B	; 91
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	eb e5       	ldi	r30, 0x5B	; 91
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	80 62       	ori	r24, 0x20	; 32
     eec:	8c 93       	st	X, r24
			break;
	}

}
     eee:	2a 96       	adiw	r28, 0x0a	; 10
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	f8 94       	cli
     ef4:	de bf       	out	0x3e, r29	; 62
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	cd bf       	out	0x3d, r28	; 61
     efa:	cf 91       	pop	r28
     efc:	df 91       	pop	r29
     efe:	08 95       	ret

00000f00 <EXTI_VDisable>:
void EXTI_VDisable (EXTI_Source source){
     f00:	df 93       	push	r29
     f02:	cf 93       	push	r28
     f04:	00 d0       	rcall	.+0      	; 0xf06 <EXTI_VDisable+0x6>
     f06:	0f 92       	push	r0
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	89 83       	std	Y+1, r24	; 0x01

	switch (source)
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	3b 83       	std	Y+3, r19	; 0x03
     f16:	2a 83       	std	Y+2, r18	; 0x02
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	9b 81       	ldd	r25, Y+3	; 0x03
     f1c:	81 30       	cpi	r24, 0x01	; 1
     f1e:	91 05       	cpc	r25, r1
     f20:	89 f0       	breq	.+34     	; 0xf44 <EXTI_VDisable+0x44>
     f22:	2a 81       	ldd	r18, Y+2	; 0x02
     f24:	3b 81       	ldd	r19, Y+3	; 0x03
     f26:	22 30       	cpi	r18, 0x02	; 2
     f28:	31 05       	cpc	r19, r1
     f2a:	a1 f0       	breq	.+40     	; 0xf54 <EXTI_VDisable+0x54>
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	9b 81       	ldd	r25, Y+3	; 0x03
     f30:	00 97       	sbiw	r24, 0x00	; 0
     f32:	b9 f4       	brne	.+46     	; 0xf62 <EXTI_VDisable+0x62>
	{
		case EXTI0:
			CLRBIT(GICR , INT0);
     f34:	ab e5       	ldi	r26, 0x5B	; 91
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	eb e5       	ldi	r30, 0x5B	; 91
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	8f 7b       	andi	r24, 0xBF	; 191
     f40:	8c 93       	st	X, r24
     f42:	0f c0       	rjmp	.+30     	; 0xf62 <EXTI_VDisable+0x62>
			break;
		case EXTI1:
			CLRBIT(GICR , INT1);
     f44:	ab e5       	ldi	r26, 0x5B	; 91
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	eb e5       	ldi	r30, 0x5B	; 91
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	8f 77       	andi	r24, 0x7F	; 127
     f50:	8c 93       	st	X, r24
     f52:	07 c0       	rjmp	.+14     	; 0xf62 <EXTI_VDisable+0x62>
			break;
		case EXTI2:
			CLRBIT(GICR , INT2);
     f54:	ab e5       	ldi	r26, 0x5B	; 91
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	eb e5       	ldi	r30, 0x5B	; 91
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	8f 7d       	andi	r24, 0xDF	; 223
     f60:	8c 93       	st	X, r24
			break;
	}

}
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	08 95       	ret

00000f6e <EXTI0_SetCallBack>:

void EXTI0_SetCallBack (void (*p2f_var) (void)){
     f6e:	df 93       	push	r29
     f70:	cf 93       	push	r28
     f72:	00 d0       	rcall	.+0      	; 0xf74 <EXTI0_SetCallBack+0x6>
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
     f78:	9a 83       	std	Y+2, r25	; 0x02
     f7a:	89 83       	std	Y+1, r24	; 0x01

	ptr1 = p2f_var ;
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	9a 81       	ldd	r25, Y+2	; 0x02
     f80:	90 93 b5 00 	sts	0x00B5, r25
     f84:	80 93 b4 00 	sts	0x00B4, r24

}
     f88:	0f 90       	pop	r0
     f8a:	0f 90       	pop	r0
     f8c:	cf 91       	pop	r28
     f8e:	df 91       	pop	r29
     f90:	08 95       	ret

00000f92 <EXTI1_SetCallBack>:

void EXTI1_SetCallBack (void (*p2f_var) (void)){
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	00 d0       	rcall	.+0      	; 0xf98 <EXTI1_SetCallBack+0x6>
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
     f9c:	9a 83       	std	Y+2, r25	; 0x02
     f9e:	89 83       	std	Y+1, r24	; 0x01

	ptr2 = p2f_var ;
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	9a 81       	ldd	r25, Y+2	; 0x02
     fa4:	90 93 b7 00 	sts	0x00B7, r25
     fa8:	80 93 b6 00 	sts	0x00B6, r24

}
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	cf 91       	pop	r28
     fb2:	df 91       	pop	r29
     fb4:	08 95       	ret

00000fb6 <EXTI2_SetCallBack>:

void EXTI2_SetCallBack (void (*p2f_var) (void)){
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	00 d0       	rcall	.+0      	; 0xfbc <EXTI2_SetCallBack+0x6>
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
     fc0:	9a 83       	std	Y+2, r25	; 0x02
     fc2:	89 83       	std	Y+1, r24	; 0x01

	ptr3 = p2f_var ;
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	9a 81       	ldd	r25, Y+2	; 0x02
     fc8:	90 93 b9 00 	sts	0x00B9, r25
     fcc:	80 93 b8 00 	sts	0x00B8, r24

}
     fd0:	0f 90       	pop	r0
     fd2:	0f 90       	pop	r0
     fd4:	cf 91       	pop	r28
     fd6:	df 91       	pop	r29
     fd8:	08 95       	ret

00000fda <__vector_1>:

void __vector_1(void) __attribute__ ((signal));
void __vector_1(void){
     fda:	1f 92       	push	r1
     fdc:	0f 92       	push	r0
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	0f 92       	push	r0
     fe2:	11 24       	eor	r1, r1
     fe4:	2f 93       	push	r18
     fe6:	3f 93       	push	r19
     fe8:	4f 93       	push	r20
     fea:	5f 93       	push	r21
     fec:	6f 93       	push	r22
     fee:	7f 93       	push	r23
     ff0:	8f 93       	push	r24
     ff2:	9f 93       	push	r25
     ff4:	af 93       	push	r26
     ff6:	bf 93       	push	r27
     ff8:	ef 93       	push	r30
     ffa:	ff 93       	push	r31
     ffc:	df 93       	push	r29
     ffe:	cf 93       	push	r28
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
	if(ptr1 != NULL)
    1004:	80 91 b4 00 	lds	r24, 0x00B4
    1008:	90 91 b5 00 	lds	r25, 0x00B5
    100c:	00 97       	sbiw	r24, 0x00	; 0
    100e:	29 f0       	breq	.+10     	; 0x101a <__vector_1+0x40>
	ptr1();
    1010:	e0 91 b4 00 	lds	r30, 0x00B4
    1014:	f0 91 b5 00 	lds	r31, 0x00B5
    1018:	09 95       	icall
}
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	ff 91       	pop	r31
    1020:	ef 91       	pop	r30
    1022:	bf 91       	pop	r27
    1024:	af 91       	pop	r26
    1026:	9f 91       	pop	r25
    1028:	8f 91       	pop	r24
    102a:	7f 91       	pop	r23
    102c:	6f 91       	pop	r22
    102e:	5f 91       	pop	r21
    1030:	4f 91       	pop	r20
    1032:	3f 91       	pop	r19
    1034:	2f 91       	pop	r18
    1036:	0f 90       	pop	r0
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	0f 90       	pop	r0
    103c:	1f 90       	pop	r1
    103e:	18 95       	reti

00001040 <__vector_2>:

void __vector_2(void) __attribute__ ((signal));
void __vector_2(void){
    1040:	1f 92       	push	r1
    1042:	0f 92       	push	r0
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	0f 92       	push	r0
    1048:	11 24       	eor	r1, r1
    104a:	2f 93       	push	r18
    104c:	3f 93       	push	r19
    104e:	4f 93       	push	r20
    1050:	5f 93       	push	r21
    1052:	6f 93       	push	r22
    1054:	7f 93       	push	r23
    1056:	8f 93       	push	r24
    1058:	9f 93       	push	r25
    105a:	af 93       	push	r26
    105c:	bf 93       	push	r27
    105e:	ef 93       	push	r30
    1060:	ff 93       	push	r31
    1062:	df 93       	push	r29
    1064:	cf 93       	push	r28
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
	if(ptr2 != NULL)
    106a:	80 91 b6 00 	lds	r24, 0x00B6
    106e:	90 91 b7 00 	lds	r25, 0x00B7
    1072:	00 97       	sbiw	r24, 0x00	; 0
    1074:	29 f0       	breq	.+10     	; 0x1080 <__vector_2+0x40>
	ptr2();
    1076:	e0 91 b6 00 	lds	r30, 0x00B6
    107a:	f0 91 b7 00 	lds	r31, 0x00B7
    107e:	09 95       	icall
}
    1080:	cf 91       	pop	r28
    1082:	df 91       	pop	r29
    1084:	ff 91       	pop	r31
    1086:	ef 91       	pop	r30
    1088:	bf 91       	pop	r27
    108a:	af 91       	pop	r26
    108c:	9f 91       	pop	r25
    108e:	8f 91       	pop	r24
    1090:	7f 91       	pop	r23
    1092:	6f 91       	pop	r22
    1094:	5f 91       	pop	r21
    1096:	4f 91       	pop	r20
    1098:	3f 91       	pop	r19
    109a:	2f 91       	pop	r18
    109c:	0f 90       	pop	r0
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	0f 90       	pop	r0
    10a2:	1f 90       	pop	r1
    10a4:	18 95       	reti

000010a6 <__vector_3>:

void __vector_3(void) __attribute__ ((signal));
void __vector_3(void){
    10a6:	1f 92       	push	r1
    10a8:	0f 92       	push	r0
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	0f 92       	push	r0
    10ae:	11 24       	eor	r1, r1
    10b0:	2f 93       	push	r18
    10b2:	3f 93       	push	r19
    10b4:	4f 93       	push	r20
    10b6:	5f 93       	push	r21
    10b8:	6f 93       	push	r22
    10ba:	7f 93       	push	r23
    10bc:	8f 93       	push	r24
    10be:	9f 93       	push	r25
    10c0:	af 93       	push	r26
    10c2:	bf 93       	push	r27
    10c4:	ef 93       	push	r30
    10c6:	ff 93       	push	r31
    10c8:	df 93       	push	r29
    10ca:	cf 93       	push	r28
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
	if(ptr3 != NULL)
    10d0:	80 91 b8 00 	lds	r24, 0x00B8
    10d4:	90 91 b9 00 	lds	r25, 0x00B9
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	29 f0       	breq	.+10     	; 0x10e6 <__vector_3+0x40>
	ptr3();
    10dc:	e0 91 b8 00 	lds	r30, 0x00B8
    10e0:	f0 91 b9 00 	lds	r31, 0x00B9
    10e4:	09 95       	icall
}
    10e6:	cf 91       	pop	r28
    10e8:	df 91       	pop	r29
    10ea:	ff 91       	pop	r31
    10ec:	ef 91       	pop	r30
    10ee:	bf 91       	pop	r27
    10f0:	af 91       	pop	r26
    10f2:	9f 91       	pop	r25
    10f4:	8f 91       	pop	r24
    10f6:	7f 91       	pop	r23
    10f8:	6f 91       	pop	r22
    10fa:	5f 91       	pop	r21
    10fc:	4f 91       	pop	r20
    10fe:	3f 91       	pop	r19
    1100:	2f 91       	pop	r18
    1102:	0f 90       	pop	r0
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	0f 90       	pop	r0
    1108:	1f 90       	pop	r1
    110a:	18 95       	reti

0000110c <Dio_Init>:
 *      Author: Esraa Ahmed Taha
 */

#include "Dio.h"

void Dio_Init(){
    110c:	df 93       	push	r29
    110e:	cf 93       	push	r28
    1110:	00 d0       	rcall	.+0      	; 0x1112 <Dio_Init+0x6>
    1112:	00 d0       	rcall	.+0      	; 0x1114 <Dio_Init+0x8>
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62

	for (int i=0 ; i< No_of_DIO ; i++){
    1118:	1a 82       	std	Y+2, r1	; 0x02
    111a:	19 82       	std	Y+1, r1	; 0x01
    111c:	c7 c1       	rjmp	.+910    	; 0x14ac <Dio_Init+0x3a0>

		switch (Pin_Cfg[i].Port){
    111e:	29 81       	ldd	r18, Y+1	; 0x01
    1120:	3a 81       	ldd	r19, Y+2	; 0x02
    1122:	c9 01       	movw	r24, r18
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	82 0f       	add	r24, r18
    112a:	93 1f       	adc	r25, r19
    112c:	fc 01       	movw	r30, r24
    112e:	e8 58       	subi	r30, 0x88	; 136
    1130:	ff 4f       	sbci	r31, 0xFF	; 255
    1132:	80 81       	ld	r24, Z
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	3c 83       	std	Y+4, r19	; 0x04
    113a:	2b 83       	std	Y+3, r18	; 0x03
    113c:	8b 81       	ldd	r24, Y+3	; 0x03
    113e:	9c 81       	ldd	r25, Y+4	; 0x04
    1140:	81 30       	cpi	r24, 0x01	; 1
    1142:	91 05       	cpc	r25, r1
    1144:	09 f4       	brne	.+2      	; 0x1148 <Dio_Init+0x3c>
    1146:	7d c0       	rjmp	.+250    	; 0x1242 <Dio_Init+0x136>
    1148:	2b 81       	ldd	r18, Y+3	; 0x03
    114a:	3c 81       	ldd	r19, Y+4	; 0x04
    114c:	22 30       	cpi	r18, 0x02	; 2
    114e:	31 05       	cpc	r19, r1
    1150:	2c f4       	brge	.+10     	; 0x115c <Dio_Init+0x50>
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	9c 81       	ldd	r25, Y+4	; 0x04
    1156:	00 97       	sbiw	r24, 0x00	; 0
    1158:	71 f0       	breq	.+28     	; 0x1176 <Dio_Init+0x6a>
    115a:	a3 c1       	rjmp	.+838    	; 0x14a2 <Dio_Init+0x396>
    115c:	2b 81       	ldd	r18, Y+3	; 0x03
    115e:	3c 81       	ldd	r19, Y+4	; 0x04
    1160:	22 30       	cpi	r18, 0x02	; 2
    1162:	31 05       	cpc	r19, r1
    1164:	09 f4       	brne	.+2      	; 0x1168 <Dio_Init+0x5c>
    1166:	d3 c0       	rjmp	.+422    	; 0x130e <Dio_Init+0x202>
    1168:	8b 81       	ldd	r24, Y+3	; 0x03
    116a:	9c 81       	ldd	r25, Y+4	; 0x04
    116c:	83 30       	cpi	r24, 0x03	; 3
    116e:	91 05       	cpc	r25, r1
    1170:	09 f4       	brne	.+2      	; 0x1174 <Dio_Init+0x68>
    1172:	33 c1       	rjmp	.+614    	; 0x13da <Dio_Init+0x2ce>
    1174:	96 c1       	rjmp	.+812    	; 0x14a2 <Dio_Init+0x396>

			case Dio_PORTA :
				if(Pin_Cfg[i].Dir){
    1176:	29 81       	ldd	r18, Y+1	; 0x01
    1178:	3a 81       	ldd	r19, Y+2	; 0x02
    117a:	c9 01       	movw	r24, r18
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	82 0f       	add	r24, r18
    1182:	93 1f       	adc	r25, r19
    1184:	fc 01       	movw	r30, r24
    1186:	e6 58       	subi	r30, 0x86	; 134
    1188:	ff 4f       	sbci	r31, 0xFF	; 255
    118a:	80 81       	ld	r24, Z
    118c:	88 23       	and	r24, r24
    118e:	f1 f0       	breq	.+60     	; 0x11cc <Dio_Init+0xc0>
					SETBIT(DDRA , Pin_Cfg[i].Pin);
    1190:	aa e3       	ldi	r26, 0x3A	; 58
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	ea e3       	ldi	r30, 0x3A	; 58
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	48 2f       	mov	r20, r24
    119c:	29 81       	ldd	r18, Y+1	; 0x01
    119e:	3a 81       	ldd	r19, Y+2	; 0x02
    11a0:	c9 01       	movw	r24, r18
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	82 0f       	add	r24, r18
    11a8:	93 1f       	adc	r25, r19
    11aa:	fc 01       	movw	r30, r24
    11ac:	e7 58       	subi	r30, 0x87	; 135
    11ae:	ff 4f       	sbci	r31, 0xFF	; 255
    11b0:	80 81       	ld	r24, Z
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	02 2e       	mov	r0, r18
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <Dio_Init+0xb6>
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	0a 94       	dec	r0
    11c4:	e2 f7       	brpl	.-8      	; 0x11be <Dio_Init+0xb2>
    11c6:	84 2b       	or	r24, r20
    11c8:	8c 93       	st	X, r24
    11ca:	6b c1       	rjmp	.+726    	; 0x14a2 <Dio_Init+0x396>
				}
				else{
					CLRBIT(DDRA , Pin_Cfg[i].Pin);
    11cc:	aa e3       	ldi	r26, 0x3A	; 58
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	ea e3       	ldi	r30, 0x3A	; 58
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	48 2f       	mov	r20, r24
    11d8:	29 81       	ldd	r18, Y+1	; 0x01
    11da:	3a 81       	ldd	r19, Y+2	; 0x02
    11dc:	c9 01       	movw	r24, r18
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	82 0f       	add	r24, r18
    11e4:	93 1f       	adc	r25, r19
    11e6:	fc 01       	movw	r30, r24
    11e8:	e7 58       	subi	r30, 0x87	; 135
    11ea:	ff 4f       	sbci	r31, 0xFF	; 255
    11ec:	80 81       	ld	r24, Z
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <Dio_Init+0xf0>
    11f8:	88 0f       	add	r24, r24
    11fa:	99 1f       	adc	r25, r25
    11fc:	2a 95       	dec	r18
    11fe:	e2 f7       	brpl	.-8      	; 0x11f8 <Dio_Init+0xec>
    1200:	80 95       	com	r24
    1202:	84 23       	and	r24, r20
    1204:	8c 93       	st	X, r24
					SETBIT(PORTA , Pin_Cfg[i].Pin);
    1206:	ab e3       	ldi	r26, 0x3B	; 59
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	eb e3       	ldi	r30, 0x3B	; 59
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	48 2f       	mov	r20, r24
    1212:	29 81       	ldd	r18, Y+1	; 0x01
    1214:	3a 81       	ldd	r19, Y+2	; 0x02
    1216:	c9 01       	movw	r24, r18
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	82 0f       	add	r24, r18
    121e:	93 1f       	adc	r25, r19
    1220:	fc 01       	movw	r30, r24
    1222:	e7 58       	subi	r30, 0x87	; 135
    1224:	ff 4f       	sbci	r31, 0xFF	; 255
    1226:	80 81       	ld	r24, Z
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	02 2e       	mov	r0, r18
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <Dio_Init+0x12c>
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	0a 94       	dec	r0
    123a:	e2 f7       	brpl	.-8      	; 0x1234 <Dio_Init+0x128>
    123c:	84 2b       	or	r24, r20
    123e:	8c 93       	st	X, r24
    1240:	30 c1       	rjmp	.+608    	; 0x14a2 <Dio_Init+0x396>
				}
				break;

			case Dio_PORTB :
				if(Pin_Cfg[i].Dir){
    1242:	29 81       	ldd	r18, Y+1	; 0x01
    1244:	3a 81       	ldd	r19, Y+2	; 0x02
    1246:	c9 01       	movw	r24, r18
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	82 0f       	add	r24, r18
    124e:	93 1f       	adc	r25, r19
    1250:	fc 01       	movw	r30, r24
    1252:	e6 58       	subi	r30, 0x86	; 134
    1254:	ff 4f       	sbci	r31, 0xFF	; 255
    1256:	80 81       	ld	r24, Z
    1258:	88 23       	and	r24, r24
    125a:	f1 f0       	breq	.+60     	; 0x1298 <Dio_Init+0x18c>
					SETBIT(DDRB , Pin_Cfg[i].Pin);
    125c:	a7 e3       	ldi	r26, 0x37	; 55
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e7 e3       	ldi	r30, 0x37	; 55
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	48 2f       	mov	r20, r24
    1268:	29 81       	ldd	r18, Y+1	; 0x01
    126a:	3a 81       	ldd	r19, Y+2	; 0x02
    126c:	c9 01       	movw	r24, r18
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	82 0f       	add	r24, r18
    1274:	93 1f       	adc	r25, r19
    1276:	fc 01       	movw	r30, r24
    1278:	e7 58       	subi	r30, 0x87	; 135
    127a:	ff 4f       	sbci	r31, 0xFF	; 255
    127c:	80 81       	ld	r24, Z
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	02 2e       	mov	r0, r18
    1288:	02 c0       	rjmp	.+4      	; 0x128e <Dio_Init+0x182>
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	0a 94       	dec	r0
    1290:	e2 f7       	brpl	.-8      	; 0x128a <Dio_Init+0x17e>
    1292:	84 2b       	or	r24, r20
    1294:	8c 93       	st	X, r24
    1296:	05 c1       	rjmp	.+522    	; 0x14a2 <Dio_Init+0x396>
				}
				else{
					CLRBIT(DDRB , Pin_Cfg[i].Pin);
    1298:	a7 e3       	ldi	r26, 0x37	; 55
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e7 e3       	ldi	r30, 0x37	; 55
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	48 2f       	mov	r20, r24
    12a4:	29 81       	ldd	r18, Y+1	; 0x01
    12a6:	3a 81       	ldd	r19, Y+2	; 0x02
    12a8:	c9 01       	movw	r24, r18
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	82 0f       	add	r24, r18
    12b0:	93 1f       	adc	r25, r19
    12b2:	fc 01       	movw	r30, r24
    12b4:	e7 58       	subi	r30, 0x87	; 135
    12b6:	ff 4f       	sbci	r31, 0xFF	; 255
    12b8:	80 81       	ld	r24, Z
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <Dio_Init+0x1bc>
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	2a 95       	dec	r18
    12ca:	e2 f7       	brpl	.-8      	; 0x12c4 <Dio_Init+0x1b8>
    12cc:	80 95       	com	r24
    12ce:	84 23       	and	r24, r20
    12d0:	8c 93       	st	X, r24
					SETBIT(PORTB , Pin_Cfg[i].Pin);
    12d2:	a8 e3       	ldi	r26, 0x38	; 56
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	e8 e3       	ldi	r30, 0x38	; 56
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	48 2f       	mov	r20, r24
    12de:	29 81       	ldd	r18, Y+1	; 0x01
    12e0:	3a 81       	ldd	r19, Y+2	; 0x02
    12e2:	c9 01       	movw	r24, r18
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	82 0f       	add	r24, r18
    12ea:	93 1f       	adc	r25, r19
    12ec:	fc 01       	movw	r30, r24
    12ee:	e7 58       	subi	r30, 0x87	; 135
    12f0:	ff 4f       	sbci	r31, 0xFF	; 255
    12f2:	80 81       	ld	r24, Z
    12f4:	28 2f       	mov	r18, r24
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	02 2e       	mov	r0, r18
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <Dio_Init+0x1f8>
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	0a 94       	dec	r0
    1306:	e2 f7       	brpl	.-8      	; 0x1300 <Dio_Init+0x1f4>
    1308:	84 2b       	or	r24, r20
    130a:	8c 93       	st	X, r24
    130c:	ca c0       	rjmp	.+404    	; 0x14a2 <Dio_Init+0x396>
				}
				break;

			case Dio_PORTC :
				if(Pin_Cfg[i].Dir){
    130e:	29 81       	ldd	r18, Y+1	; 0x01
    1310:	3a 81       	ldd	r19, Y+2	; 0x02
    1312:	c9 01       	movw	r24, r18
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	82 0f       	add	r24, r18
    131a:	93 1f       	adc	r25, r19
    131c:	fc 01       	movw	r30, r24
    131e:	e6 58       	subi	r30, 0x86	; 134
    1320:	ff 4f       	sbci	r31, 0xFF	; 255
    1322:	80 81       	ld	r24, Z
    1324:	88 23       	and	r24, r24
    1326:	f1 f0       	breq	.+60     	; 0x1364 <Dio_Init+0x258>
					SETBIT(DDRC , Pin_Cfg[i].Pin);
    1328:	a4 e3       	ldi	r26, 0x34	; 52
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e4 e3       	ldi	r30, 0x34	; 52
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	48 2f       	mov	r20, r24
    1334:	29 81       	ldd	r18, Y+1	; 0x01
    1336:	3a 81       	ldd	r19, Y+2	; 0x02
    1338:	c9 01       	movw	r24, r18
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	82 0f       	add	r24, r18
    1340:	93 1f       	adc	r25, r19
    1342:	fc 01       	movw	r30, r24
    1344:	e7 58       	subi	r30, 0x87	; 135
    1346:	ff 4f       	sbci	r31, 0xFF	; 255
    1348:	80 81       	ld	r24, Z
    134a:	28 2f       	mov	r18, r24
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	02 2e       	mov	r0, r18
    1354:	02 c0       	rjmp	.+4      	; 0x135a <Dio_Init+0x24e>
    1356:	88 0f       	add	r24, r24
    1358:	99 1f       	adc	r25, r25
    135a:	0a 94       	dec	r0
    135c:	e2 f7       	brpl	.-8      	; 0x1356 <Dio_Init+0x24a>
    135e:	84 2b       	or	r24, r20
    1360:	8c 93       	st	X, r24
    1362:	9f c0       	rjmp	.+318    	; 0x14a2 <Dio_Init+0x396>
				}
				else{
					CLRBIT(DDRC , Pin_Cfg[i].Pin);
    1364:	a4 e3       	ldi	r26, 0x34	; 52
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	e4 e3       	ldi	r30, 0x34	; 52
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	48 2f       	mov	r20, r24
    1370:	29 81       	ldd	r18, Y+1	; 0x01
    1372:	3a 81       	ldd	r19, Y+2	; 0x02
    1374:	c9 01       	movw	r24, r18
    1376:	88 0f       	add	r24, r24
    1378:	99 1f       	adc	r25, r25
    137a:	82 0f       	add	r24, r18
    137c:	93 1f       	adc	r25, r19
    137e:	fc 01       	movw	r30, r24
    1380:	e7 58       	subi	r30, 0x87	; 135
    1382:	ff 4f       	sbci	r31, 0xFF	; 255
    1384:	80 81       	ld	r24, Z
    1386:	28 2f       	mov	r18, r24
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <Dio_Init+0x288>
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	2a 95       	dec	r18
    1396:	e2 f7       	brpl	.-8      	; 0x1390 <Dio_Init+0x284>
    1398:	80 95       	com	r24
    139a:	84 23       	and	r24, r20
    139c:	8c 93       	st	X, r24
					SETBIT(PORTC , Pin_Cfg[i].Pin);
    139e:	a5 e3       	ldi	r26, 0x35	; 53
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	e5 e3       	ldi	r30, 0x35	; 53
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	48 2f       	mov	r20, r24
    13aa:	29 81       	ldd	r18, Y+1	; 0x01
    13ac:	3a 81       	ldd	r19, Y+2	; 0x02
    13ae:	c9 01       	movw	r24, r18
    13b0:	88 0f       	add	r24, r24
    13b2:	99 1f       	adc	r25, r25
    13b4:	82 0f       	add	r24, r18
    13b6:	93 1f       	adc	r25, r19
    13b8:	fc 01       	movw	r30, r24
    13ba:	e7 58       	subi	r30, 0x87	; 135
    13bc:	ff 4f       	sbci	r31, 0xFF	; 255
    13be:	80 81       	ld	r24, Z
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	02 2e       	mov	r0, r18
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <Dio_Init+0x2c4>
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	0a 94       	dec	r0
    13d2:	e2 f7       	brpl	.-8      	; 0x13cc <Dio_Init+0x2c0>
    13d4:	84 2b       	or	r24, r20
    13d6:	8c 93       	st	X, r24
    13d8:	64 c0       	rjmp	.+200    	; 0x14a2 <Dio_Init+0x396>
				}
				break;

			case Dio_PORTD :
				if(Pin_Cfg[i].Dir){
    13da:	29 81       	ldd	r18, Y+1	; 0x01
    13dc:	3a 81       	ldd	r19, Y+2	; 0x02
    13de:	c9 01       	movw	r24, r18
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	82 0f       	add	r24, r18
    13e6:	93 1f       	adc	r25, r19
    13e8:	fc 01       	movw	r30, r24
    13ea:	e6 58       	subi	r30, 0x86	; 134
    13ec:	ff 4f       	sbci	r31, 0xFF	; 255
    13ee:	80 81       	ld	r24, Z
    13f0:	88 23       	and	r24, r24
    13f2:	f1 f0       	breq	.+60     	; 0x1430 <Dio_Init+0x324>
					SETBIT(DDRD , Pin_Cfg[i].Pin);
    13f4:	a1 e3       	ldi	r26, 0x31	; 49
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e1 e3       	ldi	r30, 0x31	; 49
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	48 2f       	mov	r20, r24
    1400:	29 81       	ldd	r18, Y+1	; 0x01
    1402:	3a 81       	ldd	r19, Y+2	; 0x02
    1404:	c9 01       	movw	r24, r18
    1406:	88 0f       	add	r24, r24
    1408:	99 1f       	adc	r25, r25
    140a:	82 0f       	add	r24, r18
    140c:	93 1f       	adc	r25, r19
    140e:	fc 01       	movw	r30, r24
    1410:	e7 58       	subi	r30, 0x87	; 135
    1412:	ff 4f       	sbci	r31, 0xFF	; 255
    1414:	80 81       	ld	r24, Z
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	02 2e       	mov	r0, r18
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <Dio_Init+0x31a>
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	0a 94       	dec	r0
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <Dio_Init+0x316>
    142a:	84 2b       	or	r24, r20
    142c:	8c 93       	st	X, r24
    142e:	39 c0       	rjmp	.+114    	; 0x14a2 <Dio_Init+0x396>
				}
				else{
					CLRBIT(DDRD , Pin_Cfg[i].Pin);
    1430:	a1 e3       	ldi	r26, 0x31	; 49
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	e1 e3       	ldi	r30, 0x31	; 49
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	48 2f       	mov	r20, r24
    143c:	29 81       	ldd	r18, Y+1	; 0x01
    143e:	3a 81       	ldd	r19, Y+2	; 0x02
    1440:	c9 01       	movw	r24, r18
    1442:	88 0f       	add	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	82 0f       	add	r24, r18
    1448:	93 1f       	adc	r25, r19
    144a:	fc 01       	movw	r30, r24
    144c:	e7 58       	subi	r30, 0x87	; 135
    144e:	ff 4f       	sbci	r31, 0xFF	; 255
    1450:	80 81       	ld	r24, Z
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <Dio_Init+0x354>
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	2a 95       	dec	r18
    1462:	e2 f7       	brpl	.-8      	; 0x145c <Dio_Init+0x350>
    1464:	80 95       	com	r24
    1466:	84 23       	and	r24, r20
    1468:	8c 93       	st	X, r24
					SETBIT(PORTD , Pin_Cfg[i].Pin);
    146a:	a2 e3       	ldi	r26, 0x32	; 50
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	e2 e3       	ldi	r30, 0x32	; 50
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	48 2f       	mov	r20, r24
    1476:	29 81       	ldd	r18, Y+1	; 0x01
    1478:	3a 81       	ldd	r19, Y+2	; 0x02
    147a:	c9 01       	movw	r24, r18
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	82 0f       	add	r24, r18
    1482:	93 1f       	adc	r25, r19
    1484:	fc 01       	movw	r30, r24
    1486:	e7 58       	subi	r30, 0x87	; 135
    1488:	ff 4f       	sbci	r31, 0xFF	; 255
    148a:	80 81       	ld	r24, Z
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	02 c0       	rjmp	.+4      	; 0x149a <Dio_Init+0x38e>
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	2a 95       	dec	r18
    149c:	e2 f7       	brpl	.-8      	; 0x1496 <Dio_Init+0x38a>
    149e:	84 2b       	or	r24, r20
    14a0:	8c 93       	st	X, r24

#include "Dio.h"

void Dio_Init(){

	for (int i=0 ; i< No_of_DIO ; i++){
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
    14a4:	9a 81       	ldd	r25, Y+2	; 0x02
    14a6:	01 96       	adiw	r24, 0x01	; 1
    14a8:	9a 83       	std	Y+2, r25	; 0x02
    14aa:	89 83       	std	Y+1, r24	; 0x01
    14ac:	20 91 b1 00 	lds	r18, 0x00B1
    14b0:	30 91 b2 00 	lds	r19, 0x00B2
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	9a 81       	ldd	r25, Y+2	; 0x02
    14b8:	82 17       	cp	r24, r18
    14ba:	93 07       	cpc	r25, r19
    14bc:	0c f4       	brge	.+2      	; 0x14c0 <Dio_Init+0x3b4>
    14be:	2f ce       	rjmp	.-930    	; 0x111e <Dio_Init+0x12>
					SETBIT(PORTD , Pin_Cfg[i].Pin);
				}
				break;
		}
	}
}
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <Dio_WriteChannel>:

void Dio_WriteChannel(Pin_Channel_Type channel, Pin_Status_Type status){
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <Dio_WriteChannel+0x6>
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <Dio_WriteChannel+0x8>
    14d6:	00 d0       	rcall	.+0      	; 0x14d8 <Dio_WriteChannel+0xa>
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
    14dc:	8b 83       	std	Y+3, r24	; 0x03
    14de:	6c 83       	std	Y+4, r22	; 0x04

	Dio_Port_Type port = channel/8;
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	86 95       	lsr	r24
    14e4:	86 95       	lsr	r24
    14e6:	86 95       	lsr	r24
    14e8:	8a 83       	std	Y+2, r24	; 0x02
	UINT8 pin = channel%8;
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	87 70       	andi	r24, 0x07	; 7
    14ee:	89 83       	std	Y+1, r24	; 0x01

	switch (port) {
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	3e 83       	std	Y+6, r19	; 0x06
    14f8:	2d 83       	std	Y+5, r18	; 0x05
    14fa:	8d 81       	ldd	r24, Y+5	; 0x05
    14fc:	9e 81       	ldd	r25, Y+6	; 0x06
    14fe:	81 30       	cpi	r24, 0x01	; 1
    1500:	91 05       	cpc	r25, r1
    1502:	09 f4       	brne	.+2      	; 0x1506 <Dio_WriteChannel+0x38>
    1504:	43 c0       	rjmp	.+134    	; 0x158c <Dio_WriteChannel+0xbe>
    1506:	2d 81       	ldd	r18, Y+5	; 0x05
    1508:	3e 81       	ldd	r19, Y+6	; 0x06
    150a:	22 30       	cpi	r18, 0x02	; 2
    150c:	31 05       	cpc	r19, r1
    150e:	2c f4       	brge	.+10     	; 0x151a <Dio_WriteChannel+0x4c>
    1510:	8d 81       	ldd	r24, Y+5	; 0x05
    1512:	9e 81       	ldd	r25, Y+6	; 0x06
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	71 f0       	breq	.+28     	; 0x1534 <Dio_WriteChannel+0x66>
    1518:	bc c0       	rjmp	.+376    	; 0x1692 <Dio_WriteChannel+0x1c4>
    151a:	2d 81       	ldd	r18, Y+5	; 0x05
    151c:	3e 81       	ldd	r19, Y+6	; 0x06
    151e:	22 30       	cpi	r18, 0x02	; 2
    1520:	31 05       	cpc	r19, r1
    1522:	09 f4       	brne	.+2      	; 0x1526 <Dio_WriteChannel+0x58>
    1524:	5f c0       	rjmp	.+190    	; 0x15e4 <Dio_WriteChannel+0x116>
    1526:	8d 81       	ldd	r24, Y+5	; 0x05
    1528:	9e 81       	ldd	r25, Y+6	; 0x06
    152a:	83 30       	cpi	r24, 0x03	; 3
    152c:	91 05       	cpc	r25, r1
    152e:	09 f4       	brne	.+2      	; 0x1532 <Dio_WriteChannel+0x64>
    1530:	85 c0       	rjmp	.+266    	; 0x163c <Dio_WriteChannel+0x16e>
    1532:	af c0       	rjmp	.+350    	; 0x1692 <Dio_WriteChannel+0x1c4>
		case Dio_PORTA :
				if(status == LOW){
    1534:	8c 81       	ldd	r24, Y+4	; 0x04
    1536:	88 23       	and	r24, r24
    1538:	a9 f4       	brne	.+42     	; 0x1564 <Dio_WriteChannel+0x96>
					CLRBIT(PORTA , pin);
    153a:	ab e3       	ldi	r26, 0x3B	; 59
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	eb e3       	ldi	r30, 0x3B	; 59
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	48 2f       	mov	r20, r24
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	28 2f       	mov	r18, r24
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	02 2e       	mov	r0, r18
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <Dio_WriteChannel+0x8a>
    1554:	88 0f       	add	r24, r24
    1556:	99 1f       	adc	r25, r25
    1558:	0a 94       	dec	r0
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <Dio_WriteChannel+0x86>
    155c:	80 95       	com	r24
    155e:	84 23       	and	r24, r20
    1560:	8c 93       	st	X, r24
    1562:	97 c0       	rjmp	.+302    	; 0x1692 <Dio_WriteChannel+0x1c4>
				}
				else{
					SETBIT(PORTA , pin);
    1564:	ab e3       	ldi	r26, 0x3B	; 59
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	eb e3       	ldi	r30, 0x3B	; 59
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	48 2f       	mov	r20, r24
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	28 2f       	mov	r18, r24
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	02 2e       	mov	r0, r18
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <Dio_WriteChannel+0xb4>
    157e:	88 0f       	add	r24, r24
    1580:	99 1f       	adc	r25, r25
    1582:	0a 94       	dec	r0
    1584:	e2 f7       	brpl	.-8      	; 0x157e <Dio_WriteChannel+0xb0>
    1586:	84 2b       	or	r24, r20
    1588:	8c 93       	st	X, r24
    158a:	83 c0       	rjmp	.+262    	; 0x1692 <Dio_WriteChannel+0x1c4>
				}
				break;

		case Dio_PORTB :
				if(status == LOW){
    158c:	8c 81       	ldd	r24, Y+4	; 0x04
    158e:	88 23       	and	r24, r24
    1590:	a9 f4       	brne	.+42     	; 0x15bc <Dio_WriteChannel+0xee>
					CLRBIT(PORTB , pin);
    1592:	a8 e3       	ldi	r26, 0x38	; 56
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	e8 e3       	ldi	r30, 0x38	; 56
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	48 2f       	mov	r20, r24
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	28 2f       	mov	r18, r24
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	02 2e       	mov	r0, r18
    15aa:	02 c0       	rjmp	.+4      	; 0x15b0 <Dio_WriteChannel+0xe2>
    15ac:	88 0f       	add	r24, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	0a 94       	dec	r0
    15b2:	e2 f7       	brpl	.-8      	; 0x15ac <Dio_WriteChannel+0xde>
    15b4:	80 95       	com	r24
    15b6:	84 23       	and	r24, r20
    15b8:	8c 93       	st	X, r24
    15ba:	6b c0       	rjmp	.+214    	; 0x1692 <Dio_WriteChannel+0x1c4>
				}
				else{
					SETBIT(PORTB , pin);
    15bc:	a8 e3       	ldi	r26, 0x38	; 56
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	e8 e3       	ldi	r30, 0x38	; 56
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	48 2f       	mov	r20, r24
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
    15ca:	28 2f       	mov	r18, r24
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	02 2e       	mov	r0, r18
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <Dio_WriteChannel+0x10c>
    15d6:	88 0f       	add	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	0a 94       	dec	r0
    15dc:	e2 f7       	brpl	.-8      	; 0x15d6 <Dio_WriteChannel+0x108>
    15de:	84 2b       	or	r24, r20
    15e0:	8c 93       	st	X, r24
    15e2:	57 c0       	rjmp	.+174    	; 0x1692 <Dio_WriteChannel+0x1c4>
				}
				break;

		case Dio_PORTC :
				if(status == LOW){
    15e4:	8c 81       	ldd	r24, Y+4	; 0x04
    15e6:	88 23       	and	r24, r24
    15e8:	a9 f4       	brne	.+42     	; 0x1614 <Dio_WriteChannel+0x146>
					CLRBIT(PORTC , pin);
    15ea:	a5 e3       	ldi	r26, 0x35	; 53
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	e5 e3       	ldi	r30, 0x35	; 53
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	48 2f       	mov	r20, r24
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	02 2e       	mov	r0, r18
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <Dio_WriteChannel+0x13a>
    1604:	88 0f       	add	r24, r24
    1606:	99 1f       	adc	r25, r25
    1608:	0a 94       	dec	r0
    160a:	e2 f7       	brpl	.-8      	; 0x1604 <Dio_WriteChannel+0x136>
    160c:	80 95       	com	r24
    160e:	84 23       	and	r24, r20
    1610:	8c 93       	st	X, r24
    1612:	3f c0       	rjmp	.+126    	; 0x1692 <Dio_WriteChannel+0x1c4>
				}
				else{
					SETBIT(PORTC , pin);
    1614:	a5 e3       	ldi	r26, 0x35	; 53
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	e5 e3       	ldi	r30, 0x35	; 53
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	48 2f       	mov	r20, r24
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	28 2f       	mov	r18, r24
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	02 2e       	mov	r0, r18
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <Dio_WriteChannel+0x164>
    162e:	88 0f       	add	r24, r24
    1630:	99 1f       	adc	r25, r25
    1632:	0a 94       	dec	r0
    1634:	e2 f7       	brpl	.-8      	; 0x162e <Dio_WriteChannel+0x160>
    1636:	84 2b       	or	r24, r20
    1638:	8c 93       	st	X, r24
    163a:	2b c0       	rjmp	.+86     	; 0x1692 <Dio_WriteChannel+0x1c4>
				}
				break;

		case Dio_PORTD :
				if(status == LOW){
    163c:	8c 81       	ldd	r24, Y+4	; 0x04
    163e:	88 23       	and	r24, r24
    1640:	a9 f4       	brne	.+42     	; 0x166c <Dio_WriteChannel+0x19e>
					CLRBIT(PORTD , pin);
    1642:	a2 e3       	ldi	r26, 0x32	; 50
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	e2 e3       	ldi	r30, 0x32	; 50
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	48 2f       	mov	r20, r24
    164e:	89 81       	ldd	r24, Y+1	; 0x01
    1650:	28 2f       	mov	r18, r24
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	02 2e       	mov	r0, r18
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <Dio_WriteChannel+0x192>
    165c:	88 0f       	add	r24, r24
    165e:	99 1f       	adc	r25, r25
    1660:	0a 94       	dec	r0
    1662:	e2 f7       	brpl	.-8      	; 0x165c <Dio_WriteChannel+0x18e>
    1664:	80 95       	com	r24
    1666:	84 23       	and	r24, r20
    1668:	8c 93       	st	X, r24
    166a:	13 c0       	rjmp	.+38     	; 0x1692 <Dio_WriteChannel+0x1c4>
				}
				else{
					SETBIT(PORTD , pin);
    166c:	a2 e3       	ldi	r26, 0x32	; 50
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	e2 e3       	ldi	r30, 0x32	; 50
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	48 2f       	mov	r20, r24
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	28 2f       	mov	r18, r24
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	02 2e       	mov	r0, r18
    1684:	02 c0       	rjmp	.+4      	; 0x168a <Dio_WriteChannel+0x1bc>
    1686:	88 0f       	add	r24, r24
    1688:	99 1f       	adc	r25, r25
    168a:	0a 94       	dec	r0
    168c:	e2 f7       	brpl	.-8      	; 0x1686 <Dio_WriteChannel+0x1b8>
    168e:	84 2b       	or	r24, r20
    1690:	8c 93       	st	X, r24
				}
				break;
		}
}
    1692:	26 96       	adiw	r28, 0x06	; 6
    1694:	0f b6       	in	r0, 0x3f	; 63
    1696:	f8 94       	cli
    1698:	de bf       	out	0x3e, r29	; 62
    169a:	0f be       	out	0x3f, r0	; 63
    169c:	cd bf       	out	0x3d, r28	; 61
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	08 95       	ret

000016a4 <Dio_ReadChannel>:

Pin_Status_Type Dio_ReadChannel (Pin_Channel_Type channel){
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	00 d0       	rcall	.+0      	; 0x16aa <Dio_ReadChannel+0x6>
    16aa:	00 d0       	rcall	.+0      	; 0x16ac <Dio_ReadChannel+0x8>
    16ac:	00 d0       	rcall	.+0      	; 0x16ae <Dio_ReadChannel+0xa>
    16ae:	cd b7       	in	r28, 0x3d	; 61
    16b0:	de b7       	in	r29, 0x3e	; 62
    16b2:	8b 83       	std	Y+3, r24	; 0x03

	Dio_Port_Type port = channel/8;
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	86 95       	lsr	r24
    16b8:	86 95       	lsr	r24
    16ba:	86 95       	lsr	r24
    16bc:	8a 83       	std	Y+2, r24	; 0x02
	UINT8 pin = channel%8;
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	87 70       	andi	r24, 0x07	; 7
    16c2:	89 83       	std	Y+1, r24	; 0x01

	switch (port) {
    16c4:	8a 81       	ldd	r24, Y+2	; 0x02
    16c6:	28 2f       	mov	r18, r24
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	3e 83       	std	Y+6, r19	; 0x06
    16cc:	2d 83       	std	Y+5, r18	; 0x05
    16ce:	4d 81       	ldd	r20, Y+5	; 0x05
    16d0:	5e 81       	ldd	r21, Y+6	; 0x06
    16d2:	41 30       	cpi	r20, 0x01	; 1
    16d4:	51 05       	cpc	r21, r1
    16d6:	49 f1       	breq	.+82     	; 0x172a <Dio_ReadChannel+0x86>
    16d8:	8d 81       	ldd	r24, Y+5	; 0x05
    16da:	9e 81       	ldd	r25, Y+6	; 0x06
    16dc:	82 30       	cpi	r24, 0x02	; 2
    16de:	91 05       	cpc	r25, r1
    16e0:	34 f4       	brge	.+12     	; 0x16ee <Dio_ReadChannel+0x4a>
    16e2:	2d 81       	ldd	r18, Y+5	; 0x05
    16e4:	3e 81       	ldd	r19, Y+6	; 0x06
    16e6:	21 15       	cp	r18, r1
    16e8:	31 05       	cpc	r19, r1
    16ea:	61 f0       	breq	.+24     	; 0x1704 <Dio_ReadChannel+0x60>
    16ec:	57 c0       	rjmp	.+174    	; 0x179c <Dio_ReadChannel+0xf8>
    16ee:	4d 81       	ldd	r20, Y+5	; 0x05
    16f0:	5e 81       	ldd	r21, Y+6	; 0x06
    16f2:	42 30       	cpi	r20, 0x02	; 2
    16f4:	51 05       	cpc	r21, r1
    16f6:	61 f1       	breq	.+88     	; 0x1750 <Dio_ReadChannel+0xac>
    16f8:	8d 81       	ldd	r24, Y+5	; 0x05
    16fa:	9e 81       	ldd	r25, Y+6	; 0x06
    16fc:	83 30       	cpi	r24, 0x03	; 3
    16fe:	91 05       	cpc	r25, r1
    1700:	d1 f1       	breq	.+116    	; 0x1776 <Dio_ReadChannel+0xd2>
    1702:	4c c0       	rjmp	.+152    	; 0x179c <Dio_ReadChannel+0xf8>
			case Dio_PORTA :
					return READBIT(PINA , pin);
    1704:	e9 e3       	ldi	r30, 0x39	; 57
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	89 81       	ldd	r24, Y+1	; 0x01
    1710:	88 2f       	mov	r24, r24
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	a9 01       	movw	r20, r18
    1716:	02 c0       	rjmp	.+4      	; 0x171c <Dio_ReadChannel+0x78>
    1718:	55 95       	asr	r21
    171a:	47 95       	ror	r20
    171c:	8a 95       	dec	r24
    171e:	e2 f7       	brpl	.-8      	; 0x1718 <Dio_ReadChannel+0x74>
    1720:	ca 01       	movw	r24, r20
    1722:	58 2f       	mov	r21, r24
    1724:	51 70       	andi	r21, 0x01	; 1
    1726:	5c 83       	std	Y+4, r21	; 0x04
    1728:	3b c0       	rjmp	.+118    	; 0x17a0 <Dio_ReadChannel+0xfc>

			case Dio_PORTB :
					return READBIT(PINB , pin);
    172a:	e6 e3       	ldi	r30, 0x36	; 54
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	88 2f       	mov	r24, r24
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	a9 01       	movw	r20, r18
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <Dio_ReadChannel+0x9e>
    173e:	55 95       	asr	r21
    1740:	47 95       	ror	r20
    1742:	8a 95       	dec	r24
    1744:	e2 f7       	brpl	.-8      	; 0x173e <Dio_ReadChannel+0x9a>
    1746:	ca 01       	movw	r24, r20
    1748:	58 2f       	mov	r21, r24
    174a:	51 70       	andi	r21, 0x01	; 1
    174c:	5c 83       	std	Y+4, r21	; 0x04
    174e:	28 c0       	rjmp	.+80     	; 0x17a0 <Dio_ReadChannel+0xfc>

			case Dio_PORTC :
					return READBIT(PINC , pin);
    1750:	e3 e3       	ldi	r30, 0x33	; 51
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	28 2f       	mov	r18, r24
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	88 2f       	mov	r24, r24
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	a9 01       	movw	r20, r18
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <Dio_ReadChannel+0xc4>
    1764:	55 95       	asr	r21
    1766:	47 95       	ror	r20
    1768:	8a 95       	dec	r24
    176a:	e2 f7       	brpl	.-8      	; 0x1764 <Dio_ReadChannel+0xc0>
    176c:	ca 01       	movw	r24, r20
    176e:	58 2f       	mov	r21, r24
    1770:	51 70       	andi	r21, 0x01	; 1
    1772:	5c 83       	std	Y+4, r21	; 0x04
    1774:	15 c0       	rjmp	.+42     	; 0x17a0 <Dio_ReadChannel+0xfc>

			case Dio_PORTD :
					return READBIT(PIND , pin);
    1776:	e0 e3       	ldi	r30, 0x30	; 48
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	89 81       	ldd	r24, Y+1	; 0x01
    1782:	88 2f       	mov	r24, r24
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	a9 01       	movw	r20, r18
    1788:	02 c0       	rjmp	.+4      	; 0x178e <Dio_ReadChannel+0xea>
    178a:	55 95       	asr	r21
    178c:	47 95       	ror	r20
    178e:	8a 95       	dec	r24
    1790:	e2 f7       	brpl	.-8      	; 0x178a <Dio_ReadChannel+0xe6>
    1792:	ca 01       	movw	r24, r20
    1794:	58 2f       	mov	r21, r24
    1796:	51 70       	andi	r21, 0x01	; 1
    1798:	5c 83       	std	Y+4, r21	; 0x04
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <Dio_ReadChannel+0xfc>
		}

	return -1;
    179c:	8f ef       	ldi	r24, 0xFF	; 255
    179e:	8c 83       	std	Y+4, r24	; 0x04
    17a0:	8c 81       	ldd	r24, Y+4	; 0x04
}
    17a2:	26 96       	adiw	r28, 0x06	; 6
    17a4:	0f b6       	in	r0, 0x3f	; 63
    17a6:	f8 94       	cli
    17a8:	de bf       	out	0x3e, r29	; 62
    17aa:	0f be       	out	0x3f, r0	; 63
    17ac:	cd bf       	out	0x3d, r28	; 61
    17ae:	cf 91       	pop	r28
    17b0:	df 91       	pop	r29
    17b2:	08 95       	ret

000017b4 <Dio_WritePort>:

void Dio_WritePort(Dio_Port_Type port, UINT8 value){
    17b4:	df 93       	push	r29
    17b6:	cf 93       	push	r28
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <Dio_WritePort+0x6>
    17ba:	00 d0       	rcall	.+0      	; 0x17bc <Dio_WritePort+0x8>
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
    17c0:	89 83       	std	Y+1, r24	; 0x01
    17c2:	6a 83       	std	Y+2, r22	; 0x02

	switch (port) {
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	3c 83       	std	Y+4, r19	; 0x04
    17cc:	2b 83       	std	Y+3, r18	; 0x03
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	9c 81       	ldd	r25, Y+4	; 0x04
    17d2:	81 30       	cpi	r24, 0x01	; 1
    17d4:	91 05       	cpc	r25, r1
    17d6:	d1 f0       	breq	.+52     	; 0x180c <Dio_WritePort+0x58>
    17d8:	2b 81       	ldd	r18, Y+3	; 0x03
    17da:	3c 81       	ldd	r19, Y+4	; 0x04
    17dc:	22 30       	cpi	r18, 0x02	; 2
    17de:	31 05       	cpc	r19, r1
    17e0:	2c f4       	brge	.+10     	; 0x17ec <Dio_WritePort+0x38>
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	9c 81       	ldd	r25, Y+4	; 0x04
    17e6:	00 97       	sbiw	r24, 0x00	; 0
    17e8:	61 f0       	breq	.+24     	; 0x1802 <Dio_WritePort+0x4e>
    17ea:	1e c0       	rjmp	.+60     	; 0x1828 <Dio_WritePort+0x74>
    17ec:	2b 81       	ldd	r18, Y+3	; 0x03
    17ee:	3c 81       	ldd	r19, Y+4	; 0x04
    17f0:	22 30       	cpi	r18, 0x02	; 2
    17f2:	31 05       	cpc	r19, r1
    17f4:	81 f0       	breq	.+32     	; 0x1816 <Dio_WritePort+0x62>
    17f6:	8b 81       	ldd	r24, Y+3	; 0x03
    17f8:	9c 81       	ldd	r25, Y+4	; 0x04
    17fa:	83 30       	cpi	r24, 0x03	; 3
    17fc:	91 05       	cpc	r25, r1
    17fe:	81 f0       	breq	.+32     	; 0x1820 <Dio_WritePort+0x6c>
    1800:	13 c0       	rjmp	.+38     	; 0x1828 <Dio_WritePort+0x74>
		case Dio_PORTA :
				PORTA = value;
    1802:	eb e3       	ldi	r30, 0x3B	; 59
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	80 83       	st	Z, r24
    180a:	0e c0       	rjmp	.+28     	; 0x1828 <Dio_WritePort+0x74>
				break;

		case Dio_PORTB :
				PORTB = value;
    180c:	e8 e3       	ldi	r30, 0x38	; 56
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	8a 81       	ldd	r24, Y+2	; 0x02
    1812:	80 83       	st	Z, r24
    1814:	09 c0       	rjmp	.+18     	; 0x1828 <Dio_WritePort+0x74>
				break;

		case Dio_PORTC :
				PORTC = value;
    1816:	e5 e3       	ldi	r30, 0x35	; 53
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	8a 81       	ldd	r24, Y+2	; 0x02
    181c:	80 83       	st	Z, r24
    181e:	04 c0       	rjmp	.+8      	; 0x1828 <Dio_WritePort+0x74>
				break;

		case Dio_PORTD :
				PORTD = value;
    1820:	e2 e3       	ldi	r30, 0x32	; 50
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	8a 81       	ldd	r24, Y+2	; 0x02
    1826:	80 83       	st	Z, r24
				break;
		}
}
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <Dio_ReadPort>:

UINT8 Dio_ReadPort (Dio_Port_Type port){
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	00 d0       	rcall	.+0      	; 0x183c <Dio_ReadPort+0x6>
    183c:	00 d0       	rcall	.+0      	; 0x183e <Dio_ReadPort+0x8>
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	89 83       	std	Y+1, r24	; 0x01

	switch (port) {
    1844:	89 81       	ldd	r24, Y+1	; 0x01
    1846:	28 2f       	mov	r18, r24
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	3c 83       	std	Y+4, r19	; 0x04
    184c:	2b 83       	std	Y+3, r18	; 0x03
    184e:	8b 81       	ldd	r24, Y+3	; 0x03
    1850:	9c 81       	ldd	r25, Y+4	; 0x04
    1852:	81 30       	cpi	r24, 0x01	; 1
    1854:	91 05       	cpc	r25, r1
    1856:	d1 f0       	breq	.+52     	; 0x188c <Dio_ReadPort+0x56>
    1858:	2b 81       	ldd	r18, Y+3	; 0x03
    185a:	3c 81       	ldd	r19, Y+4	; 0x04
    185c:	22 30       	cpi	r18, 0x02	; 2
    185e:	31 05       	cpc	r19, r1
    1860:	2c f4       	brge	.+10     	; 0x186c <Dio_ReadPort+0x36>
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	9c 81       	ldd	r25, Y+4	; 0x04
    1866:	00 97       	sbiw	r24, 0x00	; 0
    1868:	61 f0       	breq	.+24     	; 0x1882 <Dio_ReadPort+0x4c>
    186a:	1f c0       	rjmp	.+62     	; 0x18aa <Dio_ReadPort+0x74>
    186c:	2b 81       	ldd	r18, Y+3	; 0x03
    186e:	3c 81       	ldd	r19, Y+4	; 0x04
    1870:	22 30       	cpi	r18, 0x02	; 2
    1872:	31 05       	cpc	r19, r1
    1874:	81 f0       	breq	.+32     	; 0x1896 <Dio_ReadPort+0x60>
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	9c 81       	ldd	r25, Y+4	; 0x04
    187a:	83 30       	cpi	r24, 0x03	; 3
    187c:	91 05       	cpc	r25, r1
    187e:	81 f0       	breq	.+32     	; 0x18a0 <Dio_ReadPort+0x6a>
    1880:	14 c0       	rjmp	.+40     	; 0x18aa <Dio_ReadPort+0x74>
			case Dio_PORTA :
					return PINA;
    1882:	e9 e3       	ldi	r30, 0x39	; 57
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	90 81       	ld	r25, Z
    1888:	9a 83       	std	Y+2, r25	; 0x02
    188a:	11 c0       	rjmp	.+34     	; 0x18ae <Dio_ReadPort+0x78>

			case Dio_PORTB :
					return PINB;
    188c:	e6 e3       	ldi	r30, 0x36	; 54
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	20 81       	ld	r18, Z
    1892:	2a 83       	std	Y+2, r18	; 0x02
    1894:	0c c0       	rjmp	.+24     	; 0x18ae <Dio_ReadPort+0x78>

			case Dio_PORTC :
					return PINC;
    1896:	e3 e3       	ldi	r30, 0x33	; 51
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	30 81       	ld	r19, Z
    189c:	3a 83       	std	Y+2, r19	; 0x02
    189e:	07 c0       	rjmp	.+14     	; 0x18ae <Dio_ReadPort+0x78>

			case Dio_PORTD :
					return PIND;
    18a0:	e0 e3       	ldi	r30, 0x30	; 48
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	8a 83       	std	Y+2, r24	; 0x02
    18a8:	02 c0       	rjmp	.+4      	; 0x18ae <Dio_ReadPort+0x78>
		}

	return -1;
    18aa:	9f ef       	ldi	r25, 0xFF	; 255
    18ac:	9a 83       	std	Y+2, r25	; 0x02
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
}
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	cf 91       	pop	r28
    18ba:	df 91       	pop	r29
    18bc:	08 95       	ret

000018be <ADC_Init>:
 */
#include "ADC_Interface.h"

static void (*ptr1) (void) = NULL;

void ADC_Init (void){
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
	SETBIT(ADCSRA,ADPS0);
	CLRBIT(ADCSRA,ADPS1);
	SETBIT(ADCSRA,ADPS2);

#elif ADC_Prescaler == ADC_Prescalling_64
	CLRBIT(ADCSRA,ADPS0);
    18c6:	a6 e2       	ldi	r26, 0x26	; 38
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	e6 e2       	ldi	r30, 0x26	; 38
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	8e 7f       	andi	r24, 0xFE	; 254
    18d2:	8c 93       	st	X, r24
	SETBIT(ADCSRA,ADPS1);
    18d4:	a6 e2       	ldi	r26, 0x26	; 38
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	e6 e2       	ldi	r30, 0x26	; 38
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	82 60       	ori	r24, 0x02	; 2
    18e0:	8c 93       	st	X, r24
	SETBIT(ADCSRA,ADPS2);
    18e2:	a6 e2       	ldi	r26, 0x26	; 38
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	e6 e2       	ldi	r30, 0x26	; 38
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	84 60       	ori	r24, 0x04	; 4
    18ee:	8c 93       	st	X, r24
#if Voltage_Ref == External_AREF
	CLRBIT(ADMUX,REFS0);
	CLRBIT(ADMUX,REFS1);

#elif Voltage_Ref == Internal_AVCC
	SETBIT(ADMUX,REFS0);
    18f0:	a7 e2       	ldi	r26, 0x27	; 39
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	e7 e2       	ldi	r30, 0x27	; 39
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	80 64       	ori	r24, 0x40	; 64
    18fc:	8c 93       	st	X, r24
	CLRBIT(ADMUX,REFS1);
    18fe:	a7 e2       	ldi	r26, 0x27	; 39
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	e7 e2       	ldi	r30, 0x27	; 39
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	8f 77       	andi	r24, 0x7F	; 127
    190a:	8c 93       	st	X, r24
	SETBIT(ADMUX,REFS0);
	SETBIT(ADMUX,REFS1);

#endif

	SETBIT(ADCSRA,ADEN);
    190c:	a6 e2       	ldi	r26, 0x26	; 38
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	e6 e2       	ldi	r30, 0x26	; 38
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	80 68       	ori	r24, 0x80	; 128
    1918:	8c 93       	st	X, r24

}
    191a:	cf 91       	pop	r28
    191c:	df 91       	pop	r29
    191e:	08 95       	ret

00001920 <ADC_Select_Channel>:

void ADC_Select_Channel(UINT8 Channel){
    1920:	df 93       	push	r29
    1922:	cf 93       	push	r28
    1924:	00 d0       	rcall	.+0      	; 0x1926 <ADC_Select_Channel+0x6>
    1926:	0f 92       	push	r0
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
    192c:	89 83       	std	Y+1, r24	; 0x01
	switch(Channel){
    192e:	89 81       	ldd	r24, Y+1	; 0x01
    1930:	28 2f       	mov	r18, r24
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	3b 83       	std	Y+3, r19	; 0x03
    1936:	2a 83       	std	Y+2, r18	; 0x02
    1938:	8a 81       	ldd	r24, Y+2	; 0x02
    193a:	9b 81       	ldd	r25, Y+3	; 0x03
    193c:	83 30       	cpi	r24, 0x03	; 3
    193e:	91 05       	cpc	r25, r1
    1940:	09 f4       	brne	.+2      	; 0x1944 <ADC_Select_Channel+0x24>
    1942:	70 c0       	rjmp	.+224    	; 0x1a24 <ADC_Select_Channel+0x104>
    1944:	2a 81       	ldd	r18, Y+2	; 0x02
    1946:	3b 81       	ldd	r19, Y+3	; 0x03
    1948:	24 30       	cpi	r18, 0x04	; 4
    194a:	31 05       	cpc	r19, r1
    194c:	84 f4       	brge	.+32     	; 0x196e <ADC_Select_Channel+0x4e>
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	9b 81       	ldd	r25, Y+3	; 0x03
    1952:	81 30       	cpi	r24, 0x01	; 1
    1954:	91 05       	cpc	r25, r1
    1956:	d1 f1       	breq	.+116    	; 0x19cc <ADC_Select_Channel+0xac>
    1958:	2a 81       	ldd	r18, Y+2	; 0x02
    195a:	3b 81       	ldd	r19, Y+3	; 0x03
    195c:	22 30       	cpi	r18, 0x02	; 2
    195e:	31 05       	cpc	r19, r1
    1960:	0c f0       	brlt	.+2      	; 0x1964 <ADC_Select_Channel+0x44>
    1962:	4a c0       	rjmp	.+148    	; 0x19f8 <ADC_Select_Channel+0xd8>
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	9b 81       	ldd	r25, Y+3	; 0x03
    1968:	00 97       	sbiw	r24, 0x00	; 0
    196a:	d1 f0       	breq	.+52     	; 0x19a0 <ADC_Select_Channel+0x80>
    196c:	c8 c0       	rjmp	.+400    	; 0x1afe <ADC_Select_Channel+0x1de>
    196e:	2a 81       	ldd	r18, Y+2	; 0x02
    1970:	3b 81       	ldd	r19, Y+3	; 0x03
    1972:	25 30       	cpi	r18, 0x05	; 5
    1974:	31 05       	cpc	r19, r1
    1976:	09 f4       	brne	.+2      	; 0x197a <ADC_Select_Channel+0x5a>
    1978:	81 c0       	rjmp	.+258    	; 0x1a7c <ADC_Select_Channel+0x15c>
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	9b 81       	ldd	r25, Y+3	; 0x03
    197e:	85 30       	cpi	r24, 0x05	; 5
    1980:	91 05       	cpc	r25, r1
    1982:	0c f4       	brge	.+2      	; 0x1986 <ADC_Select_Channel+0x66>
    1984:	65 c0       	rjmp	.+202    	; 0x1a50 <ADC_Select_Channel+0x130>
    1986:	2a 81       	ldd	r18, Y+2	; 0x02
    1988:	3b 81       	ldd	r19, Y+3	; 0x03
    198a:	26 30       	cpi	r18, 0x06	; 6
    198c:	31 05       	cpc	r19, r1
    198e:	09 f4       	brne	.+2      	; 0x1992 <ADC_Select_Channel+0x72>
    1990:	8b c0       	rjmp	.+278    	; 0x1aa8 <ADC_Select_Channel+0x188>
    1992:	8a 81       	ldd	r24, Y+2	; 0x02
    1994:	9b 81       	ldd	r25, Y+3	; 0x03
    1996:	87 30       	cpi	r24, 0x07	; 7
    1998:	91 05       	cpc	r25, r1
    199a:	09 f4       	brne	.+2      	; 0x199e <ADC_Select_Channel+0x7e>
    199c:	9b c0       	rjmp	.+310    	; 0x1ad4 <ADC_Select_Channel+0x1b4>
    199e:	af c0       	rjmp	.+350    	; 0x1afe <ADC_Select_Channel+0x1de>
	case 0:
		CLRBIT(ADMUX,MUX0);
    19a0:	a7 e2       	ldi	r26, 0x27	; 39
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	e7 e2       	ldi	r30, 0x27	; 39
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	8e 7f       	andi	r24, 0xFE	; 254
    19ac:	8c 93       	st	X, r24
		CLRBIT(ADMUX,MUX1);
    19ae:	a7 e2       	ldi	r26, 0x27	; 39
    19b0:	b0 e0       	ldi	r27, 0x00	; 0
    19b2:	e7 e2       	ldi	r30, 0x27	; 39
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	8d 7f       	andi	r24, 0xFD	; 253
    19ba:	8c 93       	st	X, r24
		CLRBIT(ADMUX,MUX2);
    19bc:	a7 e2       	ldi	r26, 0x27	; 39
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	e7 e2       	ldi	r30, 0x27	; 39
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	8b 7f       	andi	r24, 0xFB	; 251
    19c8:	8c 93       	st	X, r24
    19ca:	99 c0       	rjmp	.+306    	; 0x1afe <ADC_Select_Channel+0x1de>
		break;

	case 1:
		SETBIT(ADMUX,MUX0);
    19cc:	a7 e2       	ldi	r26, 0x27	; 39
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	e7 e2       	ldi	r30, 0x27	; 39
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	81 60       	ori	r24, 0x01	; 1
    19d8:	8c 93       	st	X, r24
		CLRBIT(ADMUX,MUX1);
    19da:	a7 e2       	ldi	r26, 0x27	; 39
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	e7 e2       	ldi	r30, 0x27	; 39
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	8d 7f       	andi	r24, 0xFD	; 253
    19e6:	8c 93       	st	X, r24
		CLRBIT(ADMUX,MUX2);
    19e8:	a7 e2       	ldi	r26, 0x27	; 39
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	e7 e2       	ldi	r30, 0x27	; 39
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	8b 7f       	andi	r24, 0xFB	; 251
    19f4:	8c 93       	st	X, r24
    19f6:	83 c0       	rjmp	.+262    	; 0x1afe <ADC_Select_Channel+0x1de>
		break;

	case 2:
		CLRBIT(ADMUX,MUX0);
    19f8:	a7 e2       	ldi	r26, 0x27	; 39
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	e7 e2       	ldi	r30, 0x27	; 39
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	8e 7f       	andi	r24, 0xFE	; 254
    1a04:	8c 93       	st	X, r24
		SETBIT(ADMUX,MUX1);
    1a06:	a7 e2       	ldi	r26, 0x27	; 39
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	e7 e2       	ldi	r30, 0x27	; 39
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	82 60       	ori	r24, 0x02	; 2
    1a12:	8c 93       	st	X, r24
		CLRBIT(ADMUX,MUX2);
    1a14:	a7 e2       	ldi	r26, 0x27	; 39
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	e7 e2       	ldi	r30, 0x27	; 39
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	8b 7f       	andi	r24, 0xFB	; 251
    1a20:	8c 93       	st	X, r24
    1a22:	6d c0       	rjmp	.+218    	; 0x1afe <ADC_Select_Channel+0x1de>
		break;

	case 3:
		SETBIT(ADMUX,MUX0);
    1a24:	a7 e2       	ldi	r26, 0x27	; 39
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	e7 e2       	ldi	r30, 0x27	; 39
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	81 60       	ori	r24, 0x01	; 1
    1a30:	8c 93       	st	X, r24
		SETBIT(ADMUX,MUX1);
    1a32:	a7 e2       	ldi	r26, 0x27	; 39
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	e7 e2       	ldi	r30, 0x27	; 39
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	82 60       	ori	r24, 0x02	; 2
    1a3e:	8c 93       	st	X, r24
		CLRBIT(ADMUX,MUX2);
    1a40:	a7 e2       	ldi	r26, 0x27	; 39
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e7 e2       	ldi	r30, 0x27	; 39
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	8b 7f       	andi	r24, 0xFB	; 251
    1a4c:	8c 93       	st	X, r24
    1a4e:	57 c0       	rjmp	.+174    	; 0x1afe <ADC_Select_Channel+0x1de>
		break;

	case 4:
		CLRBIT(ADMUX,MUX0);
    1a50:	a7 e2       	ldi	r26, 0x27	; 39
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	e7 e2       	ldi	r30, 0x27	; 39
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	8e 7f       	andi	r24, 0xFE	; 254
    1a5c:	8c 93       	st	X, r24
		CLRBIT(ADMUX,MUX1);
    1a5e:	a7 e2       	ldi	r26, 0x27	; 39
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	e7 e2       	ldi	r30, 0x27	; 39
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	8d 7f       	andi	r24, 0xFD	; 253
    1a6a:	8c 93       	st	X, r24
		SETBIT(ADMUX,MUX2);
    1a6c:	a7 e2       	ldi	r26, 0x27	; 39
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	e7 e2       	ldi	r30, 0x27	; 39
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	84 60       	ori	r24, 0x04	; 4
    1a78:	8c 93       	st	X, r24
    1a7a:	41 c0       	rjmp	.+130    	; 0x1afe <ADC_Select_Channel+0x1de>
		break;

	case 5:
		SETBIT(ADMUX,MUX0);
    1a7c:	a7 e2       	ldi	r26, 0x27	; 39
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	e7 e2       	ldi	r30, 0x27	; 39
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	81 60       	ori	r24, 0x01	; 1
    1a88:	8c 93       	st	X, r24
		CLRBIT(ADMUX,MUX1);
    1a8a:	a7 e2       	ldi	r26, 0x27	; 39
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	e7 e2       	ldi	r30, 0x27	; 39
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	8d 7f       	andi	r24, 0xFD	; 253
    1a96:	8c 93       	st	X, r24
		SETBIT(ADMUX,MUX2);
    1a98:	a7 e2       	ldi	r26, 0x27	; 39
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	e7 e2       	ldi	r30, 0x27	; 39
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	84 60       	ori	r24, 0x04	; 4
    1aa4:	8c 93       	st	X, r24
    1aa6:	2b c0       	rjmp	.+86     	; 0x1afe <ADC_Select_Channel+0x1de>
		break;

	case 6:
		CLRBIT(ADMUX,MUX0);
    1aa8:	a7 e2       	ldi	r26, 0x27	; 39
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	e7 e2       	ldi	r30, 0x27	; 39
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	8e 7f       	andi	r24, 0xFE	; 254
    1ab4:	8c 93       	st	X, r24
		SETBIT(ADMUX,MUX1);
    1ab6:	a7 e2       	ldi	r26, 0x27	; 39
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	e7 e2       	ldi	r30, 0x27	; 39
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	82 60       	ori	r24, 0x02	; 2
    1ac2:	8c 93       	st	X, r24
		SETBIT(ADMUX,MUX2);
    1ac4:	a7 e2       	ldi	r26, 0x27	; 39
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	e7 e2       	ldi	r30, 0x27	; 39
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	84 60       	ori	r24, 0x04	; 4
    1ad0:	8c 93       	st	X, r24
    1ad2:	15 c0       	rjmp	.+42     	; 0x1afe <ADC_Select_Channel+0x1de>
		break;

	case 7:
		SETBIT(ADMUX,MUX0);
    1ad4:	a7 e2       	ldi	r26, 0x27	; 39
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e7 e2       	ldi	r30, 0x27	; 39
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	81 60       	ori	r24, 0x01	; 1
    1ae0:	8c 93       	st	X, r24
		SETBIT(ADMUX,MUX1);
    1ae2:	a7 e2       	ldi	r26, 0x27	; 39
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e7 e2       	ldi	r30, 0x27	; 39
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	82 60       	ori	r24, 0x02	; 2
    1aee:	8c 93       	st	X, r24
		SETBIT(ADMUX,MUX2);
    1af0:	a7 e2       	ldi	r26, 0x27	; 39
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	e7 e2       	ldi	r30, 0x27	; 39
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	84 60       	ori	r24, 0x04	; 4
    1afc:	8c 93       	st	X, r24
		break;
	}
}
    1afe:	0f 90       	pop	r0
    1b00:	0f 90       	pop	r0
    1b02:	0f 90       	pop	r0
    1b04:	cf 91       	pop	r28
    1b06:	df 91       	pop	r29
    1b08:	08 95       	ret

00001b0a <ADC_Read>:

UINT16 ADC_Read (void){
    1b0a:	df 93       	push	r29
    1b0c:	cf 93       	push	r28
    1b0e:	cd b7       	in	r28, 0x3d	; 61
    1b10:	de b7       	in	r29, 0x3e	; 62
	return (UINT16) ADC ;
    1b12:	e4 e2       	ldi	r30, 0x24	; 36
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	91 81       	ldd	r25, Z+1	; 0x01
}
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	08 95       	ret

00001b20 <ADC_Start_Conversion>:

void ADC_Start_Conversion(void){
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62
	SETBIT(ADCSRA,ADSC);
    1b28:	a6 e2       	ldi	r26, 0x26	; 38
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	e6 e2       	ldi	r30, 0x26	; 38
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	80 64       	ori	r24, 0x40	; 64
    1b34:	8c 93       	st	X, r24
}
    1b36:	cf 91       	pop	r28
    1b38:	df 91       	pop	r29
    1b3a:	08 95       	ret

00001b3c <ADC_Stop>:

void ADC_Stop(void){
    1b3c:	df 93       	push	r29
    1b3e:	cf 93       	push	r28
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
	CLRBIT(ADCSRA,ADEN);
    1b44:	a6 e2       	ldi	r26, 0x26	; 38
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	e6 e2       	ldi	r30, 0x26	; 38
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	8f 77       	andi	r24, 0x7F	; 127
    1b50:	8c 93       	st	X, r24
}
    1b52:	cf 91       	pop	r28
    1b54:	df 91       	pop	r29
    1b56:	08 95       	ret

00001b58 <ADC_INTEnable>:

void ADC_INTEnable(void){
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	cd b7       	in	r28, 0x3d	; 61
    1b5e:	de b7       	in	r29, 0x3e	; 62
	SETBIT(ADCSRA,ADIE);
    1b60:	a6 e2       	ldi	r26, 0x26	; 38
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	e6 e2       	ldi	r30, 0x26	; 38
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	88 60       	ori	r24, 0x08	; 8
    1b6c:	8c 93       	st	X, r24
}
    1b6e:	cf 91       	pop	r28
    1b70:	df 91       	pop	r29
    1b72:	08 95       	ret

00001b74 <ADC_Complete_Check>:

void ADC_Complete_Check(void){
    1b74:	df 93       	push	r29
    1b76:	cf 93       	push	r28
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
	while (READBIT(ADCSRA,ADIF)==0);
    1b7c:	e6 e2       	ldi	r30, 0x26	; 38
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	82 95       	swap	r24
    1b84:	8f 70       	andi	r24, 0x0F	; 15
    1b86:	88 2f       	mov	r24, r24
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	81 70       	andi	r24, 0x01	; 1
    1b8c:	90 70       	andi	r25, 0x00	; 0
    1b8e:	00 97       	sbiw	r24, 0x00	; 0
    1b90:	a9 f3       	breq	.-22     	; 0x1b7c <ADC_Complete_Check+0x8>
	SETBIT(ADCSRA,ADIF);
    1b92:	a6 e2       	ldi	r26, 0x26	; 38
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	e6 e2       	ldi	r30, 0x26	; 38
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	80 61       	ori	r24, 0x10	; 16
    1b9e:	8c 93       	st	X, r24
}
    1ba0:	cf 91       	pop	r28
    1ba2:	df 91       	pop	r29
    1ba4:	08 95       	ret

00001ba6 <ADC_SetCallBack>:

void ADC_SetCallBack (void (*p2f) (void)){
    1ba6:	df 93       	push	r29
    1ba8:	cf 93       	push	r28
    1baa:	00 d0       	rcall	.+0      	; 0x1bac <ADC_SetCallBack+0x6>
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
    1bb0:	9a 83       	std	Y+2, r25	; 0x02
    1bb2:	89 83       	std	Y+1, r24	; 0x01
	ptr1 = p2f ;
    1bb4:	89 81       	ldd	r24, Y+1	; 0x01
    1bb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb8:	90 93 bb 00 	sts	0x00BB, r25
    1bbc:	80 93 ba 00 	sts	0x00BA, r24
}
    1bc0:	0f 90       	pop	r0
    1bc2:	0f 90       	pop	r0
    1bc4:	cf 91       	pop	r28
    1bc6:	df 91       	pop	r29
    1bc8:	08 95       	ret

00001bca <__vector_16>:

void __vector_16(void) __attribute__ ((signal));
void __vector_16(void){
    1bca:	1f 92       	push	r1
    1bcc:	0f 92       	push	r0
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	0f 92       	push	r0
    1bd2:	11 24       	eor	r1, r1
    1bd4:	2f 93       	push	r18
    1bd6:	3f 93       	push	r19
    1bd8:	4f 93       	push	r20
    1bda:	5f 93       	push	r21
    1bdc:	6f 93       	push	r22
    1bde:	7f 93       	push	r23
    1be0:	8f 93       	push	r24
    1be2:	9f 93       	push	r25
    1be4:	af 93       	push	r26
    1be6:	bf 93       	push	r27
    1be8:	ef 93       	push	r30
    1bea:	ff 93       	push	r31
    1bec:	df 93       	push	r29
    1bee:	cf 93       	push	r28
    1bf0:	cd b7       	in	r28, 0x3d	; 61
    1bf2:	de b7       	in	r29, 0x3e	; 62
	if(ptr1 != NULL)
    1bf4:	80 91 ba 00 	lds	r24, 0x00BA
    1bf8:	90 91 bb 00 	lds	r25, 0x00BB
    1bfc:	00 97       	sbiw	r24, 0x00	; 0
    1bfe:	29 f0       	breq	.+10     	; 0x1c0a <__vector_16+0x40>
	ptr1();
    1c00:	e0 91 ba 00 	lds	r30, 0x00BA
    1c04:	f0 91 bb 00 	lds	r31, 0x00BB
    1c08:	09 95       	icall
}
    1c0a:	cf 91       	pop	r28
    1c0c:	df 91       	pop	r29
    1c0e:	ff 91       	pop	r31
    1c10:	ef 91       	pop	r30
    1c12:	bf 91       	pop	r27
    1c14:	af 91       	pop	r26
    1c16:	9f 91       	pop	r25
    1c18:	8f 91       	pop	r24
    1c1a:	7f 91       	pop	r23
    1c1c:	6f 91       	pop	r22
    1c1e:	5f 91       	pop	r21
    1c20:	4f 91       	pop	r20
    1c22:	3f 91       	pop	r19
    1c24:	2f 91       	pop	r18
    1c26:	0f 90       	pop	r0
    1c28:	0f be       	out	0x3f, r0	; 63
    1c2a:	0f 90       	pop	r0
    1c2c:	1f 90       	pop	r1
    1c2e:	18 95       	reti

00001c30 <LCD_VInit>:
#include "LCD_Interface.h"
#include "LCD_Private.h"
#define F_CPU 16000000
#include "util/delay.h"

void LCD_VInit (void){
    1c30:	0f 93       	push	r16
    1c32:	1f 93       	push	r17
    1c34:	df 93       	push	r29
    1c36:	cf 93       	push	r28
    1c38:	cd b7       	in	r28, 0x3d	; 61
    1c3a:	de b7       	in	r29, 0x3e	; 62
    1c3c:	cc 54       	subi	r28, 0x4C	; 76
    1c3e:	d0 40       	sbci	r29, 0x00	; 0
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	f8 94       	cli
    1c44:	de bf       	out	0x3e, r29	; 62
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	cd bf       	out	0x3d, r28	; 61
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	e7 5b       	subi	r30, 0xB7	; 183
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	ac e0       	ldi	r26, 0x0C	; 12
    1c56:	b2 e4       	ldi	r27, 0x42	; 66
    1c58:	80 83       	st	Z, r24
    1c5a:	91 83       	std	Z+1, r25	; 0x01
    1c5c:	a2 83       	std	Z+2, r26	; 0x02
    1c5e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c60:	8e 01       	movw	r16, r28
    1c62:	0b 5b       	subi	r16, 0xBB	; 187
    1c64:	1f 4f       	sbci	r17, 0xFF	; 255
    1c66:	fe 01       	movw	r30, r28
    1c68:	e7 5b       	subi	r30, 0xB7	; 183
    1c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6c:	60 81       	ld	r22, Z
    1c6e:	71 81       	ldd	r23, Z+1	; 0x01
    1c70:	82 81       	ldd	r24, Z+2	; 0x02
    1c72:	93 81       	ldd	r25, Z+3	; 0x03
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	4a e7       	ldi	r20, 0x7A	; 122
    1c7a:	55 e4       	ldi	r21, 0x45	; 69
    1c7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c80:	dc 01       	movw	r26, r24
    1c82:	cb 01       	movw	r24, r22
    1c84:	f8 01       	movw	r30, r16
    1c86:	80 83       	st	Z, r24
    1c88:	91 83       	std	Z+1, r25	; 0x01
    1c8a:	a2 83       	std	Z+2, r26	; 0x02
    1c8c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c8e:	fe 01       	movw	r30, r28
    1c90:	eb 5b       	subi	r30, 0xBB	; 187
    1c92:	ff 4f       	sbci	r31, 0xFF	; 255
    1c94:	60 81       	ld	r22, Z
    1c96:	71 81       	ldd	r23, Z+1	; 0x01
    1c98:	82 81       	ldd	r24, Z+2	; 0x02
    1c9a:	93 81       	ldd	r25, Z+3	; 0x03
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	40 e8       	ldi	r20, 0x80	; 128
    1ca2:	5f e3       	ldi	r21, 0x3F	; 63
    1ca4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ca8:	88 23       	and	r24, r24
    1caa:	44 f4       	brge	.+16     	; 0x1cbc <LCD_VInit+0x8c>
		__ticks = 1;
    1cac:	fe 01       	movw	r30, r28
    1cae:	ed 5b       	subi	r30, 0xBD	; 189
    1cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	91 83       	std	Z+1, r25	; 0x01
    1cb8:	80 83       	st	Z, r24
    1cba:	64 c0       	rjmp	.+200    	; 0x1d84 <LCD_VInit+0x154>
	else if (__tmp > 65535)
    1cbc:	fe 01       	movw	r30, r28
    1cbe:	eb 5b       	subi	r30, 0xBB	; 187
    1cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc2:	60 81       	ld	r22, Z
    1cc4:	71 81       	ldd	r23, Z+1	; 0x01
    1cc6:	82 81       	ldd	r24, Z+2	; 0x02
    1cc8:	93 81       	ldd	r25, Z+3	; 0x03
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	3f ef       	ldi	r19, 0xFF	; 255
    1cce:	4f e7       	ldi	r20, 0x7F	; 127
    1cd0:	57 e4       	ldi	r21, 0x47	; 71
    1cd2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cd6:	18 16       	cp	r1, r24
    1cd8:	0c f0       	brlt	.+2      	; 0x1cdc <LCD_VInit+0xac>
    1cda:	43 c0       	rjmp	.+134    	; 0x1d62 <LCD_VInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cdc:	fe 01       	movw	r30, r28
    1cde:	e7 5b       	subi	r30, 0xB7	; 183
    1ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce2:	60 81       	ld	r22, Z
    1ce4:	71 81       	ldd	r23, Z+1	; 0x01
    1ce6:	82 81       	ldd	r24, Z+2	; 0x02
    1ce8:	93 81       	ldd	r25, Z+3	; 0x03
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	40 e2       	ldi	r20, 0x20	; 32
    1cf0:	51 e4       	ldi	r21, 0x41	; 65
    1cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	8e 01       	movw	r16, r28
    1cfc:	0d 5b       	subi	r16, 0xBD	; 189
    1cfe:	1f 4f       	sbci	r17, 0xFF	; 255
    1d00:	bc 01       	movw	r22, r24
    1d02:	cd 01       	movw	r24, r26
    1d04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	f8 01       	movw	r30, r16
    1d0e:	91 83       	std	Z+1, r25	; 0x01
    1d10:	80 83       	st	Z, r24
    1d12:	1f c0       	rjmp	.+62     	; 0x1d52 <LCD_VInit+0x122>
    1d14:	fe 01       	movw	r30, r28
    1d16:	ef 5b       	subi	r30, 0xBF	; 191
    1d18:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1a:	80 e9       	ldi	r24, 0x90	; 144
    1d1c:	91 e0       	ldi	r25, 0x01	; 1
    1d1e:	91 83       	std	Z+1, r25	; 0x01
    1d20:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d22:	fe 01       	movw	r30, r28
    1d24:	ef 5b       	subi	r30, 0xBF	; 191
    1d26:	ff 4f       	sbci	r31, 0xFF	; 255
    1d28:	80 81       	ld	r24, Z
    1d2a:	91 81       	ldd	r25, Z+1	; 0x01
    1d2c:	01 97       	sbiw	r24, 0x01	; 1
    1d2e:	f1 f7       	brne	.-4      	; 0x1d2c <LCD_VInit+0xfc>
    1d30:	fe 01       	movw	r30, r28
    1d32:	ef 5b       	subi	r30, 0xBF	; 191
    1d34:	ff 4f       	sbci	r31, 0xFF	; 255
    1d36:	91 83       	std	Z+1, r25	; 0x01
    1d38:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3a:	de 01       	movw	r26, r28
    1d3c:	ad 5b       	subi	r26, 0xBD	; 189
    1d3e:	bf 4f       	sbci	r27, 0xFF	; 255
    1d40:	fe 01       	movw	r30, r28
    1d42:	ed 5b       	subi	r30, 0xBD	; 189
    1d44:	ff 4f       	sbci	r31, 0xFF	; 255
    1d46:	80 81       	ld	r24, Z
    1d48:	91 81       	ldd	r25, Z+1	; 0x01
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	11 96       	adiw	r26, 0x01	; 1
    1d4e:	9c 93       	st	X, r25
    1d50:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d52:	fe 01       	movw	r30, r28
    1d54:	ed 5b       	subi	r30, 0xBD	; 189
    1d56:	ff 4f       	sbci	r31, 0xFF	; 255
    1d58:	80 81       	ld	r24, Z
    1d5a:	91 81       	ldd	r25, Z+1	; 0x01
    1d5c:	00 97       	sbiw	r24, 0x00	; 0
    1d5e:	d1 f6       	brne	.-76     	; 0x1d14 <LCD_VInit+0xe4>
    1d60:	24 c0       	rjmp	.+72     	; 0x1daa <LCD_VInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d62:	8e 01       	movw	r16, r28
    1d64:	0d 5b       	subi	r16, 0xBD	; 189
    1d66:	1f 4f       	sbci	r17, 0xFF	; 255
    1d68:	fe 01       	movw	r30, r28
    1d6a:	eb 5b       	subi	r30, 0xBB	; 187
    1d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6e:	60 81       	ld	r22, Z
    1d70:	71 81       	ldd	r23, Z+1	; 0x01
    1d72:	82 81       	ldd	r24, Z+2	; 0x02
    1d74:	93 81       	ldd	r25, Z+3	; 0x03
    1d76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	f8 01       	movw	r30, r16
    1d80:	91 83       	std	Z+1, r25	; 0x01
    1d82:	80 83       	st	Z, r24
    1d84:	fe 01       	movw	r30, r28
    1d86:	ed 5b       	subi	r30, 0xBD	; 189
    1d88:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8a:	80 81       	ld	r24, Z
    1d8c:	91 81       	ldd	r25, Z+1	; 0x01
    1d8e:	fe 01       	movw	r30, r28
    1d90:	ff 96       	adiw	r30, 0x3f	; 63
    1d92:	91 83       	std	Z+1, r25	; 0x01
    1d94:	80 83       	st	Z, r24
    1d96:	fe 01       	movw	r30, r28
    1d98:	ff 96       	adiw	r30, 0x3f	; 63
    1d9a:	80 81       	ld	r24, Z
    1d9c:	91 81       	ldd	r25, Z+1	; 0x01
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	f1 f7       	brne	.-4      	; 0x1d9e <LCD_VInit+0x16e>
    1da2:	fe 01       	movw	r30, r28
    1da4:	ff 96       	adiw	r30, 0x3f	; 63
    1da6:	91 83       	std	Z+1, r25	; 0x01
    1da8:	80 83       	st	Z, r24

	_delay_ms(35);
	Private_VWriteHalfPort(0b0010);
    1daa:	82 e0       	ldi	r24, 0x02	; 2
    1dac:	0e 94 28 12 	call	0x2450	; 0x2450 <Private_VWriteHalfPort>
	Private_VEnable();
    1db0:	0e 94 54 12 	call	0x24a8	; 0x24a8 <Private_VEnable>
	/*LCD_VSendCmnd(0b0010000);*/
	LCD_VSendCmnd(LCD_Function_Set);
    1db4:	88 e2       	ldi	r24, 0x28	; 40
    1db6:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_VSendCmnd>
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	a4 e3       	ldi	r26, 0x34	; 52
    1dc0:	b2 e4       	ldi	r27, 0x42	; 66
    1dc2:	8b af       	std	Y+59, r24	; 0x3b
    1dc4:	9c af       	std	Y+60, r25	; 0x3c
    1dc6:	ad af       	std	Y+61, r26	; 0x3d
    1dc8:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1dca:	6b ad       	ldd	r22, Y+59	; 0x3b
    1dcc:	7c ad       	ldd	r23, Y+60	; 0x3c
    1dce:	8d ad       	ldd	r24, Y+61	; 0x3d
    1dd0:	9e ad       	ldd	r25, Y+62	; 0x3e
    1dd2:	2b ea       	ldi	r18, 0xAB	; 171
    1dd4:	3a ea       	ldi	r19, 0xAA	; 170
    1dd6:	4a ea       	ldi	r20, 0xAA	; 170
    1dd8:	50 e4       	ldi	r21, 0x40	; 64
    1dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	8f ab       	std	Y+55, r24	; 0x37
    1de4:	98 af       	std	Y+56, r25	; 0x38
    1de6:	a9 af       	std	Y+57, r26	; 0x39
    1de8:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1dea:	6f a9       	ldd	r22, Y+55	; 0x37
    1dec:	78 ad       	ldd	r23, Y+56	; 0x38
    1dee:	89 ad       	ldd	r24, Y+57	; 0x39
    1df0:	9a ad       	ldd	r25, Y+58	; 0x3a
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	40 e8       	ldi	r20, 0x80	; 128
    1df8:	5f e3       	ldi	r21, 0x3F	; 63
    1dfa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dfe:	88 23       	and	r24, r24
    1e00:	1c f4       	brge	.+6      	; 0x1e08 <LCD_VInit+0x1d8>
		__ticks = 1;
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	8e ab       	std	Y+54, r24	; 0x36
    1e06:	91 c0       	rjmp	.+290    	; 0x1f2a <LCD_VInit+0x2fa>
	else if (__tmp > 255)
    1e08:	6f a9       	ldd	r22, Y+55	; 0x37
    1e0a:	78 ad       	ldd	r23, Y+56	; 0x38
    1e0c:	89 ad       	ldd	r24, Y+57	; 0x39
    1e0e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	4f e7       	ldi	r20, 0x7F	; 127
    1e16:	53 e4       	ldi	r21, 0x43	; 67
    1e18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e1c:	18 16       	cp	r1, r24
    1e1e:	0c f0       	brlt	.+2      	; 0x1e22 <LCD_VInit+0x1f2>
    1e20:	7b c0       	rjmp	.+246    	; 0x1f18 <LCD_VInit+0x2e8>
	{
		_delay_ms(__us / 1000.0);
    1e22:	6b ad       	ldd	r22, Y+59	; 0x3b
    1e24:	7c ad       	ldd	r23, Y+60	; 0x3c
    1e26:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e28:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	4a e7       	ldi	r20, 0x7A	; 122
    1e30:	54 e4       	ldi	r21, 0x44	; 68
    1e32:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	8a ab       	std	Y+50, r24	; 0x32
    1e3c:	9b ab       	std	Y+51, r25	; 0x33
    1e3e:	ac ab       	std	Y+52, r26	; 0x34
    1e40:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e42:	6a a9       	ldd	r22, Y+50	; 0x32
    1e44:	7b a9       	ldd	r23, Y+51	; 0x33
    1e46:	8c a9       	ldd	r24, Y+52	; 0x34
    1e48:	9d a9       	ldd	r25, Y+53	; 0x35
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	4a e7       	ldi	r20, 0x7A	; 122
    1e50:	55 e4       	ldi	r21, 0x45	; 69
    1e52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	8e a7       	std	Y+46, r24	; 0x2e
    1e5c:	9f a7       	std	Y+47, r25	; 0x2f
    1e5e:	a8 ab       	std	Y+48, r26	; 0x30
    1e60:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1e62:	6e a5       	ldd	r22, Y+46	; 0x2e
    1e64:	7f a5       	ldd	r23, Y+47	; 0x2f
    1e66:	88 a9       	ldd	r24, Y+48	; 0x30
    1e68:	99 a9       	ldd	r25, Y+49	; 0x31
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	40 e8       	ldi	r20, 0x80	; 128
    1e70:	5f e3       	ldi	r21, 0x3F	; 63
    1e72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e76:	88 23       	and	r24, r24
    1e78:	2c f4       	brge	.+10     	; 0x1e84 <LCD_VInit+0x254>
		__ticks = 1;
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	9d a7       	std	Y+45, r25	; 0x2d
    1e80:	8c a7       	std	Y+44, r24	; 0x2c
    1e82:	3f c0       	rjmp	.+126    	; 0x1f02 <LCD_VInit+0x2d2>
	else if (__tmp > 65535)
    1e84:	6e a5       	ldd	r22, Y+46	; 0x2e
    1e86:	7f a5       	ldd	r23, Y+47	; 0x2f
    1e88:	88 a9       	ldd	r24, Y+48	; 0x30
    1e8a:	99 a9       	ldd	r25, Y+49	; 0x31
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	3f ef       	ldi	r19, 0xFF	; 255
    1e90:	4f e7       	ldi	r20, 0x7F	; 127
    1e92:	57 e4       	ldi	r21, 0x47	; 71
    1e94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e98:	18 16       	cp	r1, r24
    1e9a:	4c f5       	brge	.+82     	; 0x1eee <LCD_VInit+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e9c:	6a a9       	ldd	r22, Y+50	; 0x32
    1e9e:	7b a9       	ldd	r23, Y+51	; 0x33
    1ea0:	8c a9       	ldd	r24, Y+52	; 0x34
    1ea2:	9d a9       	ldd	r25, Y+53	; 0x35
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	40 e2       	ldi	r20, 0x20	; 32
    1eaa:	51 e4       	ldi	r21, 0x41	; 65
    1eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	bc 01       	movw	r22, r24
    1eb6:	cd 01       	movw	r24, r26
    1eb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	9d a7       	std	Y+45, r25	; 0x2d
    1ec2:	8c a7       	std	Y+44, r24	; 0x2c
    1ec4:	0f c0       	rjmp	.+30     	; 0x1ee4 <LCD_VInit+0x2b4>
    1ec6:	80 e9       	ldi	r24, 0x90	; 144
    1ec8:	91 e0       	ldi	r25, 0x01	; 1
    1eca:	9b a7       	std	Y+43, r25	; 0x2b
    1ecc:	8a a7       	std	Y+42, r24	; 0x2a
    1ece:	8a a5       	ldd	r24, Y+42	; 0x2a
    1ed0:	9b a5       	ldd	r25, Y+43	; 0x2b
    1ed2:	01 97       	sbiw	r24, 0x01	; 1
    1ed4:	f1 f7       	brne	.-4      	; 0x1ed2 <LCD_VInit+0x2a2>
    1ed6:	9b a7       	std	Y+43, r25	; 0x2b
    1ed8:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eda:	8c a5       	ldd	r24, Y+44	; 0x2c
    1edc:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ede:	01 97       	sbiw	r24, 0x01	; 1
    1ee0:	9d a7       	std	Y+45, r25	; 0x2d
    1ee2:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee4:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ee6:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ee8:	00 97       	sbiw	r24, 0x00	; 0
    1eea:	69 f7       	brne	.-38     	; 0x1ec6 <LCD_VInit+0x296>
    1eec:	24 c0       	rjmp	.+72     	; 0x1f36 <LCD_VInit+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eee:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ef0:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ef2:	88 a9       	ldd	r24, Y+48	; 0x30
    1ef4:	99 a9       	ldd	r25, Y+49	; 0x31
    1ef6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	9d a7       	std	Y+45, r25	; 0x2d
    1f00:	8c a7       	std	Y+44, r24	; 0x2c
    1f02:	8c a5       	ldd	r24, Y+44	; 0x2c
    1f04:	9d a5       	ldd	r25, Y+45	; 0x2d
    1f06:	99 a7       	std	Y+41, r25	; 0x29
    1f08:	88 a7       	std	Y+40, r24	; 0x28
    1f0a:	88 a5       	ldd	r24, Y+40	; 0x28
    1f0c:	99 a5       	ldd	r25, Y+41	; 0x29
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	f1 f7       	brne	.-4      	; 0x1f0e <LCD_VInit+0x2de>
    1f12:	99 a7       	std	Y+41, r25	; 0x29
    1f14:	88 a7       	std	Y+40, r24	; 0x28
    1f16:	0f c0       	rjmp	.+30     	; 0x1f36 <LCD_VInit+0x306>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f18:	6f a9       	ldd	r22, Y+55	; 0x37
    1f1a:	78 ad       	ldd	r23, Y+56	; 0x38
    1f1c:	89 ad       	ldd	r24, Y+57	; 0x39
    1f1e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	8e ab       	std	Y+54, r24	; 0x36
    1f2a:	8e a9       	ldd	r24, Y+54	; 0x36
    1f2c:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f2e:	8f a1       	ldd	r24, Y+39	; 0x27
    1f30:	8a 95       	dec	r24
    1f32:	f1 f7       	brne	.-4      	; 0x1f30 <LCD_VInit+0x300>
    1f34:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(45);
	LCD_VSendCmnd(LCD_Display_Control);
    1f36:	8f e0       	ldi	r24, 0x0F	; 15
    1f38:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_VSendCmnd>
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	a4 e3       	ldi	r26, 0x34	; 52
    1f42:	b2 e4       	ldi	r27, 0x42	; 66
    1f44:	8b a3       	std	Y+35, r24	; 0x23
    1f46:	9c a3       	std	Y+36, r25	; 0x24
    1f48:	ad a3       	std	Y+37, r26	; 0x25
    1f4a:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f4c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f4e:	7c a1       	ldd	r23, Y+36	; 0x24
    1f50:	8d a1       	ldd	r24, Y+37	; 0x25
    1f52:	9e a1       	ldd	r25, Y+38	; 0x26
    1f54:	2b ea       	ldi	r18, 0xAB	; 171
    1f56:	3a ea       	ldi	r19, 0xAA	; 170
    1f58:	4a ea       	ldi	r20, 0xAA	; 170
    1f5a:	50 e4       	ldi	r21, 0x40	; 64
    1f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	8f 8f       	std	Y+31, r24	; 0x1f
    1f66:	98 a3       	std	Y+32, r25	; 0x20
    1f68:	a9 a3       	std	Y+33, r26	; 0x21
    1f6a:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1f6c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1f6e:	78 a1       	ldd	r23, Y+32	; 0x20
    1f70:	89 a1       	ldd	r24, Y+33	; 0x21
    1f72:	9a a1       	ldd	r25, Y+34	; 0x22
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	40 e8       	ldi	r20, 0x80	; 128
    1f7a:	5f e3       	ldi	r21, 0x3F	; 63
    1f7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f80:	88 23       	and	r24, r24
    1f82:	1c f4       	brge	.+6      	; 0x1f8a <LCD_VInit+0x35a>
		__ticks = 1;
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	8e 8f       	std	Y+30, r24	; 0x1e
    1f88:	91 c0       	rjmp	.+290    	; 0x20ac <LCD_VInit+0x47c>
	else if (__tmp > 255)
    1f8a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1f8c:	78 a1       	ldd	r23, Y+32	; 0x20
    1f8e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f90:	9a a1       	ldd	r25, Y+34	; 0x22
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	4f e7       	ldi	r20, 0x7F	; 127
    1f98:	53 e4       	ldi	r21, 0x43	; 67
    1f9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f9e:	18 16       	cp	r1, r24
    1fa0:	0c f0       	brlt	.+2      	; 0x1fa4 <LCD_VInit+0x374>
    1fa2:	7b c0       	rjmp	.+246    	; 0x209a <LCD_VInit+0x46a>
	{
		_delay_ms(__us / 1000.0);
    1fa4:	6b a1       	ldd	r22, Y+35	; 0x23
    1fa6:	7c a1       	ldd	r23, Y+36	; 0x24
    1fa8:	8d a1       	ldd	r24, Y+37	; 0x25
    1faa:	9e a1       	ldd	r25, Y+38	; 0x26
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	4a e7       	ldi	r20, 0x7A	; 122
    1fb2:	54 e4       	ldi	r21, 0x44	; 68
    1fb4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	8a 8f       	std	Y+26, r24	; 0x1a
    1fbe:	9b 8f       	std	Y+27, r25	; 0x1b
    1fc0:	ac 8f       	std	Y+28, r26	; 0x1c
    1fc2:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1fc6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1fc8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1fca:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	4a e7       	ldi	r20, 0x7A	; 122
    1fd2:	55 e4       	ldi	r21, 0x45	; 69
    1fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	8e 8b       	std	Y+22, r24	; 0x16
    1fde:	9f 8b       	std	Y+23, r25	; 0x17
    1fe0:	a8 8f       	std	Y+24, r26	; 0x18
    1fe2:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1fe4:	6e 89       	ldd	r22, Y+22	; 0x16
    1fe6:	7f 89       	ldd	r23, Y+23	; 0x17
    1fe8:	88 8d       	ldd	r24, Y+24	; 0x18
    1fea:	99 8d       	ldd	r25, Y+25	; 0x19
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	40 e8       	ldi	r20, 0x80	; 128
    1ff2:	5f e3       	ldi	r21, 0x3F	; 63
    1ff4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ff8:	88 23       	and	r24, r24
    1ffa:	2c f4       	brge	.+10     	; 0x2006 <LCD_VInit+0x3d6>
		__ticks = 1;
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	9d 8b       	std	Y+21, r25	; 0x15
    2002:	8c 8b       	std	Y+20, r24	; 0x14
    2004:	3f c0       	rjmp	.+126    	; 0x2084 <LCD_VInit+0x454>
	else if (__tmp > 65535)
    2006:	6e 89       	ldd	r22, Y+22	; 0x16
    2008:	7f 89       	ldd	r23, Y+23	; 0x17
    200a:	88 8d       	ldd	r24, Y+24	; 0x18
    200c:	99 8d       	ldd	r25, Y+25	; 0x19
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	3f ef       	ldi	r19, 0xFF	; 255
    2012:	4f e7       	ldi	r20, 0x7F	; 127
    2014:	57 e4       	ldi	r21, 0x47	; 71
    2016:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    201a:	18 16       	cp	r1, r24
    201c:	4c f5       	brge	.+82     	; 0x2070 <LCD_VInit+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    201e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2020:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2022:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2024:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	40 e2       	ldi	r20, 0x20	; 32
    202c:	51 e4       	ldi	r21, 0x41	; 65
    202e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	bc 01       	movw	r22, r24
    2038:	cd 01       	movw	r24, r26
    203a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    2042:	9d 8b       	std	Y+21, r25	; 0x15
    2044:	8c 8b       	std	Y+20, r24	; 0x14
    2046:	0f c0       	rjmp	.+30     	; 0x2066 <LCD_VInit+0x436>
    2048:	80 e9       	ldi	r24, 0x90	; 144
    204a:	91 e0       	ldi	r25, 0x01	; 1
    204c:	9b 8b       	std	Y+19, r25	; 0x13
    204e:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2050:	8a 89       	ldd	r24, Y+18	; 0x12
    2052:	9b 89       	ldd	r25, Y+19	; 0x13
    2054:	01 97       	sbiw	r24, 0x01	; 1
    2056:	f1 f7       	brne	.-4      	; 0x2054 <LCD_VInit+0x424>
    2058:	9b 8b       	std	Y+19, r25	; 0x13
    205a:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    205c:	8c 89       	ldd	r24, Y+20	; 0x14
    205e:	9d 89       	ldd	r25, Y+21	; 0x15
    2060:	01 97       	sbiw	r24, 0x01	; 1
    2062:	9d 8b       	std	Y+21, r25	; 0x15
    2064:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2066:	8c 89       	ldd	r24, Y+20	; 0x14
    2068:	9d 89       	ldd	r25, Y+21	; 0x15
    206a:	00 97       	sbiw	r24, 0x00	; 0
    206c:	69 f7       	brne	.-38     	; 0x2048 <LCD_VInit+0x418>
    206e:	24 c0       	rjmp	.+72     	; 0x20b8 <LCD_VInit+0x488>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2070:	6e 89       	ldd	r22, Y+22	; 0x16
    2072:	7f 89       	ldd	r23, Y+23	; 0x17
    2074:	88 8d       	ldd	r24, Y+24	; 0x18
    2076:	99 8d       	ldd	r25, Y+25	; 0x19
    2078:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	9d 8b       	std	Y+21, r25	; 0x15
    2082:	8c 8b       	std	Y+20, r24	; 0x14
    2084:	8c 89       	ldd	r24, Y+20	; 0x14
    2086:	9d 89       	ldd	r25, Y+21	; 0x15
    2088:	99 8b       	std	Y+17, r25	; 0x11
    208a:	88 8b       	std	Y+16, r24	; 0x10
    208c:	88 89       	ldd	r24, Y+16	; 0x10
    208e:	99 89       	ldd	r25, Y+17	; 0x11
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	f1 f7       	brne	.-4      	; 0x2090 <LCD_VInit+0x460>
    2094:	99 8b       	std	Y+17, r25	; 0x11
    2096:	88 8b       	std	Y+16, r24	; 0x10
    2098:	0f c0       	rjmp	.+30     	; 0x20b8 <LCD_VInit+0x488>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    209a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    209c:	78 a1       	ldd	r23, Y+32	; 0x20
    209e:	89 a1       	ldd	r24, Y+33	; 0x21
    20a0:	9a a1       	ldd	r25, Y+34	; 0x22
    20a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	8e 8f       	std	Y+30, r24	; 0x1e
    20ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20ae:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    20b2:	8a 95       	dec	r24
    20b4:	f1 f7       	brne	.-4      	; 0x20b2 <LCD_VInit+0x482>
    20b6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(45);
	LCD_VSendCmnd(LCD_Display_Clear);
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_VSendCmnd>
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	a0 e0       	ldi	r26, 0x00	; 0
    20c4:	b0 e4       	ldi	r27, 0x40	; 64
    20c6:	8b 87       	std	Y+11, r24	; 0x0b
    20c8:	9c 87       	std	Y+12, r25	; 0x0c
    20ca:	ad 87       	std	Y+13, r26	; 0x0d
    20cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    20d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    20d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	4a e7       	ldi	r20, 0x7A	; 122
    20dc:	55 e4       	ldi	r21, 0x45	; 69
    20de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	8f 83       	std	Y+7, r24	; 0x07
    20e8:	98 87       	std	Y+8, r25	; 0x08
    20ea:	a9 87       	std	Y+9, r26	; 0x09
    20ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20ee:	6f 81       	ldd	r22, Y+7	; 0x07
    20f0:	78 85       	ldd	r23, Y+8	; 0x08
    20f2:	89 85       	ldd	r24, Y+9	; 0x09
    20f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	40 e8       	ldi	r20, 0x80	; 128
    20fc:	5f e3       	ldi	r21, 0x3F	; 63
    20fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2102:	88 23       	and	r24, r24
    2104:	2c f4       	brge	.+10     	; 0x2110 <LCD_VInit+0x4e0>
		__ticks = 1;
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	9e 83       	std	Y+6, r25	; 0x06
    210c:	8d 83       	std	Y+5, r24	; 0x05
    210e:	3f c0       	rjmp	.+126    	; 0x218e <LCD_VInit+0x55e>
	else if (__tmp > 65535)
    2110:	6f 81       	ldd	r22, Y+7	; 0x07
    2112:	78 85       	ldd	r23, Y+8	; 0x08
    2114:	89 85       	ldd	r24, Y+9	; 0x09
    2116:	9a 85       	ldd	r25, Y+10	; 0x0a
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	3f ef       	ldi	r19, 0xFF	; 255
    211c:	4f e7       	ldi	r20, 0x7F	; 127
    211e:	57 e4       	ldi	r21, 0x47	; 71
    2120:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2124:	18 16       	cp	r1, r24
    2126:	4c f5       	brge	.+82     	; 0x217a <LCD_VInit+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2128:	6b 85       	ldd	r22, Y+11	; 0x0b
    212a:	7c 85       	ldd	r23, Y+12	; 0x0c
    212c:	8d 85       	ldd	r24, Y+13	; 0x0d
    212e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e2       	ldi	r20, 0x20	; 32
    2136:	51 e4       	ldi	r21, 0x41	; 65
    2138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	bc 01       	movw	r22, r24
    2142:	cd 01       	movw	r24, r26
    2144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	9e 83       	std	Y+6, r25	; 0x06
    214e:	8d 83       	std	Y+5, r24	; 0x05
    2150:	0f c0       	rjmp	.+30     	; 0x2170 <LCD_VInit+0x540>
    2152:	80 e9       	ldi	r24, 0x90	; 144
    2154:	91 e0       	ldi	r25, 0x01	; 1
    2156:	9c 83       	std	Y+4, r25	; 0x04
    2158:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    215a:	8b 81       	ldd	r24, Y+3	; 0x03
    215c:	9c 81       	ldd	r25, Y+4	; 0x04
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	f1 f7       	brne	.-4      	; 0x215e <LCD_VInit+0x52e>
    2162:	9c 83       	std	Y+4, r25	; 0x04
    2164:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2166:	8d 81       	ldd	r24, Y+5	; 0x05
    2168:	9e 81       	ldd	r25, Y+6	; 0x06
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	9e 83       	std	Y+6, r25	; 0x06
    216e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2170:	8d 81       	ldd	r24, Y+5	; 0x05
    2172:	9e 81       	ldd	r25, Y+6	; 0x06
    2174:	00 97       	sbiw	r24, 0x00	; 0
    2176:	69 f7       	brne	.-38     	; 0x2152 <LCD_VInit+0x522>
    2178:	14 c0       	rjmp	.+40     	; 0x21a2 <LCD_VInit+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    217a:	6f 81       	ldd	r22, Y+7	; 0x07
    217c:	78 85       	ldd	r23, Y+8	; 0x08
    217e:	89 85       	ldd	r24, Y+9	; 0x09
    2180:	9a 85       	ldd	r25, Y+10	; 0x0a
    2182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	9e 83       	std	Y+6, r25	; 0x06
    218c:	8d 83       	std	Y+5, r24	; 0x05
    218e:	8d 81       	ldd	r24, Y+5	; 0x05
    2190:	9e 81       	ldd	r25, Y+6	; 0x06
    2192:	9a 83       	std	Y+2, r25	; 0x02
    2194:	89 83       	std	Y+1, r24	; 0x01
    2196:	89 81       	ldd	r24, Y+1	; 0x01
    2198:	9a 81       	ldd	r25, Y+2	; 0x02
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	f1 f7       	brne	.-4      	; 0x219a <LCD_VInit+0x56a>
    219e:	9a 83       	std	Y+2, r25	; 0x02
    21a0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_VSendCmnd(LCD_Entry_Mode);
    21a2:	86 e0       	ldi	r24, 0x06	; 6
    21a4:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_VSendCmnd>

}
    21a8:	c4 5b       	subi	r28, 0xB4	; 180
    21aa:	df 4f       	sbci	r29, 0xFF	; 255
    21ac:	0f b6       	in	r0, 0x3f	; 63
    21ae:	f8 94       	cli
    21b0:	de bf       	out	0x3e, r29	; 62
    21b2:	0f be       	out	0x3f, r0	; 63
    21b4:	cd bf       	out	0x3d, r28	; 61
    21b6:	cf 91       	pop	r28
    21b8:	df 91       	pop	r29
    21ba:	1f 91       	pop	r17
    21bc:	0f 91       	pop	r16
    21be:	08 95       	ret

000021c0 <LCD_VSendCmnd>:

void LCD_VSendCmnd (UINT8 Cmnd){
    21c0:	df 93       	push	r29
    21c2:	cf 93       	push	r28
    21c4:	0f 92       	push	r0
    21c6:	cd b7       	in	r28, 0x3d	; 61
    21c8:	de b7       	in	r29, 0x3e	; 62
    21ca:	89 83       	std	Y+1, r24	; 0x01

	Dio_WriteChannel(LCD_Rs , LOW);
    21cc:	83 e0       	ldi	r24, 0x03	; 3
    21ce:	60 e0       	ldi	r22, 0x00	; 0
    21d0:	0e 94 67 0a 	call	0x14ce	; 0x14ce <Dio_WriteChannel>
	Private_VWriteHalfPort(Cmnd>>4);
    21d4:	89 81       	ldd	r24, Y+1	; 0x01
    21d6:	82 95       	swap	r24
    21d8:	8f 70       	andi	r24, 0x0F	; 15
    21da:	0e 94 28 12 	call	0x2450	; 0x2450 <Private_VWriteHalfPort>
	Private_VEnable();
    21de:	0e 94 54 12 	call	0x24a8	; 0x24a8 <Private_VEnable>
	Private_VWriteHalfPort(Cmnd);
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	0e 94 28 12 	call	0x2450	; 0x2450 <Private_VWriteHalfPort>
	Private_VEnable();
    21e8:	0e 94 54 12 	call	0x24a8	; 0x24a8 <Private_VEnable>

}
    21ec:	0f 90       	pop	r0
    21ee:	cf 91       	pop	r28
    21f0:	df 91       	pop	r29
    21f2:	08 95       	ret

000021f4 <LCD_VSendChar>:

void LCD_VSendChar (UINT8 Data){
    21f4:	df 93       	push	r29
    21f6:	cf 93       	push	r28
    21f8:	0f 92       	push	r0
    21fa:	cd b7       	in	r28, 0x3d	; 61
    21fc:	de b7       	in	r29, 0x3e	; 62
    21fe:	89 83       	std	Y+1, r24	; 0x01

	Dio_WriteChannel(LCD_Rs , HIGH);
    2200:	83 e0       	ldi	r24, 0x03	; 3
    2202:	61 e0       	ldi	r22, 0x01	; 1
    2204:	0e 94 67 0a 	call	0x14ce	; 0x14ce <Dio_WriteChannel>
	Private_VWriteHalfPort(Data>>4);
    2208:	89 81       	ldd	r24, Y+1	; 0x01
    220a:	82 95       	swap	r24
    220c:	8f 70       	andi	r24, 0x0F	; 15
    220e:	0e 94 28 12 	call	0x2450	; 0x2450 <Private_VWriteHalfPort>
	Private_VEnable();
    2212:	0e 94 54 12 	call	0x24a8	; 0x24a8 <Private_VEnable>
	Private_VWriteHalfPort(Data);
    2216:	89 81       	ldd	r24, Y+1	; 0x01
    2218:	0e 94 28 12 	call	0x2450	; 0x2450 <Private_VWriteHalfPort>
	Private_VEnable();
    221c:	0e 94 54 12 	call	0x24a8	; 0x24a8 <Private_VEnable>

}
    2220:	0f 90       	pop	r0
    2222:	cf 91       	pop	r28
    2224:	df 91       	pop	r29
    2226:	08 95       	ret

00002228 <LCD_VSendString>:

void LCD_VSendString (UINT8 *arr){
    2228:	df 93       	push	r29
    222a:	cf 93       	push	r28
    222c:	00 d0       	rcall	.+0      	; 0x222e <LCD_VSendString+0x6>
    222e:	0f 92       	push	r0
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
    2234:	9b 83       	std	Y+3, r25	; 0x03
    2236:	8a 83       	std	Y+2, r24	; 0x02
	UINT8 i = 0;
    2238:	19 82       	std	Y+1, r1	; 0x01
    223a:	0e c0       	rjmp	.+28     	; 0x2258 <LCD_VSendString+0x30>
	while(arr[i] != '\0'){
		LCD_VSendChar (arr[i]);
    223c:	89 81       	ldd	r24, Y+1	; 0x01
    223e:	28 2f       	mov	r18, r24
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	8a 81       	ldd	r24, Y+2	; 0x02
    2244:	9b 81       	ldd	r25, Y+3	; 0x03
    2246:	fc 01       	movw	r30, r24
    2248:	e2 0f       	add	r30, r18
    224a:	f3 1f       	adc	r31, r19
    224c:	80 81       	ld	r24, Z
    224e:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <LCD_VSendChar>
		i++;
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	8f 5f       	subi	r24, 0xFF	; 255
    2256:	89 83       	std	Y+1, r24	; 0x01

}

void LCD_VSendString (UINT8 *arr){
	UINT8 i = 0;
	while(arr[i] != '\0'){
    2258:	89 81       	ldd	r24, Y+1	; 0x01
    225a:	28 2f       	mov	r18, r24
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	8a 81       	ldd	r24, Y+2	; 0x02
    2260:	9b 81       	ldd	r25, Y+3	; 0x03
    2262:	fc 01       	movw	r30, r24
    2264:	e2 0f       	add	r30, r18
    2266:	f3 1f       	adc	r31, r19
    2268:	80 81       	ld	r24, Z
    226a:	88 23       	and	r24, r24
    226c:	39 f7       	brne	.-50     	; 0x223c <LCD_VSendString+0x14>
		LCD_VSendChar (arr[i]);
		i++;
	}
}
    226e:	0f 90       	pop	r0
    2270:	0f 90       	pop	r0
    2272:	0f 90       	pop	r0
    2274:	cf 91       	pop	r28
    2276:	df 91       	pop	r29
    2278:	08 95       	ret

0000227a <LCD_VGoToRowCol>:

void LCD_VGoToRowCol(UINT8 row, UINT8 col){
    227a:	df 93       	push	r29
    227c:	cf 93       	push	r28
    227e:	00 d0       	rcall	.+0      	; 0x2280 <LCD_VGoToRowCol+0x6>
    2280:	00 d0       	rcall	.+0      	; 0x2282 <LCD_VGoToRowCol+0x8>
    2282:	0f 92       	push	r0
    2284:	cd b7       	in	r28, 0x3d	; 61
    2286:	de b7       	in	r29, 0x3e	; 62
    2288:	8a 83       	std	Y+2, r24	; 0x02
    228a:	6b 83       	std	Y+3, r22	; 0x03

	UINT8 address;
		switch (row)
    228c:	8a 81       	ldd	r24, Y+2	; 0x02
    228e:	28 2f       	mov	r18, r24
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	3d 83       	std	Y+5, r19	; 0x05
    2294:	2c 83       	std	Y+4, r18	; 0x04
    2296:	8c 81       	ldd	r24, Y+4	; 0x04
    2298:	9d 81       	ldd	r25, Y+5	; 0x05
    229a:	81 30       	cpi	r24, 0x01	; 1
    229c:	91 05       	cpc	r25, r1
    229e:	c1 f0       	breq	.+48     	; 0x22d0 <LCD_VGoToRowCol+0x56>
    22a0:	2c 81       	ldd	r18, Y+4	; 0x04
    22a2:	3d 81       	ldd	r19, Y+5	; 0x05
    22a4:	22 30       	cpi	r18, 0x02	; 2
    22a6:	31 05       	cpc	r19, r1
    22a8:	2c f4       	brge	.+10     	; 0x22b4 <LCD_VGoToRowCol+0x3a>
    22aa:	8c 81       	ldd	r24, Y+4	; 0x04
    22ac:	9d 81       	ldd	r25, Y+5	; 0x05
    22ae:	00 97       	sbiw	r24, 0x00	; 0
    22b0:	61 f0       	breq	.+24     	; 0x22ca <LCD_VGoToRowCol+0x50>
    22b2:	19 c0       	rjmp	.+50     	; 0x22e6 <LCD_VGoToRowCol+0x6c>
    22b4:	2c 81       	ldd	r18, Y+4	; 0x04
    22b6:	3d 81       	ldd	r19, Y+5	; 0x05
    22b8:	22 30       	cpi	r18, 0x02	; 2
    22ba:	31 05       	cpc	r19, r1
    22bc:	69 f0       	breq	.+26     	; 0x22d8 <LCD_VGoToRowCol+0x5e>
    22be:	8c 81       	ldd	r24, Y+4	; 0x04
    22c0:	9d 81       	ldd	r25, Y+5	; 0x05
    22c2:	83 30       	cpi	r24, 0x03	; 3
    22c4:	91 05       	cpc	r25, r1
    22c6:	61 f0       	breq	.+24     	; 0x22e0 <LCD_VGoToRowCol+0x66>
    22c8:	0e c0       	rjmp	.+28     	; 0x22e6 <LCD_VGoToRowCol+0x6c>
		{
			case 0:
				address = col;
    22ca:	8b 81       	ldd	r24, Y+3	; 0x03
    22cc:	89 83       	std	Y+1, r24	; 0x01
    22ce:	0b c0       	rjmp	.+22     	; 0x22e6 <LCD_VGoToRowCol+0x6c>
				break;
			case 1:
				address = col + 0x40;
    22d0:	8b 81       	ldd	r24, Y+3	; 0x03
    22d2:	80 5c       	subi	r24, 0xC0	; 192
    22d4:	89 83       	std	Y+1, r24	; 0x01
    22d6:	07 c0       	rjmp	.+14     	; 0x22e6 <LCD_VGoToRowCol+0x6c>
				break;
			case 2:
				address = col + 0x14;
    22d8:	8b 81       	ldd	r24, Y+3	; 0x03
    22da:	8c 5e       	subi	r24, 0xEC	; 236
    22dc:	89 83       	std	Y+1, r24	; 0x01
    22de:	03 c0       	rjmp	.+6      	; 0x22e6 <LCD_VGoToRowCol+0x6c>
				break;
			case 3:
				address = col + 0x54;
    22e0:	8b 81       	ldd	r24, Y+3	; 0x03
    22e2:	8c 5a       	subi	r24, 0xAC	; 172
    22e4:	89 83       	std	Y+1, r24	; 0x01
				break;

		}
		LCD_VSendCmnd(address | SET_CURSOR_LOCATION);
    22e6:	89 81       	ldd	r24, Y+1	; 0x01
    22e8:	80 68       	ori	r24, 0x80	; 128
    22ea:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_VSendCmnd>
}
    22ee:	0f 90       	pop	r0
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	cf 91       	pop	r28
    22fa:	df 91       	pop	r29
    22fc:	08 95       	ret

000022fe <LCD_VIntegerToString>:

void LCD_VIntegerToString(UINT16 data){
    22fe:	df 93       	push	r29
    2300:	cf 93       	push	r28
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    2306:	62 97       	sbiw	r28, 0x12	; 18
    2308:	0f b6       	in	r0, 0x3f	; 63
    230a:	f8 94       	cli
    230c:	de bf       	out	0x3e, r29	; 62
    230e:	0f be       	out	0x3f, r0	; 63
    2310:	cd bf       	out	0x3d, r28	; 61
    2312:	9a 8b       	std	Y+18, r25	; 0x12
    2314:	89 8b       	std	Y+17, r24	; 0x11

	UINT8 BUFF[16];
	//itoa(data,BUFF,10);
	Private_VintToStr(data,BUFF);
    2316:	89 89       	ldd	r24, Y+17	; 0x11
    2318:	9a 89       	ldd	r25, Y+18	; 0x12
    231a:	9e 01       	movw	r18, r28
    231c:	2f 5f       	subi	r18, 0xFF	; 255
    231e:	3f 4f       	sbci	r19, 0xFF	; 255
    2320:	b9 01       	movw	r22, r18
    2322:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <Private_VintToStr>
	LCD_VSendString(BUFF);
    2326:	ce 01       	movw	r24, r28
    2328:	01 96       	adiw	r24, 0x01	; 1
    232a:	0e 94 14 11 	call	0x2228	; 0x2228 <LCD_VSendString>

}
    232e:	62 96       	adiw	r28, 0x12	; 18
    2330:	0f b6       	in	r0, 0x3f	; 63
    2332:	f8 94       	cli
    2334:	de bf       	out	0x3e, r29	; 62
    2336:	0f be       	out	0x3f, r0	; 63
    2338:	cd bf       	out	0x3d, r28	; 61
    233a:	cf 91       	pop	r28
    233c:	df 91       	pop	r29
    233e:	08 95       	ret

00002340 <LCD_VClearScreen>:

void LCD_VClearScreen(){
    2340:	df 93       	push	r29
    2342:	cf 93       	push	r28
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
    2348:	2e 97       	sbiw	r28, 0x0e	; 14
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	f8 94       	cli
    234e:	de bf       	out	0x3e, r29	; 62
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	cd bf       	out	0x3d, r28	; 61
	LCD_VSendCmnd(LCD_Display_Clear);
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_VSendCmnd>
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	a0 e0       	ldi	r26, 0x00	; 0
    2360:	b0 e4       	ldi	r27, 0x40	; 64
    2362:	8b 87       	std	Y+11, r24	; 0x0b
    2364:	9c 87       	std	Y+12, r25	; 0x0c
    2366:	ad 87       	std	Y+13, r26	; 0x0d
    2368:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    236a:	6b 85       	ldd	r22, Y+11	; 0x0b
    236c:	7c 85       	ldd	r23, Y+12	; 0x0c
    236e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2370:	9e 85       	ldd	r25, Y+14	; 0x0e
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	4a e7       	ldi	r20, 0x7A	; 122
    2378:	55 e4       	ldi	r21, 0x45	; 69
    237a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	8f 83       	std	Y+7, r24	; 0x07
    2384:	98 87       	std	Y+8, r25	; 0x08
    2386:	a9 87       	std	Y+9, r26	; 0x09
    2388:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    238a:	6f 81       	ldd	r22, Y+7	; 0x07
    238c:	78 85       	ldd	r23, Y+8	; 0x08
    238e:	89 85       	ldd	r24, Y+9	; 0x09
    2390:	9a 85       	ldd	r25, Y+10	; 0x0a
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	40 e8       	ldi	r20, 0x80	; 128
    2398:	5f e3       	ldi	r21, 0x3F	; 63
    239a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    239e:	88 23       	and	r24, r24
    23a0:	2c f4       	brge	.+10     	; 0x23ac <LCD_VClearScreen+0x6c>
		__ticks = 1;
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	9e 83       	std	Y+6, r25	; 0x06
    23a8:	8d 83       	std	Y+5, r24	; 0x05
    23aa:	3f c0       	rjmp	.+126    	; 0x242a <LCD_VClearScreen+0xea>
	else if (__tmp > 65535)
    23ac:	6f 81       	ldd	r22, Y+7	; 0x07
    23ae:	78 85       	ldd	r23, Y+8	; 0x08
    23b0:	89 85       	ldd	r24, Y+9	; 0x09
    23b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	3f ef       	ldi	r19, 0xFF	; 255
    23b8:	4f e7       	ldi	r20, 0x7F	; 127
    23ba:	57 e4       	ldi	r21, 0x47	; 71
    23bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23c0:	18 16       	cp	r1, r24
    23c2:	4c f5       	brge	.+82     	; 0x2416 <LCD_VClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    23c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    23c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	40 e2       	ldi	r20, 0x20	; 32
    23d2:	51 e4       	ldi	r21, 0x41	; 65
    23d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	bc 01       	movw	r22, r24
    23de:	cd 01       	movw	r24, r26
    23e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	9e 83       	std	Y+6, r25	; 0x06
    23ea:	8d 83       	std	Y+5, r24	; 0x05
    23ec:	0f c0       	rjmp	.+30     	; 0x240c <LCD_VClearScreen+0xcc>
    23ee:	80 e9       	ldi	r24, 0x90	; 144
    23f0:	91 e0       	ldi	r25, 0x01	; 1
    23f2:	9c 83       	std	Y+4, r25	; 0x04
    23f4:	8b 83       	std	Y+3, r24	; 0x03
    23f6:	8b 81       	ldd	r24, Y+3	; 0x03
    23f8:	9c 81       	ldd	r25, Y+4	; 0x04
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	f1 f7       	brne	.-4      	; 0x23fa <LCD_VClearScreen+0xba>
    23fe:	9c 83       	std	Y+4, r25	; 0x04
    2400:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2402:	8d 81       	ldd	r24, Y+5	; 0x05
    2404:	9e 81       	ldd	r25, Y+6	; 0x06
    2406:	01 97       	sbiw	r24, 0x01	; 1
    2408:	9e 83       	std	Y+6, r25	; 0x06
    240a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    240c:	8d 81       	ldd	r24, Y+5	; 0x05
    240e:	9e 81       	ldd	r25, Y+6	; 0x06
    2410:	00 97       	sbiw	r24, 0x00	; 0
    2412:	69 f7       	brne	.-38     	; 0x23ee <LCD_VClearScreen+0xae>
    2414:	14 c0       	rjmp	.+40     	; 0x243e <LCD_VClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2416:	6f 81       	ldd	r22, Y+7	; 0x07
    2418:	78 85       	ldd	r23, Y+8	; 0x08
    241a:	89 85       	ldd	r24, Y+9	; 0x09
    241c:	9a 85       	ldd	r25, Y+10	; 0x0a
    241e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	9e 83       	std	Y+6, r25	; 0x06
    2428:	8d 83       	std	Y+5, r24	; 0x05
    242a:	8d 81       	ldd	r24, Y+5	; 0x05
    242c:	9e 81       	ldd	r25, Y+6	; 0x06
    242e:	9a 83       	std	Y+2, r25	; 0x02
    2430:	89 83       	std	Y+1, r24	; 0x01
    2432:	89 81       	ldd	r24, Y+1	; 0x01
    2434:	9a 81       	ldd	r25, Y+2	; 0x02
    2436:	01 97       	sbiw	r24, 0x01	; 1
    2438:	f1 f7       	brne	.-4      	; 0x2436 <LCD_VClearScreen+0xf6>
    243a:	9a 83       	std	Y+2, r25	; 0x02
    243c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    243e:	2e 96       	adiw	r28, 0x0e	; 14
    2440:	0f b6       	in	r0, 0x3f	; 63
    2442:	f8 94       	cli
    2444:	de bf       	out	0x3e, r29	; 62
    2446:	0f be       	out	0x3f, r0	; 63
    2448:	cd bf       	out	0x3d, r28	; 61
    244a:	cf 91       	pop	r28
    244c:	df 91       	pop	r29
    244e:	08 95       	ret

00002450 <Private_VWriteHalfPort>:

static void Private_VWriteHalfPort(UINT8 value){
    2450:	df 93       	push	r29
    2452:	cf 93       	push	r28
    2454:	0f 92       	push	r0
    2456:	cd b7       	in	r28, 0x3d	; 61
    2458:	de b7       	in	r29, 0x3e	; 62
    245a:	89 83       	std	Y+1, r24	; 0x01

	Dio_WriteChannel(LCD_D4 , READBIT(value , 0));
    245c:	89 81       	ldd	r24, Y+1	; 0x01
    245e:	98 2f       	mov	r25, r24
    2460:	91 70       	andi	r25, 0x01	; 1
    2462:	88 e0       	ldi	r24, 0x08	; 8
    2464:	69 2f       	mov	r22, r25
    2466:	0e 94 67 0a 	call	0x14ce	; 0x14ce <Dio_WriteChannel>
	Dio_WriteChannel(LCD_D5 , READBIT(value , 1));
    246a:	89 81       	ldd	r24, Y+1	; 0x01
    246c:	86 95       	lsr	r24
    246e:	98 2f       	mov	r25, r24
    2470:	91 70       	andi	r25, 0x01	; 1
    2472:	89 e0       	ldi	r24, 0x09	; 9
    2474:	69 2f       	mov	r22, r25
    2476:	0e 94 67 0a 	call	0x14ce	; 0x14ce <Dio_WriteChannel>
	Dio_WriteChannel(LCD_D6 , READBIT(value , 2));
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	86 95       	lsr	r24
    247e:	86 95       	lsr	r24
    2480:	98 2f       	mov	r25, r24
    2482:	91 70       	andi	r25, 0x01	; 1
    2484:	8a e0       	ldi	r24, 0x0A	; 10
    2486:	69 2f       	mov	r22, r25
    2488:	0e 94 67 0a 	call	0x14ce	; 0x14ce <Dio_WriteChannel>
	Dio_WriteChannel(LCD_D7 , READBIT(value , 3));
    248c:	89 81       	ldd	r24, Y+1	; 0x01
    248e:	86 95       	lsr	r24
    2490:	86 95       	lsr	r24
    2492:	86 95       	lsr	r24
    2494:	98 2f       	mov	r25, r24
    2496:	91 70       	andi	r25, 0x01	; 1
    2498:	8c e0       	ldi	r24, 0x0C	; 12
    249a:	69 2f       	mov	r22, r25
    249c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <Dio_WriteChannel>

}
    24a0:	0f 90       	pop	r0
    24a2:	cf 91       	pop	r28
    24a4:	df 91       	pop	r29
    24a6:	08 95       	ret

000024a8 <Private_VEnable>:

static void Private_VEnable(void){
    24a8:	df 93       	push	r29
    24aa:	cf 93       	push	r28
    24ac:	cd b7       	in	r28, 0x3d	; 61
    24ae:	de b7       	in	r29, 0x3e	; 62
    24b0:	2e 97       	sbiw	r28, 0x0e	; 14
    24b2:	0f b6       	in	r0, 0x3f	; 63
    24b4:	f8 94       	cli
    24b6:	de bf       	out	0x3e, r29	; 62
    24b8:	0f be       	out	0x3f, r0	; 63
    24ba:	cd bf       	out	0x3d, r28	; 61

	Dio_WriteChannel(LCD_En , HIGH);
    24bc:	82 e0       	ldi	r24, 0x02	; 2
    24be:	61 e0       	ldi	r22, 0x01	; 1
    24c0:	0e 94 67 0a 	call	0x14ce	; 0x14ce <Dio_WriteChannel>
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	a0 e8       	ldi	r26, 0x80	; 128
    24ca:	bf e3       	ldi	r27, 0x3F	; 63
    24cc:	8b 87       	std	Y+11, r24	; 0x0b
    24ce:	9c 87       	std	Y+12, r25	; 0x0c
    24d0:	ad 87       	std	Y+13, r26	; 0x0d
    24d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    24d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    24d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    24da:	9e 85       	ldd	r25, Y+14	; 0x0e
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	4a e7       	ldi	r20, 0x7A	; 122
    24e2:	55 e4       	ldi	r21, 0x45	; 69
    24e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	8f 83       	std	Y+7, r24	; 0x07
    24ee:	98 87       	std	Y+8, r25	; 0x08
    24f0:	a9 87       	std	Y+9, r26	; 0x09
    24f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24f4:	6f 81       	ldd	r22, Y+7	; 0x07
    24f6:	78 85       	ldd	r23, Y+8	; 0x08
    24f8:	89 85       	ldd	r24, Y+9	; 0x09
    24fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	40 e8       	ldi	r20, 0x80	; 128
    2502:	5f e3       	ldi	r21, 0x3F	; 63
    2504:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2508:	88 23       	and	r24, r24
    250a:	2c f4       	brge	.+10     	; 0x2516 <Private_VEnable+0x6e>
		__ticks = 1;
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	9e 83       	std	Y+6, r25	; 0x06
    2512:	8d 83       	std	Y+5, r24	; 0x05
    2514:	3f c0       	rjmp	.+126    	; 0x2594 <Private_VEnable+0xec>
	else if (__tmp > 65535)
    2516:	6f 81       	ldd	r22, Y+7	; 0x07
    2518:	78 85       	ldd	r23, Y+8	; 0x08
    251a:	89 85       	ldd	r24, Y+9	; 0x09
    251c:	9a 85       	ldd	r25, Y+10	; 0x0a
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	3f ef       	ldi	r19, 0xFF	; 255
    2522:	4f e7       	ldi	r20, 0x7F	; 127
    2524:	57 e4       	ldi	r21, 0x47	; 71
    2526:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    252a:	18 16       	cp	r1, r24
    252c:	4c f5       	brge	.+82     	; 0x2580 <Private_VEnable+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    252e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2530:	7c 85       	ldd	r23, Y+12	; 0x0c
    2532:	8d 85       	ldd	r24, Y+13	; 0x0d
    2534:	9e 85       	ldd	r25, Y+14	; 0x0e
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	40 e2       	ldi	r20, 0x20	; 32
    253c:	51 e4       	ldi	r21, 0x41	; 65
    253e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	bc 01       	movw	r22, r24
    2548:	cd 01       	movw	r24, r26
    254a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	9e 83       	std	Y+6, r25	; 0x06
    2554:	8d 83       	std	Y+5, r24	; 0x05
    2556:	0f c0       	rjmp	.+30     	; 0x2576 <Private_VEnable+0xce>
    2558:	80 e9       	ldi	r24, 0x90	; 144
    255a:	91 e0       	ldi	r25, 0x01	; 1
    255c:	9c 83       	std	Y+4, r25	; 0x04
    255e:	8b 83       	std	Y+3, r24	; 0x03
    2560:	8b 81       	ldd	r24, Y+3	; 0x03
    2562:	9c 81       	ldd	r25, Y+4	; 0x04
    2564:	01 97       	sbiw	r24, 0x01	; 1
    2566:	f1 f7       	brne	.-4      	; 0x2564 <Private_VEnable+0xbc>
    2568:	9c 83       	std	Y+4, r25	; 0x04
    256a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    256c:	8d 81       	ldd	r24, Y+5	; 0x05
    256e:	9e 81       	ldd	r25, Y+6	; 0x06
    2570:	01 97       	sbiw	r24, 0x01	; 1
    2572:	9e 83       	std	Y+6, r25	; 0x06
    2574:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2576:	8d 81       	ldd	r24, Y+5	; 0x05
    2578:	9e 81       	ldd	r25, Y+6	; 0x06
    257a:	00 97       	sbiw	r24, 0x00	; 0
    257c:	69 f7       	brne	.-38     	; 0x2558 <Private_VEnable+0xb0>
    257e:	14 c0       	rjmp	.+40     	; 0x25a8 <Private_VEnable+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2580:	6f 81       	ldd	r22, Y+7	; 0x07
    2582:	78 85       	ldd	r23, Y+8	; 0x08
    2584:	89 85       	ldd	r24, Y+9	; 0x09
    2586:	9a 85       	ldd	r25, Y+10	; 0x0a
    2588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	9e 83       	std	Y+6, r25	; 0x06
    2592:	8d 83       	std	Y+5, r24	; 0x05
    2594:	8d 81       	ldd	r24, Y+5	; 0x05
    2596:	9e 81       	ldd	r25, Y+6	; 0x06
    2598:	9a 83       	std	Y+2, r25	; 0x02
    259a:	89 83       	std	Y+1, r24	; 0x01
    259c:	89 81       	ldd	r24, Y+1	; 0x01
    259e:	9a 81       	ldd	r25, Y+2	; 0x02
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	f1 f7       	brne	.-4      	; 0x25a0 <Private_VEnable+0xf8>
    25a4:	9a 83       	std	Y+2, r25	; 0x02
    25a6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	Dio_WriteChannel(LCD_En , LOW);
    25a8:	82 e0       	ldi	r24, 0x02	; 2
    25aa:	60 e0       	ldi	r22, 0x00	; 0
    25ac:	0e 94 67 0a 	call	0x14ce	; 0x14ce <Dio_WriteChannel>

}
    25b0:	2e 96       	adiw	r28, 0x0e	; 14
    25b2:	0f b6       	in	r0, 0x3f	; 63
    25b4:	f8 94       	cli
    25b6:	de bf       	out	0x3e, r29	; 62
    25b8:	0f be       	out	0x3f, r0	; 63
    25ba:	cd bf       	out	0x3d, r28	; 61
    25bc:	cf 91       	pop	r28
    25be:	df 91       	pop	r29
    25c0:	08 95       	ret

000025c2 <Private_VintToStr>:

static void Private_VintToStr(UINT16 num, UINT8 str[]) {
    25c2:	df 93       	push	r29
    25c4:	cf 93       	push	r28
    25c6:	cd b7       	in	r28, 0x3d	; 61
    25c8:	de b7       	in	r29, 0x3e	; 62
    25ca:	2b 97       	sbiw	r28, 0x0b	; 11
    25cc:	0f b6       	in	r0, 0x3f	; 63
    25ce:	f8 94       	cli
    25d0:	de bf       	out	0x3e, r29	; 62
    25d2:	0f be       	out	0x3f, r0	; 63
    25d4:	cd bf       	out	0x3d, r28	; 61
    25d6:	99 87       	std	Y+9, r25	; 0x09
    25d8:	88 87       	std	Y+8, r24	; 0x08
    25da:	7b 87       	std	Y+11, r23	; 0x0b
    25dc:	6a 87       	std	Y+10, r22	; 0x0a
    int i = 0;
    25de:	1f 82       	std	Y+7, r1	; 0x07
    25e0:	1e 82       	std	Y+6, r1	; 0x06

    do {
        str[i++] = num % 10 + '0';
    25e2:	2e 81       	ldd	r18, Y+6	; 0x06
    25e4:	3f 81       	ldd	r19, Y+7	; 0x07
    25e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    25e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    25ea:	fc 01       	movw	r30, r24
    25ec:	e2 0f       	add	r30, r18
    25ee:	f3 1f       	adc	r31, r19
    25f0:	88 85       	ldd	r24, Y+8	; 0x08
    25f2:	99 85       	ldd	r25, Y+9	; 0x09
    25f4:	2a e0       	ldi	r18, 0x0A	; 10
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	b9 01       	movw	r22, r18
    25fa:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__udivmodhi4>
    25fe:	80 5d       	subi	r24, 0xD0	; 208
    2600:	80 83       	st	Z, r24
    2602:	8e 81       	ldd	r24, Y+6	; 0x06
    2604:	9f 81       	ldd	r25, Y+7	; 0x07
    2606:	01 96       	adiw	r24, 0x01	; 1
    2608:	9f 83       	std	Y+7, r25	; 0x07
    260a:	8e 83       	std	Y+6, r24	; 0x06
        num /= 10;
    260c:	88 85       	ldd	r24, Y+8	; 0x08
    260e:	99 85       	ldd	r25, Y+9	; 0x09
    2610:	2a e0       	ldi	r18, 0x0A	; 10
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	b9 01       	movw	r22, r18
    2616:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__udivmodhi4>
    261a:	cb 01       	movw	r24, r22
    261c:	99 87       	std	Y+9, r25	; 0x09
    261e:	88 87       	std	Y+8, r24	; 0x08
    } while (num > 0);
    2620:	88 85       	ldd	r24, Y+8	; 0x08
    2622:	99 85       	ldd	r25, Y+9	; 0x09
    2624:	00 97       	sbiw	r24, 0x00	; 0
    2626:	e9 f6       	brne	.-70     	; 0x25e2 <Private_VintToStr+0x20>

    str[i] = '\0';
    2628:	2e 81       	ldd	r18, Y+6	; 0x06
    262a:	3f 81       	ldd	r19, Y+7	; 0x07
    262c:	8a 85       	ldd	r24, Y+10	; 0x0a
    262e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2630:	fc 01       	movw	r30, r24
    2632:	e2 0f       	add	r30, r18
    2634:	f3 1f       	adc	r31, r19
    2636:	10 82       	st	Z, r1

    int start = 0;
    2638:	1d 82       	std	Y+5, r1	; 0x05
    263a:	1c 82       	std	Y+4, r1	; 0x04
    int end = i - 1;
    263c:	8e 81       	ldd	r24, Y+6	; 0x06
    263e:	9f 81       	ldd	r25, Y+7	; 0x07
    2640:	01 97       	sbiw	r24, 0x01	; 1
    2642:	9b 83       	std	Y+3, r25	; 0x03
    2644:	8a 83       	std	Y+2, r24	; 0x02
    2646:	2c c0       	rjmp	.+88     	; 0x26a0 <Private_VintToStr+0xde>
    while (start < end) {
        char temp = str[start];
    2648:	2c 81       	ldd	r18, Y+4	; 0x04
    264a:	3d 81       	ldd	r19, Y+5	; 0x05
    264c:	8a 85       	ldd	r24, Y+10	; 0x0a
    264e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2650:	fc 01       	movw	r30, r24
    2652:	e2 0f       	add	r30, r18
    2654:	f3 1f       	adc	r31, r19
    2656:	80 81       	ld	r24, Z
    2658:	89 83       	std	Y+1, r24	; 0x01
        str[start] = str[end];
    265a:	2c 81       	ldd	r18, Y+4	; 0x04
    265c:	3d 81       	ldd	r19, Y+5	; 0x05
    265e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2660:	9b 85       	ldd	r25, Y+11	; 0x0b
    2662:	dc 01       	movw	r26, r24
    2664:	a2 0f       	add	r26, r18
    2666:	b3 1f       	adc	r27, r19
    2668:	2a 81       	ldd	r18, Y+2	; 0x02
    266a:	3b 81       	ldd	r19, Y+3	; 0x03
    266c:	8a 85       	ldd	r24, Y+10	; 0x0a
    266e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2670:	fc 01       	movw	r30, r24
    2672:	e2 0f       	add	r30, r18
    2674:	f3 1f       	adc	r31, r19
    2676:	80 81       	ld	r24, Z
    2678:	8c 93       	st	X, r24
        str[end] = temp;
    267a:	2a 81       	ldd	r18, Y+2	; 0x02
    267c:	3b 81       	ldd	r19, Y+3	; 0x03
    267e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2680:	9b 85       	ldd	r25, Y+11	; 0x0b
    2682:	fc 01       	movw	r30, r24
    2684:	e2 0f       	add	r30, r18
    2686:	f3 1f       	adc	r31, r19
    2688:	89 81       	ldd	r24, Y+1	; 0x01
    268a:	80 83       	st	Z, r24
        start++;
    268c:	8c 81       	ldd	r24, Y+4	; 0x04
    268e:	9d 81       	ldd	r25, Y+5	; 0x05
    2690:	01 96       	adiw	r24, 0x01	; 1
    2692:	9d 83       	std	Y+5, r25	; 0x05
    2694:	8c 83       	std	Y+4, r24	; 0x04
        end--;
    2696:	8a 81       	ldd	r24, Y+2	; 0x02
    2698:	9b 81       	ldd	r25, Y+3	; 0x03
    269a:	01 97       	sbiw	r24, 0x01	; 1
    269c:	9b 83       	std	Y+3, r25	; 0x03
    269e:	8a 83       	std	Y+2, r24	; 0x02

    str[i] = '\0';

    int start = 0;
    int end = i - 1;
    while (start < end) {
    26a0:	2c 81       	ldd	r18, Y+4	; 0x04
    26a2:	3d 81       	ldd	r19, Y+5	; 0x05
    26a4:	8a 81       	ldd	r24, Y+2	; 0x02
    26a6:	9b 81       	ldd	r25, Y+3	; 0x03
    26a8:	28 17       	cp	r18, r24
    26aa:	39 07       	cpc	r19, r25
    26ac:	6c f2       	brlt	.-102    	; 0x2648 <Private_VintToStr+0x86>
        str[start] = str[end];
        str[end] = temp;
        start++;
        end--;
    }
}
    26ae:	2b 96       	adiw	r28, 0x0b	; 11
    26b0:	0f b6       	in	r0, 0x3f	; 63
    26b2:	f8 94       	cli
    26b4:	de bf       	out	0x3e, r29	; 62
    26b6:	0f be       	out	0x3f, r0	; 63
    26b8:	cd bf       	out	0x3d, r28	; 61
    26ba:	cf 91       	pop	r28
    26bc:	df 91       	pop	r29
    26be:	08 95       	ret

000026c0 <KPD_VGetValue>:
static UINT8 Keypad [4][4]={{14,10,9,8},
							{13,7,6,5},
							{12,4,3,2},
							{11,15,1,16}};

void KPD_VGetValue (UINT16 * Return_Value){
    26c0:	df 93       	push	r29
    26c2:	cf 93       	push	r28
    26c4:	cd b7       	in	r28, 0x3d	; 61
    26c6:	de b7       	in	r29, 0x3e	; 62
    26c8:	2c 97       	sbiw	r28, 0x0c	; 12
    26ca:	0f b6       	in	r0, 0x3f	; 63
    26cc:	f8 94       	cli
    26ce:	de bf       	out	0x3e, r29	; 62
    26d0:	0f be       	out	0x3f, r0	; 63
    26d2:	cd bf       	out	0x3d, r28	; 61
    26d4:	9c 87       	std	Y+12, r25	; 0x0c
    26d6:	8b 87       	std	Y+11, r24	; 0x0b

	*Return_Value = Key_Not_Pressed;
    26d8:	eb 85       	ldd	r30, Y+11	; 0x0b
    26da:	fc 85       	ldd	r31, Y+12	; 0x0c
    26dc:	88 ec       	ldi	r24, 0xC8	; 200
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	91 83       	std	Z+1, r25	; 0x01
    26e2:	80 83       	st	Z, r24
	UINT8 Row , Col ;
	UINT8 Arr_Row [4] = {ROW1 , ROW2 ,ROW3 ,ROW4};
    26e4:	85 e1       	ldi	r24, 0x15	; 21
    26e6:	8b 83       	std	Y+3, r24	; 0x03
    26e8:	84 e1       	ldi	r24, 0x14	; 20
    26ea:	8c 83       	std	Y+4, r24	; 0x04
    26ec:	83 e1       	ldi	r24, 0x13	; 19
    26ee:	8d 83       	std	Y+5, r24	; 0x05
    26f0:	82 e1       	ldi	r24, 0x12	; 18
    26f2:	8e 83       	std	Y+6, r24	; 0x06
	UINT8 Arr_Col [4] = {COL1 , COL2 ,COL3 ,COL4};
    26f4:	8f e1       	ldi	r24, 0x1F	; 31
    26f6:	8f 83       	std	Y+7, r24	; 0x07
    26f8:	8e e1       	ldi	r24, 0x1E	; 30
    26fa:	88 87       	std	Y+8, r24	; 0x08
    26fc:	8c e1       	ldi	r24, 0x1C	; 28
    26fe:	89 87       	std	Y+9, r24	; 0x09
    2700:	8b e1       	ldi	r24, 0x1B	; 27
    2702:	8a 87       	std	Y+10, r24	; 0x0a

		for(Row=0 ; Row<4 ; Row++){
    2704:	1a 82       	std	Y+2, r1	; 0x02
    2706:	62 c0       	rjmp	.+196    	; 0x27cc <KPD_VGetValue+0x10c>

			Dio_WriteChannel(Arr_Row[Row],LOW);
    2708:	8a 81       	ldd	r24, Y+2	; 0x02
    270a:	28 2f       	mov	r18, r24
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	ce 01       	movw	r24, r28
    2710:	03 96       	adiw	r24, 0x03	; 3
    2712:	fc 01       	movw	r30, r24
    2714:	e2 0f       	add	r30, r18
    2716:	f3 1f       	adc	r31, r19
    2718:	80 81       	ld	r24, Z
    271a:	60 e0       	ldi	r22, 0x00	; 0
    271c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <Dio_WriteChannel>

			for (Col=0 ; Col<4 ; Col++)
    2720:	19 82       	std	Y+1, r1	; 0x01
    2722:	41 c0       	rjmp	.+130    	; 0x27a6 <KPD_VGetValue+0xe6>
				if( Dio_ReadChannel(Arr_Col[Col]) == 0){
    2724:	89 81       	ldd	r24, Y+1	; 0x01
    2726:	28 2f       	mov	r18, r24
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	ce 01       	movw	r24, r28
    272c:	07 96       	adiw	r24, 0x07	; 7
    272e:	fc 01       	movw	r30, r24
    2730:	e2 0f       	add	r30, r18
    2732:	f3 1f       	adc	r31, r19
    2734:	80 81       	ld	r24, Z
    2736:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <Dio_ReadChannel>
    273a:	88 23       	and	r24, r24
    273c:	89 f5       	brne	.+98     	; 0x27a0 <KPD_VGetValue+0xe0>
//					*Return_Value = (Row * 4) + Col + 1 ;
					*Return_Value = Keypad[Row][Col] ;
    273e:	8a 81       	ldd	r24, Y+2	; 0x02
    2740:	48 2f       	mov	r20, r24
    2742:	50 e0       	ldi	r21, 0x00	; 0
    2744:	89 81       	ldd	r24, Y+1	; 0x01
    2746:	28 2f       	mov	r18, r24
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	ca 01       	movw	r24, r20
    274c:	88 0f       	add	r24, r24
    274e:	99 1f       	adc	r25, r25
    2750:	88 0f       	add	r24, r24
    2752:	99 1f       	adc	r25, r25
    2754:	82 0f       	add	r24, r18
    2756:	93 1f       	adc	r25, r19
    2758:	fc 01       	movw	r30, r24
    275a:	e8 59       	subi	r30, 0x98	; 152
    275c:	ff 4f       	sbci	r31, 0xFF	; 255
    275e:	80 81       	ld	r24, Z
    2760:	88 2f       	mov	r24, r24
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	eb 85       	ldd	r30, Y+11	; 0x0b
    2766:	fc 85       	ldd	r31, Y+12	; 0x0c
    2768:	91 83       	std	Z+1, r25	; 0x01
    276a:	80 83       	st	Z, r24
					while(Dio_ReadChannel(Arr_Col[Col]) == 0);
    276c:	89 81       	ldd	r24, Y+1	; 0x01
    276e:	28 2f       	mov	r18, r24
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	ce 01       	movw	r24, r28
    2774:	07 96       	adiw	r24, 0x07	; 7
    2776:	fc 01       	movw	r30, r24
    2778:	e2 0f       	add	r30, r18
    277a:	f3 1f       	adc	r31, r19
    277c:	80 81       	ld	r24, Z
    277e:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <Dio_ReadChannel>
    2782:	88 23       	and	r24, r24
    2784:	99 f3       	breq	.-26     	; 0x276c <KPD_VGetValue+0xac>
					Dio_WriteChannel(Arr_Row[Row],HIGH);
    2786:	8a 81       	ldd	r24, Y+2	; 0x02
    2788:	28 2f       	mov	r18, r24
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	ce 01       	movw	r24, r28
    278e:	03 96       	adiw	r24, 0x03	; 3
    2790:	fc 01       	movw	r30, r24
    2792:	e2 0f       	add	r30, r18
    2794:	f3 1f       	adc	r31, r19
    2796:	80 81       	ld	r24, Z
    2798:	61 e0       	ldi	r22, 0x01	; 1
    279a:	0e 94 67 0a 	call	0x14ce	; 0x14ce <Dio_WriteChannel>
    279e:	1a c0       	rjmp	.+52     	; 0x27d4 <KPD_VGetValue+0x114>

		for(Row=0 ; Row<4 ; Row++){

			Dio_WriteChannel(Arr_Row[Row],LOW);

			for (Col=0 ; Col<4 ; Col++)
    27a0:	89 81       	ldd	r24, Y+1	; 0x01
    27a2:	8f 5f       	subi	r24, 0xFF	; 255
    27a4:	89 83       	std	Y+1, r24	; 0x01
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
    27a8:	84 30       	cpi	r24, 0x04	; 4
    27aa:	08 f4       	brcc	.+2      	; 0x27ae <KPD_VGetValue+0xee>
    27ac:	bb cf       	rjmp	.-138    	; 0x2724 <KPD_VGetValue+0x64>
					while(Dio_ReadChannel(Arr_Col[Col]) == 0);
					Dio_WriteChannel(Arr_Row[Row],HIGH);
					return;
				}

			Dio_WriteChannel(Arr_Row[Row],HIGH);
    27ae:	8a 81       	ldd	r24, Y+2	; 0x02
    27b0:	28 2f       	mov	r18, r24
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	ce 01       	movw	r24, r28
    27b6:	03 96       	adiw	r24, 0x03	; 3
    27b8:	fc 01       	movw	r30, r24
    27ba:	e2 0f       	add	r30, r18
    27bc:	f3 1f       	adc	r31, r19
    27be:	80 81       	ld	r24, Z
    27c0:	61 e0       	ldi	r22, 0x01	; 1
    27c2:	0e 94 67 0a 	call	0x14ce	; 0x14ce <Dio_WriteChannel>
	*Return_Value = Key_Not_Pressed;
	UINT8 Row , Col ;
	UINT8 Arr_Row [4] = {ROW1 , ROW2 ,ROW3 ,ROW4};
	UINT8 Arr_Col [4] = {COL1 , COL2 ,COL3 ,COL4};

		for(Row=0 ; Row<4 ; Row++){
    27c6:	8a 81       	ldd	r24, Y+2	; 0x02
    27c8:	8f 5f       	subi	r24, 0xFF	; 255
    27ca:	8a 83       	std	Y+2, r24	; 0x02
    27cc:	8a 81       	ldd	r24, Y+2	; 0x02
    27ce:	84 30       	cpi	r24, 0x04	; 4
    27d0:	08 f4       	brcc	.+2      	; 0x27d4 <KPD_VGetValue+0x114>
    27d2:	9a cf       	rjmp	.-204    	; 0x2708 <KPD_VGetValue+0x48>
				}

			Dio_WriteChannel(Arr_Row[Row],HIGH);

		}
}
    27d4:	2c 96       	adiw	r28, 0x0c	; 12
    27d6:	0f b6       	in	r0, 0x3f	; 63
    27d8:	f8 94       	cli
    27da:	de bf       	out	0x3e, r29	; 62
    27dc:	0f be       	out	0x3f, r0	; 63
    27de:	cd bf       	out	0x3d, r28	; 61
    27e0:	cf 91       	pop	r28
    27e2:	df 91       	pop	r29
    27e4:	08 95       	ret

000027e6 <ADC_TEST>:
#include <util/delay.h>

volatile UINT16 Val ;
volatile UINT16 num1;

void ADC_TEST (void){
    27e6:	df 93       	push	r29
    27e8:	cf 93       	push	r28
    27ea:	cd b7       	in	r28, 0x3d	; 61
    27ec:	de b7       	in	r29, 0x3e	; 62
	LCD_VClearScreen();
    27ee:	0e 94 a0 11 	call	0x2340	; 0x2340 <LCD_VClearScreen>
	Val = ADC_Read();
    27f2:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <ADC_Read>
    27f6:	90 93 bd 00 	sts	0x00BD, r25
    27fa:	80 93 bc 00 	sts	0x00BC, r24
	if(Val<num1){
    27fe:	20 91 bc 00 	lds	r18, 0x00BC
    2802:	30 91 bd 00 	lds	r19, 0x00BD
    2806:	80 91 be 00 	lds	r24, 0x00BE
    280a:	90 91 bf 00 	lds	r25, 0x00BF
    280e:	28 17       	cp	r18, r24
    2810:	39 07       	cpc	r19, r25
    2812:	48 f4       	brcc	.+18     	; 0x2826 <ADC_TEST+0x40>
		Dio_WriteChannel(PINA_5,HIGH);
    2814:	85 e0       	ldi	r24, 0x05	; 5
    2816:	61 e0       	ldi	r22, 0x01	; 1
    2818:	0e 94 67 0a 	call	0x14ce	; 0x14ce <Dio_WriteChannel>
		Dio_WriteChannel(PINA_4,LOW);
    281c:	84 e0       	ldi	r24, 0x04	; 4
    281e:	60 e0       	ldi	r22, 0x00	; 0
    2820:	0e 94 67 0a 	call	0x14ce	; 0x14ce <Dio_WriteChannel>
    2824:	08 c0       	rjmp	.+16     	; 0x2836 <ADC_TEST+0x50>
	}
	else{
		Dio_WriteChannel(PINA_5,LOW);
    2826:	85 e0       	ldi	r24, 0x05	; 5
    2828:	60 e0       	ldi	r22, 0x00	; 0
    282a:	0e 94 67 0a 	call	0x14ce	; 0x14ce <Dio_WriteChannel>
		Dio_WriteChannel(PINA_4,HIGH);
    282e:	84 e0       	ldi	r24, 0x04	; 4
    2830:	61 e0       	ldi	r22, 0x01	; 1
    2832:	0e 94 67 0a 	call	0x14ce	; 0x14ce <Dio_WriteChannel>
	}
	LCD_VIntegerToString(Val);
    2836:	80 91 bc 00 	lds	r24, 0x00BC
    283a:	90 91 bd 00 	lds	r25, 0x00BD
    283e:	0e 94 7f 11 	call	0x22fe	; 0x22fe <LCD_VIntegerToString>
}
    2842:	cf 91       	pop	r28
    2844:	df 91       	pop	r29
    2846:	08 95       	ret

00002848 <main>:

int main (void){
    2848:	df 93       	push	r29
    284a:	cf 93       	push	r28
    284c:	cd b7       	in	r28, 0x3d	; 61
    284e:	de b7       	in	r29, 0x3e	; 62
    2850:	60 97       	sbiw	r28, 0x10	; 16
    2852:	0f b6       	in	r0, 0x3f	; 63
    2854:	f8 94       	cli
    2856:	de bf       	out	0x3e, r29	; 62
    2858:	0f be       	out	0x3f, r0	; 63
    285a:	cd bf       	out	0x3d, r28	; 61

	UINT16 key = 0;
    285c:	18 8a       	std	Y+16, r1	; 0x10
    285e:	1f 86       	std	Y+15, r1	; 0x0f
	Dio_Init();
    2860:	0e 94 86 08 	call	0x110c	; 0x110c <Dio_Init>
	ADC_Init();
    2864:	0e 94 5f 0c 	call	0x18be	; 0x18be <ADC_Init>
	LCD_VInit();
    2868:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <LCD_VInit>
	GI_VEnable();
    286c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GI_VEnable>
	ADC_Select_Channel(0);
    2870:	80 e0       	ldi	r24, 0x00	; 0
    2872:	0e 94 90 0c 	call	0x1920	; 0x1920 <ADC_Select_Channel>
	ADC_SetCallBack(ADC_TEST);
    2876:	83 ef       	ldi	r24, 0xF3	; 243
    2878:	93 e1       	ldi	r25, 0x13	; 19
    287a:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <ADC_SetCallBack>

	ADC_INTEnable();
    287e:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <ADC_INTEnable>


	while (1) {
		KPD_VGetValue(&key);
    2882:	ce 01       	movw	r24, r28
    2884:	0f 96       	adiw	r24, 0x0f	; 15
    2886:	0e 94 60 13 	call	0x26c0	; 0x26c0 <KPD_VGetValue>
		if (key >= 1 && key <= 10) {
    288a:	8f 85       	ldd	r24, Y+15	; 0x0f
    288c:	98 89       	ldd	r25, Y+16	; 0x10
    288e:	00 97       	sbiw	r24, 0x00	; 0
    2890:	29 f1       	breq	.+74     	; 0x28dc <main+0x94>
    2892:	8f 85       	ldd	r24, Y+15	; 0x0f
    2894:	98 89       	ldd	r25, Y+16	; 0x10
    2896:	8b 30       	cpi	r24, 0x0B	; 11
    2898:	91 05       	cpc	r25, r1
    289a:	00 f5       	brcc	.+64     	; 0x28dc <main+0x94>
			LCD_VClearScreen();
    289c:	0e 94 a0 11 	call	0x2340	; 0x2340 <LCD_VClearScreen>
			num1 = num1 * 10 + (key - 1);
    28a0:	80 91 be 00 	lds	r24, 0x00BE
    28a4:	90 91 bf 00 	lds	r25, 0x00BF
    28a8:	9c 01       	movw	r18, r24
    28aa:	22 0f       	add	r18, r18
    28ac:	33 1f       	adc	r19, r19
    28ae:	c9 01       	movw	r24, r18
    28b0:	88 0f       	add	r24, r24
    28b2:	99 1f       	adc	r25, r25
    28b4:	88 0f       	add	r24, r24
    28b6:	99 1f       	adc	r25, r25
    28b8:	28 0f       	add	r18, r24
    28ba:	39 1f       	adc	r19, r25
    28bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    28be:	98 89       	ldd	r25, Y+16	; 0x10
    28c0:	82 0f       	add	r24, r18
    28c2:	93 1f       	adc	r25, r19
    28c4:	01 97       	sbiw	r24, 0x01	; 1
    28c6:	90 93 bf 00 	sts	0x00BF, r25
    28ca:	80 93 be 00 	sts	0x00BE, r24
			LCD_VIntegerToString(num1);
    28ce:	80 91 be 00 	lds	r24, 0x00BE
    28d2:	90 91 bf 00 	lds	r25, 0x00BF
    28d6:	0e 94 7f 11 	call	0x22fe	; 0x22fe <LCD_VIntegerToString>
    28da:	d3 cf       	rjmp	.-90     	; 0x2882 <main+0x3a>
		} else if (key == 16) {
    28dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    28de:	98 89       	ldd	r25, Y+16	; 0x10
    28e0:	80 31       	cpi	r24, 0x10	; 16
    28e2:	91 05       	cpc	r25, r1
    28e4:	39 f4       	brne	.+14     	; 0x28f4 <main+0xac>
			num1 = 0;
    28e6:	10 92 bf 00 	sts	0x00BF, r1
    28ea:	10 92 be 00 	sts	0x00BE, r1
			LCD_VClearScreen();
    28ee:	0e 94 a0 11 	call	0x2340	; 0x2340 <LCD_VClearScreen>
    28f2:	c7 cf       	rjmp	.-114    	; 0x2882 <main+0x3a>
		} else if (key == 15) {
    28f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    28f6:	98 89       	ldd	r25, Y+16	; 0x10
    28f8:	8f 30       	cpi	r24, 0x0F	; 15
    28fa:	91 05       	cpc	r25, r1
    28fc:	11 f6       	brne	.-124    	; 0x2882 <main+0x3a>
			break;
		}
	}
	while (1){
		ADC_Start_Conversion();
    28fe:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <ADC_Start_Conversion>
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	a8 ec       	ldi	r26, 0xC8	; 200
    2908:	b2 e4       	ldi	r27, 0x42	; 66
    290a:	8b 87       	std	Y+11, r24	; 0x0b
    290c:	9c 87       	std	Y+12, r25	; 0x0c
    290e:	ad 87       	std	Y+13, r26	; 0x0d
    2910:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2912:	6b 85       	ldd	r22, Y+11	; 0x0b
    2914:	7c 85       	ldd	r23, Y+12	; 0x0c
    2916:	8d 85       	ldd	r24, Y+13	; 0x0d
    2918:	9e 85       	ldd	r25, Y+14	; 0x0e
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	4a e7       	ldi	r20, 0x7A	; 122
    2920:	55 e4       	ldi	r21, 0x45	; 69
    2922:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	8f 83       	std	Y+7, r24	; 0x07
    292c:	98 87       	std	Y+8, r25	; 0x08
    292e:	a9 87       	std	Y+9, r26	; 0x09
    2930:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2932:	6f 81       	ldd	r22, Y+7	; 0x07
    2934:	78 85       	ldd	r23, Y+8	; 0x08
    2936:	89 85       	ldd	r24, Y+9	; 0x09
    2938:	9a 85       	ldd	r25, Y+10	; 0x0a
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	40 e8       	ldi	r20, 0x80	; 128
    2940:	5f e3       	ldi	r21, 0x3F	; 63
    2942:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2946:	88 23       	and	r24, r24
    2948:	2c f4       	brge	.+10     	; 0x2954 <main+0x10c>
		__ticks = 1;
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	9e 83       	std	Y+6, r25	; 0x06
    2950:	8d 83       	std	Y+5, r24	; 0x05
    2952:	3f c0       	rjmp	.+126    	; 0x29d2 <main+0x18a>
	else if (__tmp > 65535)
    2954:	6f 81       	ldd	r22, Y+7	; 0x07
    2956:	78 85       	ldd	r23, Y+8	; 0x08
    2958:	89 85       	ldd	r24, Y+9	; 0x09
    295a:	9a 85       	ldd	r25, Y+10	; 0x0a
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	3f ef       	ldi	r19, 0xFF	; 255
    2960:	4f e7       	ldi	r20, 0x7F	; 127
    2962:	57 e4       	ldi	r21, 0x47	; 71
    2964:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2968:	18 16       	cp	r1, r24
    296a:	4c f5       	brge	.+82     	; 0x29be <main+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    296c:	6b 85       	ldd	r22, Y+11	; 0x0b
    296e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2970:	8d 85       	ldd	r24, Y+13	; 0x0d
    2972:	9e 85       	ldd	r25, Y+14	; 0x0e
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	40 e2       	ldi	r20, 0x20	; 32
    297a:	51 e4       	ldi	r21, 0x41	; 65
    297c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	bc 01       	movw	r22, r24
    2986:	cd 01       	movw	r24, r26
    2988:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	9e 83       	std	Y+6, r25	; 0x06
    2992:	8d 83       	std	Y+5, r24	; 0x05
    2994:	0f c0       	rjmp	.+30     	; 0x29b4 <main+0x16c>
    2996:	80 e9       	ldi	r24, 0x90	; 144
    2998:	91 e0       	ldi	r25, 0x01	; 1
    299a:	9c 83       	std	Y+4, r25	; 0x04
    299c:	8b 83       	std	Y+3, r24	; 0x03
    299e:	8b 81       	ldd	r24, Y+3	; 0x03
    29a0:	9c 81       	ldd	r25, Y+4	; 0x04
    29a2:	01 97       	sbiw	r24, 0x01	; 1
    29a4:	f1 f7       	brne	.-4      	; 0x29a2 <main+0x15a>
    29a6:	9c 83       	std	Y+4, r25	; 0x04
    29a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29aa:	8d 81       	ldd	r24, Y+5	; 0x05
    29ac:	9e 81       	ldd	r25, Y+6	; 0x06
    29ae:	01 97       	sbiw	r24, 0x01	; 1
    29b0:	9e 83       	std	Y+6, r25	; 0x06
    29b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29b4:	8d 81       	ldd	r24, Y+5	; 0x05
    29b6:	9e 81       	ldd	r25, Y+6	; 0x06
    29b8:	00 97       	sbiw	r24, 0x00	; 0
    29ba:	69 f7       	brne	.-38     	; 0x2996 <main+0x14e>
    29bc:	a0 cf       	rjmp	.-192    	; 0x28fe <main+0xb6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29be:	6f 81       	ldd	r22, Y+7	; 0x07
    29c0:	78 85       	ldd	r23, Y+8	; 0x08
    29c2:	89 85       	ldd	r24, Y+9	; 0x09
    29c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	9e 83       	std	Y+6, r25	; 0x06
    29d0:	8d 83       	std	Y+5, r24	; 0x05
    29d2:	8d 81       	ldd	r24, Y+5	; 0x05
    29d4:	9e 81       	ldd	r25, Y+6	; 0x06
    29d6:	9a 83       	std	Y+2, r25	; 0x02
    29d8:	89 83       	std	Y+1, r24	; 0x01
    29da:	89 81       	ldd	r24, Y+1	; 0x01
    29dc:	9a 81       	ldd	r25, Y+2	; 0x02
    29de:	01 97       	sbiw	r24, 0x01	; 1
    29e0:	f1 f7       	brne	.-4      	; 0x29de <main+0x196>
    29e2:	9a 83       	std	Y+2, r25	; 0x02
    29e4:	89 83       	std	Y+1, r24	; 0x01
    29e6:	8b cf       	rjmp	.-234    	; 0x28fe <main+0xb6>

000029e8 <__udivmodhi4>:
    29e8:	aa 1b       	sub	r26, r26
    29ea:	bb 1b       	sub	r27, r27
    29ec:	51 e1       	ldi	r21, 0x11	; 17
    29ee:	07 c0       	rjmp	.+14     	; 0x29fe <__udivmodhi4_ep>

000029f0 <__udivmodhi4_loop>:
    29f0:	aa 1f       	adc	r26, r26
    29f2:	bb 1f       	adc	r27, r27
    29f4:	a6 17       	cp	r26, r22
    29f6:	b7 07       	cpc	r27, r23
    29f8:	10 f0       	brcs	.+4      	; 0x29fe <__udivmodhi4_ep>
    29fa:	a6 1b       	sub	r26, r22
    29fc:	b7 0b       	sbc	r27, r23

000029fe <__udivmodhi4_ep>:
    29fe:	88 1f       	adc	r24, r24
    2a00:	99 1f       	adc	r25, r25
    2a02:	5a 95       	dec	r21
    2a04:	a9 f7       	brne	.-22     	; 0x29f0 <__udivmodhi4_loop>
    2a06:	80 95       	com	r24
    2a08:	90 95       	com	r25
    2a0a:	bc 01       	movw	r22, r24
    2a0c:	cd 01       	movw	r24, r26
    2a0e:	08 95       	ret

00002a10 <__prologue_saves__>:
    2a10:	2f 92       	push	r2
    2a12:	3f 92       	push	r3
    2a14:	4f 92       	push	r4
    2a16:	5f 92       	push	r5
    2a18:	6f 92       	push	r6
    2a1a:	7f 92       	push	r7
    2a1c:	8f 92       	push	r8
    2a1e:	9f 92       	push	r9
    2a20:	af 92       	push	r10
    2a22:	bf 92       	push	r11
    2a24:	cf 92       	push	r12
    2a26:	df 92       	push	r13
    2a28:	ef 92       	push	r14
    2a2a:	ff 92       	push	r15
    2a2c:	0f 93       	push	r16
    2a2e:	1f 93       	push	r17
    2a30:	cf 93       	push	r28
    2a32:	df 93       	push	r29
    2a34:	cd b7       	in	r28, 0x3d	; 61
    2a36:	de b7       	in	r29, 0x3e	; 62
    2a38:	ca 1b       	sub	r28, r26
    2a3a:	db 0b       	sbc	r29, r27
    2a3c:	0f b6       	in	r0, 0x3f	; 63
    2a3e:	f8 94       	cli
    2a40:	de bf       	out	0x3e, r29	; 62
    2a42:	0f be       	out	0x3f, r0	; 63
    2a44:	cd bf       	out	0x3d, r28	; 61
    2a46:	09 94       	ijmp

00002a48 <__epilogue_restores__>:
    2a48:	2a 88       	ldd	r2, Y+18	; 0x12
    2a4a:	39 88       	ldd	r3, Y+17	; 0x11
    2a4c:	48 88       	ldd	r4, Y+16	; 0x10
    2a4e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a50:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a52:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a54:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a56:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a58:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a5a:	b9 84       	ldd	r11, Y+9	; 0x09
    2a5c:	c8 84       	ldd	r12, Y+8	; 0x08
    2a5e:	df 80       	ldd	r13, Y+7	; 0x07
    2a60:	ee 80       	ldd	r14, Y+6	; 0x06
    2a62:	fd 80       	ldd	r15, Y+5	; 0x05
    2a64:	0c 81       	ldd	r16, Y+4	; 0x04
    2a66:	1b 81       	ldd	r17, Y+3	; 0x03
    2a68:	aa 81       	ldd	r26, Y+2	; 0x02
    2a6a:	b9 81       	ldd	r27, Y+1	; 0x01
    2a6c:	ce 0f       	add	r28, r30
    2a6e:	d1 1d       	adc	r29, r1
    2a70:	0f b6       	in	r0, 0x3f	; 63
    2a72:	f8 94       	cli
    2a74:	de bf       	out	0x3e, r29	; 62
    2a76:	0f be       	out	0x3f, r0	; 63
    2a78:	cd bf       	out	0x3d, r28	; 61
    2a7a:	ed 01       	movw	r28, r26
    2a7c:	08 95       	ret

00002a7e <_exit>:
    2a7e:	f8 94       	cli

00002a80 <__stop_program>:
    2a80:	ff cf       	rjmp	.-2      	; 0x2a80 <__stop_program>
