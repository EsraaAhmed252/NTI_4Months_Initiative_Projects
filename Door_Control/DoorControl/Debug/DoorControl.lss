
DoorControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001d6  00800060  000029a8  00002a3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800236  00800236  00002c12  2**0
                  ALLOC
  3 .stab         00002520  00000000  00000000  00002c14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000018e3  00000000  00000000  00005134  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00006a17  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00006bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00006deb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  000093fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000a8cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000bbd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000bdb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000c0bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cad9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 15 09 	jmp	0x122a	; 0x122a <__vector_7>
      20:	0c 94 48 09 	jmp	0x1290	; 0x1290 <__vector_8>
      24:	0c 94 7b 09 	jmp	0x12f6	; 0x12f6 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ea       	ldi	r30, 0xA8	; 168
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 33       	cpi	r26, 0x36	; 54
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a6 e3       	ldi	r26, 0x36	; 54
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 33       	cpi	r26, 0x3C	; 60
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ac 13 	call	0x2758	; 0x2758 <main>
      8a:	0c 94 d2 14 	jmp	0x29a4	; 0x29a4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9b 14 	jmp	0x2936	; 0x2936 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 ee       	ldi	r26, 0xE4	; 228
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b7 14 	jmp	0x296e	; 0x296e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a7 14 	jmp	0x294e	; 0x294e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c3 14 	jmp	0x2986	; 0x2986 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a7 14 	jmp	0x294e	; 0x294e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c3 14 	jmp	0x2986	; 0x2986 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9b 14 	jmp	0x2936	; 0x2936 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 ee       	ldi	r24, 0xE4	; 228
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b7 14 	jmp	0x296e	; 0x296e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a3 14 	jmp	0x2946	; 0x2946 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	64 ee       	ldi	r22, 0xE4	; 228
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 bf 14 	jmp	0x297e	; 0x297e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 a7 14 	jmp	0x294e	; 0x294e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c3 14 	jmp	0x2986	; 0x2986 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 a7 14 	jmp	0x294e	; 0x294e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c3 14 	jmp	0x2986	; 0x2986 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 a7 14 	jmp	0x294e	; 0x294e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c3 14 	jmp	0x2986	; 0x2986 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 a4 14 	jmp	0x2948	; 0x2948 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 c0 14 	jmp	0x2980	; 0x2980 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 c7 14 	jmp	0x298e	; 0x298e <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 a3 14 	jmp	0x2946	; 0x2946 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 bf 14 	jmp	0x297e	; 0x297e <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e4 51       	subi	r30, 0x14	; 20
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <Timer1_Init>:

static void (*p2f_1)(void) = NULL;
static void (*p2f_2)(void) = NULL;
static void (*p2f_3)(void) = NULL;

void Timer1_Init(void) {
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62

	TCNT1 = Timer1_Init_Value;
     ef2:	ec e4       	ldi	r30, 0x4C	; 76
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	11 82       	std	Z+1, r1	; 0x01
     ef8:	10 82       	st	Z, r1
	SETBIT(TCCR1B,WGM12);
	CLRBIT(TCCR1B,WGM13);

#elif Timer1_Mode == Timer1_Mode_14

	CLRBIT(TCCR1A, WGM10);
     efa:	af e4       	ldi	r26, 0x4F	; 79
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	ef e4       	ldi	r30, 0x4F	; 79
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	8e 7f       	andi	r24, 0xFE	; 254
     f06:	8c 93       	st	X, r24
	SETBIT(TCCR1A, WGM11);
     f08:	af e4       	ldi	r26, 0x4F	; 79
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	ef e4       	ldi	r30, 0x4F	; 79
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	82 60       	ori	r24, 0x02	; 2
     f14:	8c 93       	st	X, r24
	SETBIT(TCCR1B, WGM12);
     f16:	ae e4       	ldi	r26, 0x4E	; 78
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	ee e4       	ldi	r30, 0x4E	; 78
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	88 60       	ori	r24, 0x08	; 8
     f22:	8c 93       	st	X, r24
	SETBIT(TCCR1B, WGM13);
     f24:	ae e4       	ldi	r26, 0x4E	; 78
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	ee e4       	ldi	r30, 0x4E	; 78
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	80 61       	ori	r24, 0x10	; 16
     f30:	8c 93       	st	X, r24

#if Timer1_PWM_MODE == Timer1_PWM_NONINVERTING

	CLRBIT(TCCR1A, COM1A0);
     f32:	af e4       	ldi	r26, 0x4F	; 79
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	ef e4       	ldi	r30, 0x4F	; 79
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	8f 7b       	andi	r24, 0xBF	; 191
     f3e:	8c 93       	st	X, r24
	SETBIT(TCCR1A, COM1A1);
     f40:	af e4       	ldi	r26, 0x4F	; 79
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	ef e4       	ldi	r30, 0x4F	; 79
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	80 68       	ori	r24, 0x80	; 128
     f4c:	8c 93       	st	X, r24
			SETBIT(TCCR1B,CS11);
			CLRBIT(TCCR1B,CS12);

#elif Timer1_Prescaler == Timer1_Prescalling_64

	SETBIT(TCCR1B, CS10);
     f4e:	ae e4       	ldi	r26, 0x4E	; 78
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	ee e4       	ldi	r30, 0x4E	; 78
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	81 60       	ori	r24, 0x01	; 1
     f5a:	8c 93       	st	X, r24
	SETBIT(TCCR1B, CS11);
     f5c:	ae e4       	ldi	r26, 0x4E	; 78
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	ee e4       	ldi	r30, 0x4E	; 78
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	82 60       	ori	r24, 0x02	; 2
     f68:	8c 93       	st	X, r24
	CLRBIT(TCCR1B, CS12);
     f6a:	ae e4       	ldi	r26, 0x4E	; 78
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	ee e4       	ldi	r30, 0x4E	; 78
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	8b 7f       	andi	r24, 0xFB	; 251
     f76:	8c 93       	st	X, r24
			SETBIT(TCCR1B,CS10);
			SETBIT(TCCR1B,CS11);
			SETBIT(TCCR1B,CS12);
#endif

}
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	08 95       	ret

00000f7e <Timer1_INTEnable>:

void Timer1_INTEnable(void) {
     f7e:	df 93       	push	r29
     f80:	cf 93       	push	r28
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62

#if Timer0_Enable_INT == Timer1_OverFlow_Enable

	SETBIT(TIMSK, TOIE1);
     f86:	a9 e5       	ldi	r26, 0x59	; 89
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e9 e5       	ldi	r30, 0x59	; 89
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	84 60       	ori	r24, 0x04	; 4
     f92:	8c 93       	st	X, r24

#elif Timer0_Enable_INT == Timer1_No_INT

#endif

}
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	08 95       	ret

00000f9a <Set_Init_Value_Timer1>:

void Set_Init_Value_Timer1(UINT16 val) {
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	00 d0       	rcall	.+0      	; 0xfa0 <Set_Init_Value_Timer1+0x6>
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
     fa4:	9a 83       	std	Y+2, r25	; 0x02
     fa6:	89 83       	std	Y+1, r24	; 0x01

	TCNT1 = val;
     fa8:	ec e4       	ldi	r30, 0x4C	; 76
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	9a 81       	ldd	r25, Y+2	; 0x02
     fb0:	91 83       	std	Z+1, r25	; 0x01
     fb2:	80 83       	st	Z, r24

}
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <Set_OCR_Value_Timer1>:

void Set_OCR_Value_Timer1(UINT16 val) {
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	00 d0       	rcall	.+0      	; 0xfc4 <Set_OCR_Value_Timer1+0x6>
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	9a 83       	std	Y+2, r25	; 0x02
     fca:	89 83       	std	Y+1, r24	; 0x01

	OCR1A = val;
     fcc:	ea e4       	ldi	r30, 0x4A	; 74
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	9a 81       	ldd	r25, Y+2	; 0x02
     fd4:	91 83       	std	Z+1, r25	; 0x01
     fd6:	80 83       	st	Z, r24

}
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	08 95       	ret

00000fe2 <Timer1_Stop>:

void Timer1_Stop(void) {
     fe2:	df 93       	push	r29
     fe4:	cf 93       	push	r28
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62

	CLRBIT(TCCR1B, CS10);
     fea:	ae e4       	ldi	r26, 0x4E	; 78
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	ee e4       	ldi	r30, 0x4E	; 78
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	8e 7f       	andi	r24, 0xFE	; 254
     ff6:	8c 93       	st	X, r24
	CLRBIT(TCCR1B, CS11);
     ff8:	ae e4       	ldi	r26, 0x4E	; 78
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	ee e4       	ldi	r30, 0x4E	; 78
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	8d 7f       	andi	r24, 0xFD	; 253
    1004:	8c 93       	st	X, r24
	CLRBIT(TCCR1B, CS12);
    1006:	ae e4       	ldi	r26, 0x4E	; 78
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	ee e4       	ldi	r30, 0x4E	; 78
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	8b 7f       	andi	r24, 0xFB	; 251
    1012:	8c 93       	st	X, r24

}
    1014:	cf 91       	pop	r28
    1016:	df 91       	pop	r29
    1018:	08 95       	ret

0000101a <Timer1_FastPWM_Mode14>:

void Timer1_FastPWM_Mode14(float Duty, UINT16 freq) {
    101a:	0f 93       	push	r16
    101c:	1f 93       	push	r17
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	28 97       	sbiw	r28, 0x08	; 8
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	f8 94       	cli
    102c:	de bf       	out	0x3e, r29	; 62
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	cd bf       	out	0x3d, r28	; 61
    1032:	6b 83       	std	Y+3, r22	; 0x03
    1034:	7c 83       	std	Y+4, r23	; 0x04
    1036:	8d 83       	std	Y+5, r24	; 0x05
    1038:	9e 83       	std	Y+6, r25	; 0x06
    103a:	58 87       	std	Y+8, r21	; 0x08
    103c:	4f 83       	std	Y+7, r20	; 0x07

	UINT16 Per = ((1000000/freq))/0.5;

#elif Timer1_Prescaler == Timer1_Prescalling_64

	UINT16 Per = ((1000000 / freq)) / 4;
    103e:	8f 81       	ldd	r24, Y+7	; 0x07
    1040:	98 85       	ldd	r25, Y+8	; 0x08
    1042:	9c 01       	movw	r18, r24
    1044:	40 e0       	ldi	r20, 0x00	; 0
    1046:	50 e0       	ldi	r21, 0x00	; 0
    1048:	80 e9       	ldi	r24, 0x90	; 144
    104a:	90 ed       	ldi	r25, 0xD0	; 208
    104c:	a3 e0       	ldi	r26, 0x03	; 3
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	bc 01       	movw	r22, r24
    1052:	cd 01       	movw	r24, r26
    1054:	0e 94 5e 14 	call	0x28bc	; 0x28bc <__divmodsi4>
    1058:	da 01       	movw	r26, r20
    105a:	c9 01       	movw	r24, r18
    105c:	9a 83       	std	Y+2, r25	; 0x02
    105e:	89 83       	std	Y+1, r24	; 0x01

	UINT16 Per = ((1000000/freq))/64;

#endif

	ICR1 = Per - 1;
    1060:	e6 e4       	ldi	r30, 0x46	; 70
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	9a 81       	ldd	r25, Y+2	; 0x02
    1068:	01 97       	sbiw	r24, 0x01	; 1
    106a:	91 83       	std	Z+1, r25	; 0x01
    106c:	80 83       	st	Z, r24

#if Timer1_PWM_MODE == Timer1_PWM_NONINVERTING

	OCR1A = ((Duty * Per) / 100) - 1;
    106e:	0a e4       	ldi	r16, 0x4A	; 74
    1070:	10 e0       	ldi	r17, 0x00	; 0
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	9a 81       	ldd	r25, Y+2	; 0x02
    1076:	cc 01       	movw	r24, r24
    1078:	a0 e0       	ldi	r26, 0x00	; 0
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	bc 01       	movw	r22, r24
    107e:	cd 01       	movw	r24, r26
    1080:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1084:	dc 01       	movw	r26, r24
    1086:	cb 01       	movw	r24, r22
    1088:	bc 01       	movw	r22, r24
    108a:	cd 01       	movw	r24, r26
    108c:	2b 81       	ldd	r18, Y+3	; 0x03
    108e:	3c 81       	ldd	r19, Y+4	; 0x04
    1090:	4d 81       	ldd	r20, Y+5	; 0x05
    1092:	5e 81       	ldd	r21, Y+6	; 0x06
    1094:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	bc 01       	movw	r22, r24
    109e:	cd 01       	movw	r24, r26
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	48 ec       	ldi	r20, 0xC8	; 200
    10a6:	52 e4       	ldi	r21, 0x42	; 66
    10a8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    10ac:	dc 01       	movw	r26, r24
    10ae:	cb 01       	movw	r24, r22
    10b0:	bc 01       	movw	r22, r24
    10b2:	cd 01       	movw	r24, r26
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	40 e8       	ldi	r20, 0x80	; 128
    10ba:	5f e3       	ldi	r21, 0x3F	; 63
    10bc:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    10c0:	dc 01       	movw	r26, r24
    10c2:	cb 01       	movw	r24, r22
    10c4:	bc 01       	movw	r22, r24
    10c6:	cd 01       	movw	r24, r26
    10c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10cc:	dc 01       	movw	r26, r24
    10ce:	cb 01       	movw	r24, r22
    10d0:	f8 01       	movw	r30, r16
    10d2:	91 83       	std	Z+1, r25	; 0x01
    10d4:	80 83       	st	Z, r24
	Duty = 100 - Duty;
	OCR1A = ((Duty * Per)/100) -1 ;

#endif

}
    10d6:	28 96       	adiw	r28, 0x08	; 8
    10d8:	0f b6       	in	r0, 0x3f	; 63
    10da:	f8 94       	cli
    10dc:	de bf       	out	0x3e, r29	; 62
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	cd bf       	out	0x3d, r28	; 61
    10e2:	cf 91       	pop	r28
    10e4:	df 91       	pop	r29
    10e6:	1f 91       	pop	r17
    10e8:	0f 91       	pop	r16
    10ea:	08 95       	ret

000010ec <Timer1_FastPWM_Mode15>:

void Timer1_FastPWM_Mode15(float Duty, UINT16 freq) {
    10ec:	0f 93       	push	r16
    10ee:	1f 93       	push	r17
    10f0:	df 93       	push	r29
    10f2:	cf 93       	push	r28
    10f4:	cd b7       	in	r28, 0x3d	; 61
    10f6:	de b7       	in	r29, 0x3e	; 62
    10f8:	28 97       	sbiw	r28, 0x08	; 8
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	f8 94       	cli
    10fe:	de bf       	out	0x3e, r29	; 62
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	cd bf       	out	0x3d, r28	; 61
    1104:	6b 83       	std	Y+3, r22	; 0x03
    1106:	7c 83       	std	Y+4, r23	; 0x04
    1108:	8d 83       	std	Y+5, r24	; 0x05
    110a:	9e 83       	std	Y+6, r25	; 0x06
    110c:	58 87       	std	Y+8, r21	; 0x08
    110e:	4f 83       	std	Y+7, r20	; 0x07

	UINT16 Per = ((1000000/freq))/0.5;

#elif Timer1_Prescaler == Timer1_Prescalling_64

	UINT16 Per = ((1000000 / freq)) / 4;
    1110:	8f 81       	ldd	r24, Y+7	; 0x07
    1112:	98 85       	ldd	r25, Y+8	; 0x08
    1114:	9c 01       	movw	r18, r24
    1116:	40 e0       	ldi	r20, 0x00	; 0
    1118:	50 e0       	ldi	r21, 0x00	; 0
    111a:	80 e9       	ldi	r24, 0x90	; 144
    111c:	90 ed       	ldi	r25, 0xD0	; 208
    111e:	a3 e0       	ldi	r26, 0x03	; 3
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	bc 01       	movw	r22, r24
    1124:	cd 01       	movw	r24, r26
    1126:	0e 94 5e 14 	call	0x28bc	; 0x28bc <__divmodsi4>
    112a:	da 01       	movw	r26, r20
    112c:	c9 01       	movw	r24, r18
    112e:	9a 83       	std	Y+2, r25	; 0x02
    1130:	89 83       	std	Y+1, r24	; 0x01

	UINT16 Per = ((1000000/freq))/64;

#endif

	OCR1A = Per - 1;
    1132:	ea e4       	ldi	r30, 0x4A	; 74
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	9a 81       	ldd	r25, Y+2	; 0x02
    113a:	01 97       	sbiw	r24, 0x01	; 1
    113c:	91 83       	std	Z+1, r25	; 0x01
    113e:	80 83       	st	Z, r24

#if Timer1_PWM_MODE == Timer1_PWM_NONINVERTING

	ICR1 = ((Duty * Per) / 100) - 1;
    1140:	06 e4       	ldi	r16, 0x46	; 70
    1142:	10 e0       	ldi	r17, 0x00	; 0
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	9a 81       	ldd	r25, Y+2	; 0x02
    1148:	cc 01       	movw	r24, r24
    114a:	a0 e0       	ldi	r26, 0x00	; 0
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	bc 01       	movw	r22, r24
    1150:	cd 01       	movw	r24, r26
    1152:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1156:	dc 01       	movw	r26, r24
    1158:	cb 01       	movw	r24, r22
    115a:	bc 01       	movw	r22, r24
    115c:	cd 01       	movw	r24, r26
    115e:	2b 81       	ldd	r18, Y+3	; 0x03
    1160:	3c 81       	ldd	r19, Y+4	; 0x04
    1162:	4d 81       	ldd	r20, Y+5	; 0x05
    1164:	5e 81       	ldd	r21, Y+6	; 0x06
    1166:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    116a:	dc 01       	movw	r26, r24
    116c:	cb 01       	movw	r24, r22
    116e:	bc 01       	movw	r22, r24
    1170:	cd 01       	movw	r24, r26
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	48 ec       	ldi	r20, 0xC8	; 200
    1178:	52 e4       	ldi	r21, 0x42	; 66
    117a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    117e:	dc 01       	movw	r26, r24
    1180:	cb 01       	movw	r24, r22
    1182:	bc 01       	movw	r22, r24
    1184:	cd 01       	movw	r24, r26
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	40 e8       	ldi	r20, 0x80	; 128
    118c:	5f e3       	ldi	r21, 0x3F	; 63
    118e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1192:	dc 01       	movw	r26, r24
    1194:	cb 01       	movw	r24, r22
    1196:	bc 01       	movw	r22, r24
    1198:	cd 01       	movw	r24, r26
    119a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	f8 01       	movw	r30, r16
    11a4:	91 83       	std	Z+1, r25	; 0x01
    11a6:	80 83       	st	Z, r24
	Duty = 100 - Duty;
	ICR1 = ((Duty * Per)/100) -1 ;

#endif

}
    11a8:	28 96       	adiw	r28, 0x08	; 8
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	f8 94       	cli
    11ae:	de bf       	out	0x3e, r29	; 62
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	cd bf       	out	0x3d, r28	; 61
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	1f 91       	pop	r17
    11ba:	0f 91       	pop	r16
    11bc:	08 95       	ret

000011be <Timer1_OVF_SetCallBack>:

void Timer1_OVF_SetCallBack(void (*p2f_var)(void)) {
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	00 d0       	rcall	.+0      	; 0x11c4 <Timer1_OVF_SetCallBack+0x6>
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	9a 83       	std	Y+2, r25	; 0x02
    11ca:	89 83       	std	Y+1, r24	; 0x01
	p2f_1 = p2f_var;
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	9a 81       	ldd	r25, Y+2	; 0x02
    11d0:	90 93 37 02 	sts	0x0237, r25
    11d4:	80 93 36 02 	sts	0x0236, r24
}
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	cf 91       	pop	r28
    11de:	df 91       	pop	r29
    11e0:	08 95       	ret

000011e2 <Timer1_COMA_SetCallBack>:
void Timer1_COMA_SetCallBack(void (*p2f_var)(void)) {
    11e2:	df 93       	push	r29
    11e4:	cf 93       	push	r28
    11e6:	00 d0       	rcall	.+0      	; 0x11e8 <Timer1_COMA_SetCallBack+0x6>
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
    11ec:	9a 83       	std	Y+2, r25	; 0x02
    11ee:	89 83       	std	Y+1, r24	; 0x01
	p2f_2 = p2f_var;
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	9a 81       	ldd	r25, Y+2	; 0x02
    11f4:	90 93 39 02 	sts	0x0239, r25
    11f8:	80 93 38 02 	sts	0x0238, r24
}
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <Timer1_COMB_SetCallBack>:
void Timer1_COMB_SetCallBack(void (*p2f_var)(void)) {
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	00 d0       	rcall	.+0      	; 0x120c <Timer1_COMB_SetCallBack+0x6>
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
    1210:	9a 83       	std	Y+2, r25	; 0x02
    1212:	89 83       	std	Y+1, r24	; 0x01
	p2f_3 = p2f_var;
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	9a 81       	ldd	r25, Y+2	; 0x02
    1218:	90 93 3b 02 	sts	0x023B, r25
    121c:	80 93 3a 02 	sts	0x023A, r24
}
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	cf 91       	pop	r28
    1226:	df 91       	pop	r29
    1228:	08 95       	ret

0000122a <__vector_7>:

void __vector_7(void) __attribute__ ((signal));
void __vector_7(void) {
    122a:	1f 92       	push	r1
    122c:	0f 92       	push	r0
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	0f 92       	push	r0
    1232:	11 24       	eor	r1, r1
    1234:	2f 93       	push	r18
    1236:	3f 93       	push	r19
    1238:	4f 93       	push	r20
    123a:	5f 93       	push	r21
    123c:	6f 93       	push	r22
    123e:	7f 93       	push	r23
    1240:	8f 93       	push	r24
    1242:	9f 93       	push	r25
    1244:	af 93       	push	r26
    1246:	bf 93       	push	r27
    1248:	ef 93       	push	r30
    124a:	ff 93       	push	r31
    124c:	df 93       	push	r29
    124e:	cf 93       	push	r28
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
	if (p2f_2 != NULL)
    1254:	80 91 38 02 	lds	r24, 0x0238
    1258:	90 91 39 02 	lds	r25, 0x0239
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	29 f0       	breq	.+10     	; 0x126a <__vector_7+0x40>
		p2f_2();
    1260:	e0 91 38 02 	lds	r30, 0x0238
    1264:	f0 91 39 02 	lds	r31, 0x0239
    1268:	09 95       	icall
}
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	ff 91       	pop	r31
    1270:	ef 91       	pop	r30
    1272:	bf 91       	pop	r27
    1274:	af 91       	pop	r26
    1276:	9f 91       	pop	r25
    1278:	8f 91       	pop	r24
    127a:	7f 91       	pop	r23
    127c:	6f 91       	pop	r22
    127e:	5f 91       	pop	r21
    1280:	4f 91       	pop	r20
    1282:	3f 91       	pop	r19
    1284:	2f 91       	pop	r18
    1286:	0f 90       	pop	r0
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	0f 90       	pop	r0
    128c:	1f 90       	pop	r1
    128e:	18 95       	reti

00001290 <__vector_8>:

void __vector_8(void) __attribute__ ((signal));
void __vector_8(void) {
    1290:	1f 92       	push	r1
    1292:	0f 92       	push	r0
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	0f 92       	push	r0
    1298:	11 24       	eor	r1, r1
    129a:	2f 93       	push	r18
    129c:	3f 93       	push	r19
    129e:	4f 93       	push	r20
    12a0:	5f 93       	push	r21
    12a2:	6f 93       	push	r22
    12a4:	7f 93       	push	r23
    12a6:	8f 93       	push	r24
    12a8:	9f 93       	push	r25
    12aa:	af 93       	push	r26
    12ac:	bf 93       	push	r27
    12ae:	ef 93       	push	r30
    12b0:	ff 93       	push	r31
    12b2:	df 93       	push	r29
    12b4:	cf 93       	push	r28
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
	if (p2f_3 != NULL)
    12ba:	80 91 3a 02 	lds	r24, 0x023A
    12be:	90 91 3b 02 	lds	r25, 0x023B
    12c2:	00 97       	sbiw	r24, 0x00	; 0
    12c4:	29 f0       	breq	.+10     	; 0x12d0 <__vector_8+0x40>
		p2f_3();
    12c6:	e0 91 3a 02 	lds	r30, 0x023A
    12ca:	f0 91 3b 02 	lds	r31, 0x023B
    12ce:	09 95       	icall
}
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	ff 91       	pop	r31
    12d6:	ef 91       	pop	r30
    12d8:	bf 91       	pop	r27
    12da:	af 91       	pop	r26
    12dc:	9f 91       	pop	r25
    12de:	8f 91       	pop	r24
    12e0:	7f 91       	pop	r23
    12e2:	6f 91       	pop	r22
    12e4:	5f 91       	pop	r21
    12e6:	4f 91       	pop	r20
    12e8:	3f 91       	pop	r19
    12ea:	2f 91       	pop	r18
    12ec:	0f 90       	pop	r0
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	0f 90       	pop	r0
    12f2:	1f 90       	pop	r1
    12f4:	18 95       	reti

000012f6 <__vector_9>:

void __vector_9(void) __attribute__ ((signal));
void __vector_9(void) {
    12f6:	1f 92       	push	r1
    12f8:	0f 92       	push	r0
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	0f 92       	push	r0
    12fe:	11 24       	eor	r1, r1
    1300:	2f 93       	push	r18
    1302:	3f 93       	push	r19
    1304:	4f 93       	push	r20
    1306:	5f 93       	push	r21
    1308:	6f 93       	push	r22
    130a:	7f 93       	push	r23
    130c:	8f 93       	push	r24
    130e:	9f 93       	push	r25
    1310:	af 93       	push	r26
    1312:	bf 93       	push	r27
    1314:	ef 93       	push	r30
    1316:	ff 93       	push	r31
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
	if (p2f_1 != NULL)
    1320:	80 91 36 02 	lds	r24, 0x0236
    1324:	90 91 37 02 	lds	r25, 0x0237
    1328:	00 97       	sbiw	r24, 0x00	; 0
    132a:	29 f0       	breq	.+10     	; 0x1336 <__vector_9+0x40>
		p2f_1();
    132c:	e0 91 36 02 	lds	r30, 0x0236
    1330:	f0 91 37 02 	lds	r31, 0x0237
    1334:	09 95       	icall
}
    1336:	cf 91       	pop	r28
    1338:	df 91       	pop	r29
    133a:	ff 91       	pop	r31
    133c:	ef 91       	pop	r30
    133e:	bf 91       	pop	r27
    1340:	af 91       	pop	r26
    1342:	9f 91       	pop	r25
    1344:	8f 91       	pop	r24
    1346:	7f 91       	pop	r23
    1348:	6f 91       	pop	r22
    134a:	5f 91       	pop	r21
    134c:	4f 91       	pop	r20
    134e:	3f 91       	pop	r19
    1350:	2f 91       	pop	r18
    1352:	0f 90       	pop	r0
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	0f 90       	pop	r0
    1358:	1f 90       	pop	r1
    135a:	18 95       	reti

0000135c <Dio_Init>:
 *      Author: Esraa Ahmed Taha
 */

#include "Dio.h"

void Dio_Init(){
    135c:	df 93       	push	r29
    135e:	cf 93       	push	r28
    1360:	00 d0       	rcall	.+0      	; 0x1362 <Dio_Init+0x6>
    1362:	00 d0       	rcall	.+0      	; 0x1364 <Dio_Init+0x8>
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62

	for (int i=0 ; i< No_of_DIO ; i++){
    1368:	1a 82       	std	Y+2, r1	; 0x02
    136a:	19 82       	std	Y+1, r1	; 0x01
    136c:	c7 c1       	rjmp	.+910    	; 0x16fc <Dio_Init+0x3a0>

		switch (Pin_Cfg[i].Port){
    136e:	29 81       	ldd	r18, Y+1	; 0x01
    1370:	3a 81       	ldd	r19, Y+2	; 0x02
    1372:	c9 01       	movw	r24, r18
    1374:	88 0f       	add	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	82 0f       	add	r24, r18
    137a:	93 1f       	adc	r25, r19
    137c:	fc 01       	movw	r30, r24
    137e:	e4 50       	subi	r30, 0x04	; 4
    1380:	fe 4f       	sbci	r31, 0xFE	; 254
    1382:	80 81       	ld	r24, Z
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	3c 83       	std	Y+4, r19	; 0x04
    138a:	2b 83       	std	Y+3, r18	; 0x03
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	9c 81       	ldd	r25, Y+4	; 0x04
    1390:	81 30       	cpi	r24, 0x01	; 1
    1392:	91 05       	cpc	r25, r1
    1394:	09 f4       	brne	.+2      	; 0x1398 <Dio_Init+0x3c>
    1396:	7d c0       	rjmp	.+250    	; 0x1492 <Dio_Init+0x136>
    1398:	2b 81       	ldd	r18, Y+3	; 0x03
    139a:	3c 81       	ldd	r19, Y+4	; 0x04
    139c:	22 30       	cpi	r18, 0x02	; 2
    139e:	31 05       	cpc	r19, r1
    13a0:	2c f4       	brge	.+10     	; 0x13ac <Dio_Init+0x50>
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	9c 81       	ldd	r25, Y+4	; 0x04
    13a6:	00 97       	sbiw	r24, 0x00	; 0
    13a8:	71 f0       	breq	.+28     	; 0x13c6 <Dio_Init+0x6a>
    13aa:	a3 c1       	rjmp	.+838    	; 0x16f2 <Dio_Init+0x396>
    13ac:	2b 81       	ldd	r18, Y+3	; 0x03
    13ae:	3c 81       	ldd	r19, Y+4	; 0x04
    13b0:	22 30       	cpi	r18, 0x02	; 2
    13b2:	31 05       	cpc	r19, r1
    13b4:	09 f4       	brne	.+2      	; 0x13b8 <Dio_Init+0x5c>
    13b6:	d3 c0       	rjmp	.+422    	; 0x155e <Dio_Init+0x202>
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	9c 81       	ldd	r25, Y+4	; 0x04
    13bc:	83 30       	cpi	r24, 0x03	; 3
    13be:	91 05       	cpc	r25, r1
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <Dio_Init+0x68>
    13c2:	33 c1       	rjmp	.+614    	; 0x162a <Dio_Init+0x2ce>
    13c4:	96 c1       	rjmp	.+812    	; 0x16f2 <Dio_Init+0x396>

			case Dio_PORTA :
				if(Pin_Cfg[i].Dir){
    13c6:	29 81       	ldd	r18, Y+1	; 0x01
    13c8:	3a 81       	ldd	r19, Y+2	; 0x02
    13ca:	c9 01       	movw	r24, r18
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	82 0f       	add	r24, r18
    13d2:	93 1f       	adc	r25, r19
    13d4:	fc 01       	movw	r30, r24
    13d6:	e2 50       	subi	r30, 0x02	; 2
    13d8:	fe 4f       	sbci	r31, 0xFE	; 254
    13da:	80 81       	ld	r24, Z
    13dc:	88 23       	and	r24, r24
    13de:	f1 f0       	breq	.+60     	; 0x141c <Dio_Init+0xc0>
					SETBIT(DDRA , Pin_Cfg[i].Pin);
    13e0:	aa e3       	ldi	r26, 0x3A	; 58
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	ea e3       	ldi	r30, 0x3A	; 58
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	48 2f       	mov	r20, r24
    13ec:	29 81       	ldd	r18, Y+1	; 0x01
    13ee:	3a 81       	ldd	r19, Y+2	; 0x02
    13f0:	c9 01       	movw	r24, r18
    13f2:	88 0f       	add	r24, r24
    13f4:	99 1f       	adc	r25, r25
    13f6:	82 0f       	add	r24, r18
    13f8:	93 1f       	adc	r25, r19
    13fa:	fc 01       	movw	r30, r24
    13fc:	e3 50       	subi	r30, 0x03	; 3
    13fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1400:	80 81       	ld	r24, Z
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	02 2e       	mov	r0, r18
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <Dio_Init+0xb6>
    140e:	88 0f       	add	r24, r24
    1410:	99 1f       	adc	r25, r25
    1412:	0a 94       	dec	r0
    1414:	e2 f7       	brpl	.-8      	; 0x140e <Dio_Init+0xb2>
    1416:	84 2b       	or	r24, r20
    1418:	8c 93       	st	X, r24
    141a:	6b c1       	rjmp	.+726    	; 0x16f2 <Dio_Init+0x396>
				}
				else{
					CLRBIT(DDRA , Pin_Cfg[i].Pin);
    141c:	aa e3       	ldi	r26, 0x3A	; 58
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	ea e3       	ldi	r30, 0x3A	; 58
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	48 2f       	mov	r20, r24
    1428:	29 81       	ldd	r18, Y+1	; 0x01
    142a:	3a 81       	ldd	r19, Y+2	; 0x02
    142c:	c9 01       	movw	r24, r18
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	82 0f       	add	r24, r18
    1434:	93 1f       	adc	r25, r19
    1436:	fc 01       	movw	r30, r24
    1438:	e3 50       	subi	r30, 0x03	; 3
    143a:	fe 4f       	sbci	r31, 0xFE	; 254
    143c:	80 81       	ld	r24, Z
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	02 c0       	rjmp	.+4      	; 0x144c <Dio_Init+0xf0>
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	2a 95       	dec	r18
    144e:	e2 f7       	brpl	.-8      	; 0x1448 <Dio_Init+0xec>
    1450:	80 95       	com	r24
    1452:	84 23       	and	r24, r20
    1454:	8c 93       	st	X, r24
					SETBIT(PORTA , Pin_Cfg[i].Pin);
    1456:	ab e3       	ldi	r26, 0x3B	; 59
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	eb e3       	ldi	r30, 0x3B	; 59
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	48 2f       	mov	r20, r24
    1462:	29 81       	ldd	r18, Y+1	; 0x01
    1464:	3a 81       	ldd	r19, Y+2	; 0x02
    1466:	c9 01       	movw	r24, r18
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	82 0f       	add	r24, r18
    146e:	93 1f       	adc	r25, r19
    1470:	fc 01       	movw	r30, r24
    1472:	e3 50       	subi	r30, 0x03	; 3
    1474:	fe 4f       	sbci	r31, 0xFE	; 254
    1476:	80 81       	ld	r24, Z
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	02 2e       	mov	r0, r18
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <Dio_Init+0x12c>
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	0a 94       	dec	r0
    148a:	e2 f7       	brpl	.-8      	; 0x1484 <Dio_Init+0x128>
    148c:	84 2b       	or	r24, r20
    148e:	8c 93       	st	X, r24
    1490:	30 c1       	rjmp	.+608    	; 0x16f2 <Dio_Init+0x396>
				}
				break;

			case Dio_PORTB :
				if(Pin_Cfg[i].Dir){
    1492:	29 81       	ldd	r18, Y+1	; 0x01
    1494:	3a 81       	ldd	r19, Y+2	; 0x02
    1496:	c9 01       	movw	r24, r18
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	82 0f       	add	r24, r18
    149e:	93 1f       	adc	r25, r19
    14a0:	fc 01       	movw	r30, r24
    14a2:	e2 50       	subi	r30, 0x02	; 2
    14a4:	fe 4f       	sbci	r31, 0xFE	; 254
    14a6:	80 81       	ld	r24, Z
    14a8:	88 23       	and	r24, r24
    14aa:	f1 f0       	breq	.+60     	; 0x14e8 <Dio_Init+0x18c>
					SETBIT(DDRB , Pin_Cfg[i].Pin);
    14ac:	a7 e3       	ldi	r26, 0x37	; 55
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e7 e3       	ldi	r30, 0x37	; 55
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	48 2f       	mov	r20, r24
    14b8:	29 81       	ldd	r18, Y+1	; 0x01
    14ba:	3a 81       	ldd	r19, Y+2	; 0x02
    14bc:	c9 01       	movw	r24, r18
    14be:	88 0f       	add	r24, r24
    14c0:	99 1f       	adc	r25, r25
    14c2:	82 0f       	add	r24, r18
    14c4:	93 1f       	adc	r25, r19
    14c6:	fc 01       	movw	r30, r24
    14c8:	e3 50       	subi	r30, 0x03	; 3
    14ca:	fe 4f       	sbci	r31, 0xFE	; 254
    14cc:	80 81       	ld	r24, Z
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	02 2e       	mov	r0, r18
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <Dio_Init+0x182>
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	0a 94       	dec	r0
    14e0:	e2 f7       	brpl	.-8      	; 0x14da <Dio_Init+0x17e>
    14e2:	84 2b       	or	r24, r20
    14e4:	8c 93       	st	X, r24
    14e6:	05 c1       	rjmp	.+522    	; 0x16f2 <Dio_Init+0x396>
				}
				else{
					CLRBIT(DDRB , Pin_Cfg[i].Pin);
    14e8:	a7 e3       	ldi	r26, 0x37	; 55
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	e7 e3       	ldi	r30, 0x37	; 55
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	48 2f       	mov	r20, r24
    14f4:	29 81       	ldd	r18, Y+1	; 0x01
    14f6:	3a 81       	ldd	r19, Y+2	; 0x02
    14f8:	c9 01       	movw	r24, r18
    14fa:	88 0f       	add	r24, r24
    14fc:	99 1f       	adc	r25, r25
    14fe:	82 0f       	add	r24, r18
    1500:	93 1f       	adc	r25, r19
    1502:	fc 01       	movw	r30, r24
    1504:	e3 50       	subi	r30, 0x03	; 3
    1506:	fe 4f       	sbci	r31, 0xFE	; 254
    1508:	80 81       	ld	r24, Z
    150a:	28 2f       	mov	r18, r24
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <Dio_Init+0x1bc>
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	2a 95       	dec	r18
    151a:	e2 f7       	brpl	.-8      	; 0x1514 <Dio_Init+0x1b8>
    151c:	80 95       	com	r24
    151e:	84 23       	and	r24, r20
    1520:	8c 93       	st	X, r24
					SETBIT(PORTB , Pin_Cfg[i].Pin);
    1522:	a8 e3       	ldi	r26, 0x38	; 56
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e8 e3       	ldi	r30, 0x38	; 56
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	48 2f       	mov	r20, r24
    152e:	29 81       	ldd	r18, Y+1	; 0x01
    1530:	3a 81       	ldd	r19, Y+2	; 0x02
    1532:	c9 01       	movw	r24, r18
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	82 0f       	add	r24, r18
    153a:	93 1f       	adc	r25, r19
    153c:	fc 01       	movw	r30, r24
    153e:	e3 50       	subi	r30, 0x03	; 3
    1540:	fe 4f       	sbci	r31, 0xFE	; 254
    1542:	80 81       	ld	r24, Z
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	02 2e       	mov	r0, r18
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <Dio_Init+0x1f8>
    1550:	88 0f       	add	r24, r24
    1552:	99 1f       	adc	r25, r25
    1554:	0a 94       	dec	r0
    1556:	e2 f7       	brpl	.-8      	; 0x1550 <Dio_Init+0x1f4>
    1558:	84 2b       	or	r24, r20
    155a:	8c 93       	st	X, r24
    155c:	ca c0       	rjmp	.+404    	; 0x16f2 <Dio_Init+0x396>
				}
				break;

			case Dio_PORTC :
				if(Pin_Cfg[i].Dir){
    155e:	29 81       	ldd	r18, Y+1	; 0x01
    1560:	3a 81       	ldd	r19, Y+2	; 0x02
    1562:	c9 01       	movw	r24, r18
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	82 0f       	add	r24, r18
    156a:	93 1f       	adc	r25, r19
    156c:	fc 01       	movw	r30, r24
    156e:	e2 50       	subi	r30, 0x02	; 2
    1570:	fe 4f       	sbci	r31, 0xFE	; 254
    1572:	80 81       	ld	r24, Z
    1574:	88 23       	and	r24, r24
    1576:	f1 f0       	breq	.+60     	; 0x15b4 <Dio_Init+0x258>
					SETBIT(DDRC , Pin_Cfg[i].Pin);
    1578:	a4 e3       	ldi	r26, 0x34	; 52
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e4 e3       	ldi	r30, 0x34	; 52
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	48 2f       	mov	r20, r24
    1584:	29 81       	ldd	r18, Y+1	; 0x01
    1586:	3a 81       	ldd	r19, Y+2	; 0x02
    1588:	c9 01       	movw	r24, r18
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	82 0f       	add	r24, r18
    1590:	93 1f       	adc	r25, r19
    1592:	fc 01       	movw	r30, r24
    1594:	e3 50       	subi	r30, 0x03	; 3
    1596:	fe 4f       	sbci	r31, 0xFE	; 254
    1598:	80 81       	ld	r24, Z
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	02 2e       	mov	r0, r18
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <Dio_Init+0x24e>
    15a6:	88 0f       	add	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	0a 94       	dec	r0
    15ac:	e2 f7       	brpl	.-8      	; 0x15a6 <Dio_Init+0x24a>
    15ae:	84 2b       	or	r24, r20
    15b0:	8c 93       	st	X, r24
    15b2:	9f c0       	rjmp	.+318    	; 0x16f2 <Dio_Init+0x396>
				}
				else{
					CLRBIT(DDRC , Pin_Cfg[i].Pin);
    15b4:	a4 e3       	ldi	r26, 0x34	; 52
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e4 e3       	ldi	r30, 0x34	; 52
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	48 2f       	mov	r20, r24
    15c0:	29 81       	ldd	r18, Y+1	; 0x01
    15c2:	3a 81       	ldd	r19, Y+2	; 0x02
    15c4:	c9 01       	movw	r24, r18
    15c6:	88 0f       	add	r24, r24
    15c8:	99 1f       	adc	r25, r25
    15ca:	82 0f       	add	r24, r18
    15cc:	93 1f       	adc	r25, r19
    15ce:	fc 01       	movw	r30, r24
    15d0:	e3 50       	subi	r30, 0x03	; 3
    15d2:	fe 4f       	sbci	r31, 0xFE	; 254
    15d4:	80 81       	ld	r24, Z
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <Dio_Init+0x288>
    15e0:	88 0f       	add	r24, r24
    15e2:	99 1f       	adc	r25, r25
    15e4:	2a 95       	dec	r18
    15e6:	e2 f7       	brpl	.-8      	; 0x15e0 <Dio_Init+0x284>
    15e8:	80 95       	com	r24
    15ea:	84 23       	and	r24, r20
    15ec:	8c 93       	st	X, r24
					SETBIT(PORTC , Pin_Cfg[i].Pin);
    15ee:	a5 e3       	ldi	r26, 0x35	; 53
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	e5 e3       	ldi	r30, 0x35	; 53
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	48 2f       	mov	r20, r24
    15fa:	29 81       	ldd	r18, Y+1	; 0x01
    15fc:	3a 81       	ldd	r19, Y+2	; 0x02
    15fe:	c9 01       	movw	r24, r18
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	82 0f       	add	r24, r18
    1606:	93 1f       	adc	r25, r19
    1608:	fc 01       	movw	r30, r24
    160a:	e3 50       	subi	r30, 0x03	; 3
    160c:	fe 4f       	sbci	r31, 0xFE	; 254
    160e:	80 81       	ld	r24, Z
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	02 2e       	mov	r0, r18
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <Dio_Init+0x2c4>
    161c:	88 0f       	add	r24, r24
    161e:	99 1f       	adc	r25, r25
    1620:	0a 94       	dec	r0
    1622:	e2 f7       	brpl	.-8      	; 0x161c <Dio_Init+0x2c0>
    1624:	84 2b       	or	r24, r20
    1626:	8c 93       	st	X, r24
    1628:	64 c0       	rjmp	.+200    	; 0x16f2 <Dio_Init+0x396>
				}
				break;

			case Dio_PORTD :
				if(Pin_Cfg[i].Dir){
    162a:	29 81       	ldd	r18, Y+1	; 0x01
    162c:	3a 81       	ldd	r19, Y+2	; 0x02
    162e:	c9 01       	movw	r24, r18
    1630:	88 0f       	add	r24, r24
    1632:	99 1f       	adc	r25, r25
    1634:	82 0f       	add	r24, r18
    1636:	93 1f       	adc	r25, r19
    1638:	fc 01       	movw	r30, r24
    163a:	e2 50       	subi	r30, 0x02	; 2
    163c:	fe 4f       	sbci	r31, 0xFE	; 254
    163e:	80 81       	ld	r24, Z
    1640:	88 23       	and	r24, r24
    1642:	f1 f0       	breq	.+60     	; 0x1680 <Dio_Init+0x324>
					SETBIT(DDRD , Pin_Cfg[i].Pin);
    1644:	a1 e3       	ldi	r26, 0x31	; 49
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	e1 e3       	ldi	r30, 0x31	; 49
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	48 2f       	mov	r20, r24
    1650:	29 81       	ldd	r18, Y+1	; 0x01
    1652:	3a 81       	ldd	r19, Y+2	; 0x02
    1654:	c9 01       	movw	r24, r18
    1656:	88 0f       	add	r24, r24
    1658:	99 1f       	adc	r25, r25
    165a:	82 0f       	add	r24, r18
    165c:	93 1f       	adc	r25, r19
    165e:	fc 01       	movw	r30, r24
    1660:	e3 50       	subi	r30, 0x03	; 3
    1662:	fe 4f       	sbci	r31, 0xFE	; 254
    1664:	80 81       	ld	r24, Z
    1666:	28 2f       	mov	r18, r24
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	02 2e       	mov	r0, r18
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <Dio_Init+0x31a>
    1672:	88 0f       	add	r24, r24
    1674:	99 1f       	adc	r25, r25
    1676:	0a 94       	dec	r0
    1678:	e2 f7       	brpl	.-8      	; 0x1672 <Dio_Init+0x316>
    167a:	84 2b       	or	r24, r20
    167c:	8c 93       	st	X, r24
    167e:	39 c0       	rjmp	.+114    	; 0x16f2 <Dio_Init+0x396>
				}
				else{
					CLRBIT(DDRD , Pin_Cfg[i].Pin);
    1680:	a1 e3       	ldi	r26, 0x31	; 49
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	e1 e3       	ldi	r30, 0x31	; 49
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	48 2f       	mov	r20, r24
    168c:	29 81       	ldd	r18, Y+1	; 0x01
    168e:	3a 81       	ldd	r19, Y+2	; 0x02
    1690:	c9 01       	movw	r24, r18
    1692:	88 0f       	add	r24, r24
    1694:	99 1f       	adc	r25, r25
    1696:	82 0f       	add	r24, r18
    1698:	93 1f       	adc	r25, r19
    169a:	fc 01       	movw	r30, r24
    169c:	e3 50       	subi	r30, 0x03	; 3
    169e:	fe 4f       	sbci	r31, 0xFE	; 254
    16a0:	80 81       	ld	r24, Z
    16a2:	28 2f       	mov	r18, r24
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <Dio_Init+0x354>
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	2a 95       	dec	r18
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <Dio_Init+0x350>
    16b4:	80 95       	com	r24
    16b6:	84 23       	and	r24, r20
    16b8:	8c 93       	st	X, r24
					SETBIT(PORTD , Pin_Cfg[i].Pin);
    16ba:	a2 e3       	ldi	r26, 0x32	; 50
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e2 e3       	ldi	r30, 0x32	; 50
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	48 2f       	mov	r20, r24
    16c6:	29 81       	ldd	r18, Y+1	; 0x01
    16c8:	3a 81       	ldd	r19, Y+2	; 0x02
    16ca:	c9 01       	movw	r24, r18
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	82 0f       	add	r24, r18
    16d2:	93 1f       	adc	r25, r19
    16d4:	fc 01       	movw	r30, r24
    16d6:	e3 50       	subi	r30, 0x03	; 3
    16d8:	fe 4f       	sbci	r31, 0xFE	; 254
    16da:	80 81       	ld	r24, Z
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <Dio_Init+0x38e>
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	2a 95       	dec	r18
    16ec:	e2 f7       	brpl	.-8      	; 0x16e6 <Dio_Init+0x38a>
    16ee:	84 2b       	or	r24, r20
    16f0:	8c 93       	st	X, r24

#include "Dio.h"

void Dio_Init(){

	for (int i=0 ; i< No_of_DIO ; i++){
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	9a 81       	ldd	r25, Y+2	; 0x02
    16f6:	01 96       	adiw	r24, 0x01	; 1
    16f8:	9a 83       	std	Y+2, r25	; 0x02
    16fa:	89 83       	std	Y+1, r24	; 0x01
    16fc:	20 91 2f 02 	lds	r18, 0x022F
    1700:	30 91 30 02 	lds	r19, 0x0230
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	9a 81       	ldd	r25, Y+2	; 0x02
    1708:	82 17       	cp	r24, r18
    170a:	93 07       	cpc	r25, r19
    170c:	0c f4       	brge	.+2      	; 0x1710 <Dio_Init+0x3b4>
    170e:	2f ce       	rjmp	.-930    	; 0x136e <Dio_Init+0x12>
					SETBIT(PORTD , Pin_Cfg[i].Pin);
				}
				break;
		}
	}
}
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	cf 91       	pop	r28
    171a:	df 91       	pop	r29
    171c:	08 95       	ret

0000171e <Dio_WriteChannel>:

void Dio_WriteChannel(Pin_Channel_Type channel, Pin_Status_Type status){
    171e:	df 93       	push	r29
    1720:	cf 93       	push	r28
    1722:	00 d0       	rcall	.+0      	; 0x1724 <Dio_WriteChannel+0x6>
    1724:	00 d0       	rcall	.+0      	; 0x1726 <Dio_WriteChannel+0x8>
    1726:	00 d0       	rcall	.+0      	; 0x1728 <Dio_WriteChannel+0xa>
    1728:	cd b7       	in	r28, 0x3d	; 61
    172a:	de b7       	in	r29, 0x3e	; 62
    172c:	8b 83       	std	Y+3, r24	; 0x03
    172e:	6c 83       	std	Y+4, r22	; 0x04

	Dio_Port_Type port = channel/8;
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	86 95       	lsr	r24
    1734:	86 95       	lsr	r24
    1736:	86 95       	lsr	r24
    1738:	8a 83       	std	Y+2, r24	; 0x02
	UINT8 pin = channel%8;
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	87 70       	andi	r24, 0x07	; 7
    173e:	89 83       	std	Y+1, r24	; 0x01

	switch (port) {
    1740:	8a 81       	ldd	r24, Y+2	; 0x02
    1742:	28 2f       	mov	r18, r24
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	3e 83       	std	Y+6, r19	; 0x06
    1748:	2d 83       	std	Y+5, r18	; 0x05
    174a:	8d 81       	ldd	r24, Y+5	; 0x05
    174c:	9e 81       	ldd	r25, Y+6	; 0x06
    174e:	81 30       	cpi	r24, 0x01	; 1
    1750:	91 05       	cpc	r25, r1
    1752:	09 f4       	brne	.+2      	; 0x1756 <Dio_WriteChannel+0x38>
    1754:	43 c0       	rjmp	.+134    	; 0x17dc <Dio_WriteChannel+0xbe>
    1756:	2d 81       	ldd	r18, Y+5	; 0x05
    1758:	3e 81       	ldd	r19, Y+6	; 0x06
    175a:	22 30       	cpi	r18, 0x02	; 2
    175c:	31 05       	cpc	r19, r1
    175e:	2c f4       	brge	.+10     	; 0x176a <Dio_WriteChannel+0x4c>
    1760:	8d 81       	ldd	r24, Y+5	; 0x05
    1762:	9e 81       	ldd	r25, Y+6	; 0x06
    1764:	00 97       	sbiw	r24, 0x00	; 0
    1766:	71 f0       	breq	.+28     	; 0x1784 <Dio_WriteChannel+0x66>
    1768:	bc c0       	rjmp	.+376    	; 0x18e2 <Dio_WriteChannel+0x1c4>
    176a:	2d 81       	ldd	r18, Y+5	; 0x05
    176c:	3e 81       	ldd	r19, Y+6	; 0x06
    176e:	22 30       	cpi	r18, 0x02	; 2
    1770:	31 05       	cpc	r19, r1
    1772:	09 f4       	brne	.+2      	; 0x1776 <Dio_WriteChannel+0x58>
    1774:	5f c0       	rjmp	.+190    	; 0x1834 <Dio_WriteChannel+0x116>
    1776:	8d 81       	ldd	r24, Y+5	; 0x05
    1778:	9e 81       	ldd	r25, Y+6	; 0x06
    177a:	83 30       	cpi	r24, 0x03	; 3
    177c:	91 05       	cpc	r25, r1
    177e:	09 f4       	brne	.+2      	; 0x1782 <Dio_WriteChannel+0x64>
    1780:	85 c0       	rjmp	.+266    	; 0x188c <Dio_WriteChannel+0x16e>
    1782:	af c0       	rjmp	.+350    	; 0x18e2 <Dio_WriteChannel+0x1c4>
		case Dio_PORTA :
				if(status == LOW){
    1784:	8c 81       	ldd	r24, Y+4	; 0x04
    1786:	88 23       	and	r24, r24
    1788:	a9 f4       	brne	.+42     	; 0x17b4 <Dio_WriteChannel+0x96>
					CLRBIT(PORTA , pin);
    178a:	ab e3       	ldi	r26, 0x3B	; 59
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	eb e3       	ldi	r30, 0x3B	; 59
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	48 2f       	mov	r20, r24
    1796:	89 81       	ldd	r24, Y+1	; 0x01
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	02 2e       	mov	r0, r18
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <Dio_WriteChannel+0x8a>
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	0a 94       	dec	r0
    17aa:	e2 f7       	brpl	.-8      	; 0x17a4 <Dio_WriteChannel+0x86>
    17ac:	80 95       	com	r24
    17ae:	84 23       	and	r24, r20
    17b0:	8c 93       	st	X, r24
    17b2:	97 c0       	rjmp	.+302    	; 0x18e2 <Dio_WriteChannel+0x1c4>
				}
				else{
					SETBIT(PORTA , pin);
    17b4:	ab e3       	ldi	r26, 0x3B	; 59
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	eb e3       	ldi	r30, 0x3B	; 59
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	48 2f       	mov	r20, r24
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	28 2f       	mov	r18, r24
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	02 2e       	mov	r0, r18
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <Dio_WriteChannel+0xb4>
    17ce:	88 0f       	add	r24, r24
    17d0:	99 1f       	adc	r25, r25
    17d2:	0a 94       	dec	r0
    17d4:	e2 f7       	brpl	.-8      	; 0x17ce <Dio_WriteChannel+0xb0>
    17d6:	84 2b       	or	r24, r20
    17d8:	8c 93       	st	X, r24
    17da:	83 c0       	rjmp	.+262    	; 0x18e2 <Dio_WriteChannel+0x1c4>
				}
				break;

		case Dio_PORTB :
				if(status == LOW){
    17dc:	8c 81       	ldd	r24, Y+4	; 0x04
    17de:	88 23       	and	r24, r24
    17e0:	a9 f4       	brne	.+42     	; 0x180c <Dio_WriteChannel+0xee>
					CLRBIT(PORTB , pin);
    17e2:	a8 e3       	ldi	r26, 0x38	; 56
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e8 e3       	ldi	r30, 0x38	; 56
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	48 2f       	mov	r20, r24
    17ee:	89 81       	ldd	r24, Y+1	; 0x01
    17f0:	28 2f       	mov	r18, r24
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	02 2e       	mov	r0, r18
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <Dio_WriteChannel+0xe2>
    17fc:	88 0f       	add	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	0a 94       	dec	r0
    1802:	e2 f7       	brpl	.-8      	; 0x17fc <Dio_WriteChannel+0xde>
    1804:	80 95       	com	r24
    1806:	84 23       	and	r24, r20
    1808:	8c 93       	st	X, r24
    180a:	6b c0       	rjmp	.+214    	; 0x18e2 <Dio_WriteChannel+0x1c4>
				}
				else{
					SETBIT(PORTB , pin);
    180c:	a8 e3       	ldi	r26, 0x38	; 56
    180e:	b0 e0       	ldi	r27, 0x00	; 0
    1810:	e8 e3       	ldi	r30, 0x38	; 56
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	48 2f       	mov	r20, r24
    1818:	89 81       	ldd	r24, Y+1	; 0x01
    181a:	28 2f       	mov	r18, r24
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	02 2e       	mov	r0, r18
    1824:	02 c0       	rjmp	.+4      	; 0x182a <Dio_WriteChannel+0x10c>
    1826:	88 0f       	add	r24, r24
    1828:	99 1f       	adc	r25, r25
    182a:	0a 94       	dec	r0
    182c:	e2 f7       	brpl	.-8      	; 0x1826 <Dio_WriteChannel+0x108>
    182e:	84 2b       	or	r24, r20
    1830:	8c 93       	st	X, r24
    1832:	57 c0       	rjmp	.+174    	; 0x18e2 <Dio_WriteChannel+0x1c4>
				}
				break;

		case Dio_PORTC :
				if(status == LOW){
    1834:	8c 81       	ldd	r24, Y+4	; 0x04
    1836:	88 23       	and	r24, r24
    1838:	a9 f4       	brne	.+42     	; 0x1864 <Dio_WriteChannel+0x146>
					CLRBIT(PORTC , pin);
    183a:	a5 e3       	ldi	r26, 0x35	; 53
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	e5 e3       	ldi	r30, 0x35	; 53
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	48 2f       	mov	r20, r24
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	02 2e       	mov	r0, r18
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <Dio_WriteChannel+0x13a>
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	0a 94       	dec	r0
    185a:	e2 f7       	brpl	.-8      	; 0x1854 <Dio_WriteChannel+0x136>
    185c:	80 95       	com	r24
    185e:	84 23       	and	r24, r20
    1860:	8c 93       	st	X, r24
    1862:	3f c0       	rjmp	.+126    	; 0x18e2 <Dio_WriteChannel+0x1c4>
				}
				else{
					SETBIT(PORTC , pin);
    1864:	a5 e3       	ldi	r26, 0x35	; 53
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	e5 e3       	ldi	r30, 0x35	; 53
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	48 2f       	mov	r20, r24
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	28 2f       	mov	r18, r24
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	02 2e       	mov	r0, r18
    187c:	02 c0       	rjmp	.+4      	; 0x1882 <Dio_WriteChannel+0x164>
    187e:	88 0f       	add	r24, r24
    1880:	99 1f       	adc	r25, r25
    1882:	0a 94       	dec	r0
    1884:	e2 f7       	brpl	.-8      	; 0x187e <Dio_WriteChannel+0x160>
    1886:	84 2b       	or	r24, r20
    1888:	8c 93       	st	X, r24
    188a:	2b c0       	rjmp	.+86     	; 0x18e2 <Dio_WriteChannel+0x1c4>
				}
				break;

		case Dio_PORTD :
				if(status == LOW){
    188c:	8c 81       	ldd	r24, Y+4	; 0x04
    188e:	88 23       	and	r24, r24
    1890:	a9 f4       	brne	.+42     	; 0x18bc <Dio_WriteChannel+0x19e>
					CLRBIT(PORTD , pin);
    1892:	a2 e3       	ldi	r26, 0x32	; 50
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	e2 e3       	ldi	r30, 0x32	; 50
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	48 2f       	mov	r20, r24
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	02 2e       	mov	r0, r18
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <Dio_WriteChannel+0x192>
    18ac:	88 0f       	add	r24, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	0a 94       	dec	r0
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <Dio_WriteChannel+0x18e>
    18b4:	80 95       	com	r24
    18b6:	84 23       	and	r24, r20
    18b8:	8c 93       	st	X, r24
    18ba:	13 c0       	rjmp	.+38     	; 0x18e2 <Dio_WriteChannel+0x1c4>
				}
				else{
					SETBIT(PORTD , pin);
    18bc:	a2 e3       	ldi	r26, 0x32	; 50
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	e2 e3       	ldi	r30, 0x32	; 50
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	48 2f       	mov	r20, r24
    18c8:	89 81       	ldd	r24, Y+1	; 0x01
    18ca:	28 2f       	mov	r18, r24
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	02 2e       	mov	r0, r18
    18d4:	02 c0       	rjmp	.+4      	; 0x18da <Dio_WriteChannel+0x1bc>
    18d6:	88 0f       	add	r24, r24
    18d8:	99 1f       	adc	r25, r25
    18da:	0a 94       	dec	r0
    18dc:	e2 f7       	brpl	.-8      	; 0x18d6 <Dio_WriteChannel+0x1b8>
    18de:	84 2b       	or	r24, r20
    18e0:	8c 93       	st	X, r24
				}
				break;
		}
}
    18e2:	26 96       	adiw	r28, 0x06	; 6
    18e4:	0f b6       	in	r0, 0x3f	; 63
    18e6:	f8 94       	cli
    18e8:	de bf       	out	0x3e, r29	; 62
    18ea:	0f be       	out	0x3f, r0	; 63
    18ec:	cd bf       	out	0x3d, r28	; 61
    18ee:	cf 91       	pop	r28
    18f0:	df 91       	pop	r29
    18f2:	08 95       	ret

000018f4 <Dio_ReadChannel>:

Pin_Status_Type Dio_ReadChannel (Pin_Channel_Type channel){
    18f4:	df 93       	push	r29
    18f6:	cf 93       	push	r28
    18f8:	00 d0       	rcall	.+0      	; 0x18fa <Dio_ReadChannel+0x6>
    18fa:	00 d0       	rcall	.+0      	; 0x18fc <Dio_ReadChannel+0x8>
    18fc:	00 d0       	rcall	.+0      	; 0x18fe <Dio_ReadChannel+0xa>
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
    1902:	8b 83       	std	Y+3, r24	; 0x03

	Dio_Port_Type port = channel/8;
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	86 95       	lsr	r24
    1908:	86 95       	lsr	r24
    190a:	86 95       	lsr	r24
    190c:	8a 83       	std	Y+2, r24	; 0x02
	UINT8 pin = channel%8;
    190e:	8b 81       	ldd	r24, Y+3	; 0x03
    1910:	87 70       	andi	r24, 0x07	; 7
    1912:	89 83       	std	Y+1, r24	; 0x01

	switch (port) {
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	28 2f       	mov	r18, r24
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	3e 83       	std	Y+6, r19	; 0x06
    191c:	2d 83       	std	Y+5, r18	; 0x05
    191e:	4d 81       	ldd	r20, Y+5	; 0x05
    1920:	5e 81       	ldd	r21, Y+6	; 0x06
    1922:	41 30       	cpi	r20, 0x01	; 1
    1924:	51 05       	cpc	r21, r1
    1926:	49 f1       	breq	.+82     	; 0x197a <Dio_ReadChannel+0x86>
    1928:	8d 81       	ldd	r24, Y+5	; 0x05
    192a:	9e 81       	ldd	r25, Y+6	; 0x06
    192c:	82 30       	cpi	r24, 0x02	; 2
    192e:	91 05       	cpc	r25, r1
    1930:	34 f4       	brge	.+12     	; 0x193e <Dio_ReadChannel+0x4a>
    1932:	2d 81       	ldd	r18, Y+5	; 0x05
    1934:	3e 81       	ldd	r19, Y+6	; 0x06
    1936:	21 15       	cp	r18, r1
    1938:	31 05       	cpc	r19, r1
    193a:	61 f0       	breq	.+24     	; 0x1954 <Dio_ReadChannel+0x60>
    193c:	57 c0       	rjmp	.+174    	; 0x19ec <Dio_ReadChannel+0xf8>
    193e:	4d 81       	ldd	r20, Y+5	; 0x05
    1940:	5e 81       	ldd	r21, Y+6	; 0x06
    1942:	42 30       	cpi	r20, 0x02	; 2
    1944:	51 05       	cpc	r21, r1
    1946:	61 f1       	breq	.+88     	; 0x19a0 <Dio_ReadChannel+0xac>
    1948:	8d 81       	ldd	r24, Y+5	; 0x05
    194a:	9e 81       	ldd	r25, Y+6	; 0x06
    194c:	83 30       	cpi	r24, 0x03	; 3
    194e:	91 05       	cpc	r25, r1
    1950:	d1 f1       	breq	.+116    	; 0x19c6 <Dio_ReadChannel+0xd2>
    1952:	4c c0       	rjmp	.+152    	; 0x19ec <Dio_ReadChannel+0xf8>
			case Dio_PORTA :
					return READBIT(PINA , pin);
    1954:	e9 e3       	ldi	r30, 0x39	; 57
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	28 2f       	mov	r18, r24
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	88 2f       	mov	r24, r24
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	a9 01       	movw	r20, r18
    1966:	02 c0       	rjmp	.+4      	; 0x196c <Dio_ReadChannel+0x78>
    1968:	55 95       	asr	r21
    196a:	47 95       	ror	r20
    196c:	8a 95       	dec	r24
    196e:	e2 f7       	brpl	.-8      	; 0x1968 <Dio_ReadChannel+0x74>
    1970:	ca 01       	movw	r24, r20
    1972:	58 2f       	mov	r21, r24
    1974:	51 70       	andi	r21, 0x01	; 1
    1976:	5c 83       	std	Y+4, r21	; 0x04
    1978:	3b c0       	rjmp	.+118    	; 0x19f0 <Dio_ReadChannel+0xfc>

			case Dio_PORTB :
					return READBIT(PINB , pin);
    197a:	e6 e3       	ldi	r30, 0x36	; 54
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	28 2f       	mov	r18, r24
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	89 81       	ldd	r24, Y+1	; 0x01
    1986:	88 2f       	mov	r24, r24
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	a9 01       	movw	r20, r18
    198c:	02 c0       	rjmp	.+4      	; 0x1992 <Dio_ReadChannel+0x9e>
    198e:	55 95       	asr	r21
    1990:	47 95       	ror	r20
    1992:	8a 95       	dec	r24
    1994:	e2 f7       	brpl	.-8      	; 0x198e <Dio_ReadChannel+0x9a>
    1996:	ca 01       	movw	r24, r20
    1998:	58 2f       	mov	r21, r24
    199a:	51 70       	andi	r21, 0x01	; 1
    199c:	5c 83       	std	Y+4, r21	; 0x04
    199e:	28 c0       	rjmp	.+80     	; 0x19f0 <Dio_ReadChannel+0xfc>

			case Dio_PORTC :
					return READBIT(PINC , pin);
    19a0:	e3 e3       	ldi	r30, 0x33	; 51
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	28 2f       	mov	r18, r24
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	89 81       	ldd	r24, Y+1	; 0x01
    19ac:	88 2f       	mov	r24, r24
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	a9 01       	movw	r20, r18
    19b2:	02 c0       	rjmp	.+4      	; 0x19b8 <Dio_ReadChannel+0xc4>
    19b4:	55 95       	asr	r21
    19b6:	47 95       	ror	r20
    19b8:	8a 95       	dec	r24
    19ba:	e2 f7       	brpl	.-8      	; 0x19b4 <Dio_ReadChannel+0xc0>
    19bc:	ca 01       	movw	r24, r20
    19be:	58 2f       	mov	r21, r24
    19c0:	51 70       	andi	r21, 0x01	; 1
    19c2:	5c 83       	std	Y+4, r21	; 0x04
    19c4:	15 c0       	rjmp	.+42     	; 0x19f0 <Dio_ReadChannel+0xfc>

			case Dio_PORTD :
					return READBIT(PIND , pin);
    19c6:	e0 e3       	ldi	r30, 0x30	; 48
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 81       	ld	r24, Z
    19cc:	28 2f       	mov	r18, r24
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
    19d2:	88 2f       	mov	r24, r24
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	a9 01       	movw	r20, r18
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <Dio_ReadChannel+0xea>
    19da:	55 95       	asr	r21
    19dc:	47 95       	ror	r20
    19de:	8a 95       	dec	r24
    19e0:	e2 f7       	brpl	.-8      	; 0x19da <Dio_ReadChannel+0xe6>
    19e2:	ca 01       	movw	r24, r20
    19e4:	58 2f       	mov	r21, r24
    19e6:	51 70       	andi	r21, 0x01	; 1
    19e8:	5c 83       	std	Y+4, r21	; 0x04
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <Dio_ReadChannel+0xfc>
		}

	return -1;
    19ec:	8f ef       	ldi	r24, 0xFF	; 255
    19ee:	8c 83       	std	Y+4, r24	; 0x04
    19f0:	8c 81       	ldd	r24, Y+4	; 0x04
}
    19f2:	26 96       	adiw	r28, 0x06	; 6
    19f4:	0f b6       	in	r0, 0x3f	; 63
    19f6:	f8 94       	cli
    19f8:	de bf       	out	0x3e, r29	; 62
    19fa:	0f be       	out	0x3f, r0	; 63
    19fc:	cd bf       	out	0x3d, r28	; 61
    19fe:	cf 91       	pop	r28
    1a00:	df 91       	pop	r29
    1a02:	08 95       	ret

00001a04 <Dio_WritePort>:

void Dio_WritePort(Dio_Port_Type port, UINT8 value){
    1a04:	df 93       	push	r29
    1a06:	cf 93       	push	r28
    1a08:	00 d0       	rcall	.+0      	; 0x1a0a <Dio_WritePort+0x6>
    1a0a:	00 d0       	rcall	.+0      	; 0x1a0c <Dio_WritePort+0x8>
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    1a10:	89 83       	std	Y+1, r24	; 0x01
    1a12:	6a 83       	std	Y+2, r22	; 0x02

	switch (port) {
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	28 2f       	mov	r18, r24
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	3c 83       	std	Y+4, r19	; 0x04
    1a1c:	2b 83       	std	Y+3, r18	; 0x03
    1a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a20:	9c 81       	ldd	r25, Y+4	; 0x04
    1a22:	81 30       	cpi	r24, 0x01	; 1
    1a24:	91 05       	cpc	r25, r1
    1a26:	d1 f0       	breq	.+52     	; 0x1a5c <Dio_WritePort+0x58>
    1a28:	2b 81       	ldd	r18, Y+3	; 0x03
    1a2a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a2c:	22 30       	cpi	r18, 0x02	; 2
    1a2e:	31 05       	cpc	r19, r1
    1a30:	2c f4       	brge	.+10     	; 0x1a3c <Dio_WritePort+0x38>
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	9c 81       	ldd	r25, Y+4	; 0x04
    1a36:	00 97       	sbiw	r24, 0x00	; 0
    1a38:	61 f0       	breq	.+24     	; 0x1a52 <Dio_WritePort+0x4e>
    1a3a:	1e c0       	rjmp	.+60     	; 0x1a78 <Dio_WritePort+0x74>
    1a3c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a3e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a40:	22 30       	cpi	r18, 0x02	; 2
    1a42:	31 05       	cpc	r19, r1
    1a44:	81 f0       	breq	.+32     	; 0x1a66 <Dio_WritePort+0x62>
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4a:	83 30       	cpi	r24, 0x03	; 3
    1a4c:	91 05       	cpc	r25, r1
    1a4e:	81 f0       	breq	.+32     	; 0x1a70 <Dio_WritePort+0x6c>
    1a50:	13 c0       	rjmp	.+38     	; 0x1a78 <Dio_WritePort+0x74>
		case Dio_PORTA :
				PORTA = value;
    1a52:	eb e3       	ldi	r30, 0x3B	; 59
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	8a 81       	ldd	r24, Y+2	; 0x02
    1a58:	80 83       	st	Z, r24
    1a5a:	0e c0       	rjmp	.+28     	; 0x1a78 <Dio_WritePort+0x74>
				break;

		case Dio_PORTB :
				PORTB = value;
    1a5c:	e8 e3       	ldi	r30, 0x38	; 56
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	8a 81       	ldd	r24, Y+2	; 0x02
    1a62:	80 83       	st	Z, r24
    1a64:	09 c0       	rjmp	.+18     	; 0x1a78 <Dio_WritePort+0x74>
				break;

		case Dio_PORTC :
				PORTC = value;
    1a66:	e5 e3       	ldi	r30, 0x35	; 53
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6c:	80 83       	st	Z, r24
    1a6e:	04 c0       	rjmp	.+8      	; 0x1a78 <Dio_WritePort+0x74>
				break;

		case Dio_PORTD :
				PORTD = value;
    1a70:	e2 e3       	ldi	r30, 0x32	; 50
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	8a 81       	ldd	r24, Y+2	; 0x02
    1a76:	80 83       	st	Z, r24
				break;
		}
}
    1a78:	0f 90       	pop	r0
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	cf 91       	pop	r28
    1a82:	df 91       	pop	r29
    1a84:	08 95       	ret

00001a86 <Dio_ReadPort>:

UINT8 Dio_ReadPort (Dio_Port_Type port){
    1a86:	df 93       	push	r29
    1a88:	cf 93       	push	r28
    1a8a:	00 d0       	rcall	.+0      	; 0x1a8c <Dio_ReadPort+0x6>
    1a8c:	00 d0       	rcall	.+0      	; 0x1a8e <Dio_ReadPort+0x8>
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
    1a92:	89 83       	std	Y+1, r24	; 0x01

	switch (port) {
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
    1a96:	28 2f       	mov	r18, r24
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	3c 83       	std	Y+4, r19	; 0x04
    1a9c:	2b 83       	std	Y+3, r18	; 0x03
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa2:	81 30       	cpi	r24, 0x01	; 1
    1aa4:	91 05       	cpc	r25, r1
    1aa6:	d1 f0       	breq	.+52     	; 0x1adc <Dio_ReadPort+0x56>
    1aa8:	2b 81       	ldd	r18, Y+3	; 0x03
    1aaa:	3c 81       	ldd	r19, Y+4	; 0x04
    1aac:	22 30       	cpi	r18, 0x02	; 2
    1aae:	31 05       	cpc	r19, r1
    1ab0:	2c f4       	brge	.+10     	; 0x1abc <Dio_ReadPort+0x36>
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab6:	00 97       	sbiw	r24, 0x00	; 0
    1ab8:	61 f0       	breq	.+24     	; 0x1ad2 <Dio_ReadPort+0x4c>
    1aba:	1f c0       	rjmp	.+62     	; 0x1afa <Dio_ReadPort+0x74>
    1abc:	2b 81       	ldd	r18, Y+3	; 0x03
    1abe:	3c 81       	ldd	r19, Y+4	; 0x04
    1ac0:	22 30       	cpi	r18, 0x02	; 2
    1ac2:	31 05       	cpc	r19, r1
    1ac4:	81 f0       	breq	.+32     	; 0x1ae6 <Dio_ReadPort+0x60>
    1ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aca:	83 30       	cpi	r24, 0x03	; 3
    1acc:	91 05       	cpc	r25, r1
    1ace:	81 f0       	breq	.+32     	; 0x1af0 <Dio_ReadPort+0x6a>
    1ad0:	14 c0       	rjmp	.+40     	; 0x1afa <Dio_ReadPort+0x74>
			case Dio_PORTA :
					return PINA;
    1ad2:	e9 e3       	ldi	r30, 0x39	; 57
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	90 81       	ld	r25, Z
    1ad8:	9a 83       	std	Y+2, r25	; 0x02
    1ada:	11 c0       	rjmp	.+34     	; 0x1afe <Dio_ReadPort+0x78>

			case Dio_PORTB :
					return PINB;
    1adc:	e6 e3       	ldi	r30, 0x36	; 54
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	20 81       	ld	r18, Z
    1ae2:	2a 83       	std	Y+2, r18	; 0x02
    1ae4:	0c c0       	rjmp	.+24     	; 0x1afe <Dio_ReadPort+0x78>

			case Dio_PORTC :
					return PINC;
    1ae6:	e3 e3       	ldi	r30, 0x33	; 51
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	30 81       	ld	r19, Z
    1aec:	3a 83       	std	Y+2, r19	; 0x02
    1aee:	07 c0       	rjmp	.+14     	; 0x1afe <Dio_ReadPort+0x78>

			case Dio_PORTD :
					return PIND;
    1af0:	e0 e3       	ldi	r30, 0x30	; 48
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	8a 83       	std	Y+2, r24	; 0x02
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <Dio_ReadPort+0x78>
		}

	return -1;
    1afa:	9f ef       	ldi	r25, 0xFF	; 255
    1afc:	9a 83       	std	Y+2, r25	; 0x02
    1afe:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1b00:	0f 90       	pop	r0
    1b02:	0f 90       	pop	r0
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	cf 91       	pop	r28
    1b0a:	df 91       	pop	r29
    1b0c:	08 95       	ret

00001b0e <SRVM_voidOn>:
 */

#include "SVRM_Interface.h"

void SRVM_voidOn (UINT8 Angle)
{
    1b0e:	df 93       	push	r29
    1b10:	cf 93       	push	r28
    1b12:	00 d0       	rcall	.+0      	; 0x1b14 <SRVM_voidOn+0x6>
    1b14:	00 d0       	rcall	.+0      	; 0x1b16 <SRVM_voidOn+0x8>
    1b16:	0f 92       	push	r0
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
    1b1c:	8d 83       	std	Y+5, r24	; 0x05
	/* Range From 0--180 -90--90 */
	float Duty = 0;
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	a0 e0       	ldi	r26, 0x00	; 0
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	89 83       	std	Y+1, r24	; 0x01
    1b28:	9a 83       	std	Y+2, r25	; 0x02
    1b2a:	ab 83       	std	Y+3, r26	; 0x03
    1b2c:	bc 83       	std	Y+4, r27	; 0x04
	Duty = (Angle+180) / 36.0 ;
    1b2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b30:	88 2f       	mov	r24, r24
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	8c 54       	subi	r24, 0x4C	; 76
    1b36:	9f 4f       	sbci	r25, 0xFF	; 255
    1b38:	aa 27       	eor	r26, r26
    1b3a:	97 fd       	sbrc	r25, 7
    1b3c:	a0 95       	com	r26
    1b3e:	ba 2f       	mov	r27, r26
    1b40:	bc 01       	movw	r22, r24
    1b42:	cd 01       	movw	r24, r26
    1b44:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	bc 01       	movw	r22, r24
    1b4e:	cd 01       	movw	r24, r26
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	40 e1       	ldi	r20, 0x10	; 16
    1b56:	52 e4       	ldi	r21, 0x42	; 66
    1b58:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	89 83       	std	Y+1, r24	; 0x01
    1b62:	9a 83       	std	Y+2, r25	; 0x02
    1b64:	ab 83       	std	Y+3, r26	; 0x03
    1b66:	bc 83       	std	Y+4, r27	; 0x04
	Timer1_FastPWM_Mode14(Duty , 50);
    1b68:	89 81       	ldd	r24, Y+1	; 0x01
    1b6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b6c:	ab 81       	ldd	r26, Y+3	; 0x03
    1b6e:	bc 81       	ldd	r27, Y+4	; 0x04
    1b70:	bc 01       	movw	r22, r24
    1b72:	cd 01       	movw	r24, r26
    1b74:	42 e3       	ldi	r20, 0x32	; 50
    1b76:	50 e0       	ldi	r21, 0x00	; 0
    1b78:	0e 94 0d 08 	call	0x101a	; 0x101a <Timer1_FastPWM_Mode14>
	Timer1_Init();
    1b7c:	0e 94 75 07 	call	0xeea	; 0xeea <Timer1_Init>
}
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	cf 91       	pop	r28
    1b8c:	df 91       	pop	r29
    1b8e:	08 95       	ret

00001b90 <SRVM_voidOff>:


void SRVM_voidOff(void)
{
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
	Timer1_Stop ();
    1b98:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <Timer1_Stop>
}
    1b9c:	cf 91       	pop	r28
    1b9e:	df 91       	pop	r29
    1ba0:	08 95       	ret

00001ba2 <LCD_VInit>:
#include "LCD_Interface.h"
#include "LCD_Private.h"
#define F_CPU 16000000
#include "util/delay.h"

void LCD_VInit (void){
    1ba2:	0f 93       	push	r16
    1ba4:	1f 93       	push	r17
    1ba6:	df 93       	push	r29
    1ba8:	cf 93       	push	r28
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	cc 54       	subi	r28, 0x4C	; 76
    1bb0:	d0 40       	sbci	r29, 0x00	; 0
    1bb2:	0f b6       	in	r0, 0x3f	; 63
    1bb4:	f8 94       	cli
    1bb6:	de bf       	out	0x3e, r29	; 62
    1bb8:	0f be       	out	0x3f, r0	; 63
    1bba:	cd bf       	out	0x3d, r28	; 61
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	e7 5b       	subi	r30, 0xB7	; 183
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	ac e0       	ldi	r26, 0x0C	; 12
    1bc8:	b2 e4       	ldi	r27, 0x42	; 66
    1bca:	80 83       	st	Z, r24
    1bcc:	91 83       	std	Z+1, r25	; 0x01
    1bce:	a2 83       	std	Z+2, r26	; 0x02
    1bd0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd2:	8e 01       	movw	r16, r28
    1bd4:	0b 5b       	subi	r16, 0xBB	; 187
    1bd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd8:	fe 01       	movw	r30, r28
    1bda:	e7 5b       	subi	r30, 0xB7	; 183
    1bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bde:	60 81       	ld	r22, Z
    1be0:	71 81       	ldd	r23, Z+1	; 0x01
    1be2:	82 81       	ldd	r24, Z+2	; 0x02
    1be4:	93 81       	ldd	r25, Z+3	; 0x03
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	4a e7       	ldi	r20, 0x7A	; 122
    1bec:	55 e4       	ldi	r21, 0x45	; 69
    1bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	f8 01       	movw	r30, r16
    1bf8:	80 83       	st	Z, r24
    1bfa:	91 83       	std	Z+1, r25	; 0x01
    1bfc:	a2 83       	std	Z+2, r26	; 0x02
    1bfe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c00:	fe 01       	movw	r30, r28
    1c02:	eb 5b       	subi	r30, 0xBB	; 187
    1c04:	ff 4f       	sbci	r31, 0xFF	; 255
    1c06:	60 81       	ld	r22, Z
    1c08:	71 81       	ldd	r23, Z+1	; 0x01
    1c0a:	82 81       	ldd	r24, Z+2	; 0x02
    1c0c:	93 81       	ldd	r25, Z+3	; 0x03
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e8       	ldi	r20, 0x80	; 128
    1c14:	5f e3       	ldi	r21, 0x3F	; 63
    1c16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c1a:	88 23       	and	r24, r24
    1c1c:	44 f4       	brge	.+16     	; 0x1c2e <LCD_VInit+0x8c>
		__ticks = 1;
    1c1e:	fe 01       	movw	r30, r28
    1c20:	ed 5b       	subi	r30, 0xBD	; 189
    1c22:	ff 4f       	sbci	r31, 0xFF	; 255
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	91 83       	std	Z+1, r25	; 0x01
    1c2a:	80 83       	st	Z, r24
    1c2c:	64 c0       	rjmp	.+200    	; 0x1cf6 <LCD_VInit+0x154>
	else if (__tmp > 65535)
    1c2e:	fe 01       	movw	r30, r28
    1c30:	eb 5b       	subi	r30, 0xBB	; 187
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	60 81       	ld	r22, Z
    1c36:	71 81       	ldd	r23, Z+1	; 0x01
    1c38:	82 81       	ldd	r24, Z+2	; 0x02
    1c3a:	93 81       	ldd	r25, Z+3	; 0x03
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	3f ef       	ldi	r19, 0xFF	; 255
    1c40:	4f e7       	ldi	r20, 0x7F	; 127
    1c42:	57 e4       	ldi	r21, 0x47	; 71
    1c44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c48:	18 16       	cp	r1, r24
    1c4a:	0c f0       	brlt	.+2      	; 0x1c4e <LCD_VInit+0xac>
    1c4c:	43 c0       	rjmp	.+134    	; 0x1cd4 <LCD_VInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c4e:	fe 01       	movw	r30, r28
    1c50:	e7 5b       	subi	r30, 0xB7	; 183
    1c52:	ff 4f       	sbci	r31, 0xFF	; 255
    1c54:	60 81       	ld	r22, Z
    1c56:	71 81       	ldd	r23, Z+1	; 0x01
    1c58:	82 81       	ldd	r24, Z+2	; 0x02
    1c5a:	93 81       	ldd	r25, Z+3	; 0x03
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	40 e2       	ldi	r20, 0x20	; 32
    1c62:	51 e4       	ldi	r21, 0x41	; 65
    1c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	8e 01       	movw	r16, r28
    1c6e:	0d 5b       	subi	r16, 0xBD	; 189
    1c70:	1f 4f       	sbci	r17, 0xFF	; 255
    1c72:	bc 01       	movw	r22, r24
    1c74:	cd 01       	movw	r24, r26
    1c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	f8 01       	movw	r30, r16
    1c80:	91 83       	std	Z+1, r25	; 0x01
    1c82:	80 83       	st	Z, r24
    1c84:	1f c0       	rjmp	.+62     	; 0x1cc4 <LCD_VInit+0x122>
    1c86:	fe 01       	movw	r30, r28
    1c88:	ef 5b       	subi	r30, 0xBF	; 191
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	80 e9       	ldi	r24, 0x90	; 144
    1c8e:	91 e0       	ldi	r25, 0x01	; 1
    1c90:	91 83       	std	Z+1, r25	; 0x01
    1c92:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c94:	fe 01       	movw	r30, r28
    1c96:	ef 5b       	subi	r30, 0xBF	; 191
    1c98:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9a:	80 81       	ld	r24, Z
    1c9c:	91 81       	ldd	r25, Z+1	; 0x01
    1c9e:	01 97       	sbiw	r24, 0x01	; 1
    1ca0:	f1 f7       	brne	.-4      	; 0x1c9e <LCD_VInit+0xfc>
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	ef 5b       	subi	r30, 0xBF	; 191
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	91 83       	std	Z+1, r25	; 0x01
    1caa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cac:	de 01       	movw	r26, r28
    1cae:	ad 5b       	subi	r26, 0xBD	; 189
    1cb0:	bf 4f       	sbci	r27, 0xFF	; 255
    1cb2:	fe 01       	movw	r30, r28
    1cb4:	ed 5b       	subi	r30, 0xBD	; 189
    1cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb8:	80 81       	ld	r24, Z
    1cba:	91 81       	ldd	r25, Z+1	; 0x01
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	11 96       	adiw	r26, 0x01	; 1
    1cc0:	9c 93       	st	X, r25
    1cc2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc4:	fe 01       	movw	r30, r28
    1cc6:	ed 5b       	subi	r30, 0xBD	; 189
    1cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cca:	80 81       	ld	r24, Z
    1ccc:	91 81       	ldd	r25, Z+1	; 0x01
    1cce:	00 97       	sbiw	r24, 0x00	; 0
    1cd0:	d1 f6       	brne	.-76     	; 0x1c86 <LCD_VInit+0xe4>
    1cd2:	24 c0       	rjmp	.+72     	; 0x1d1c <LCD_VInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd4:	8e 01       	movw	r16, r28
    1cd6:	0d 5b       	subi	r16, 0xBD	; 189
    1cd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cda:	fe 01       	movw	r30, r28
    1cdc:	eb 5b       	subi	r30, 0xBB	; 187
    1cde:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce0:	60 81       	ld	r22, Z
    1ce2:	71 81       	ldd	r23, Z+1	; 0x01
    1ce4:	82 81       	ldd	r24, Z+2	; 0x02
    1ce6:	93 81       	ldd	r25, Z+3	; 0x03
    1ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	f8 01       	movw	r30, r16
    1cf2:	91 83       	std	Z+1, r25	; 0x01
    1cf4:	80 83       	st	Z, r24
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	ed 5b       	subi	r30, 0xBD	; 189
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	80 81       	ld	r24, Z
    1cfe:	91 81       	ldd	r25, Z+1	; 0x01
    1d00:	fe 01       	movw	r30, r28
    1d02:	ff 96       	adiw	r30, 0x3f	; 63
    1d04:	91 83       	std	Z+1, r25	; 0x01
    1d06:	80 83       	st	Z, r24
    1d08:	fe 01       	movw	r30, r28
    1d0a:	ff 96       	adiw	r30, 0x3f	; 63
    1d0c:	80 81       	ld	r24, Z
    1d0e:	91 81       	ldd	r25, Z+1	; 0x01
    1d10:	01 97       	sbiw	r24, 0x01	; 1
    1d12:	f1 f7       	brne	.-4      	; 0x1d10 <LCD_VInit+0x16e>
    1d14:	fe 01       	movw	r30, r28
    1d16:	ff 96       	adiw	r30, 0x3f	; 63
    1d18:	91 83       	std	Z+1, r25	; 0x01
    1d1a:	80 83       	st	Z, r24

	_delay_ms(35);
	Private_VWriteHalfPort(0b0010);
    1d1c:	82 e0       	ldi	r24, 0x02	; 2
    1d1e:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <Private_VWriteHalfPort>
	Private_VEnable();
    1d22:	0e 94 0d 12 	call	0x241a	; 0x241a <Private_VEnable>
	/*LCD_VSendCmnd(0b0010000);*/
	LCD_VSendCmnd(LCD_Function_Set);
    1d26:	88 e2       	ldi	r24, 0x28	; 40
    1d28:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_VSendCmnd>
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	a4 e3       	ldi	r26, 0x34	; 52
    1d32:	b2 e4       	ldi	r27, 0x42	; 66
    1d34:	8b af       	std	Y+59, r24	; 0x3b
    1d36:	9c af       	std	Y+60, r25	; 0x3c
    1d38:	ad af       	std	Y+61, r26	; 0x3d
    1d3a:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d3c:	6b ad       	ldd	r22, Y+59	; 0x3b
    1d3e:	7c ad       	ldd	r23, Y+60	; 0x3c
    1d40:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d42:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d44:	2b ea       	ldi	r18, 0xAB	; 171
    1d46:	3a ea       	ldi	r19, 0xAA	; 170
    1d48:	4a ea       	ldi	r20, 0xAA	; 170
    1d4a:	50 e4       	ldi	r21, 0x40	; 64
    1d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	8f ab       	std	Y+55, r24	; 0x37
    1d56:	98 af       	std	Y+56, r25	; 0x38
    1d58:	a9 af       	std	Y+57, r26	; 0x39
    1d5a:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1d5c:	6f a9       	ldd	r22, Y+55	; 0x37
    1d5e:	78 ad       	ldd	r23, Y+56	; 0x38
    1d60:	89 ad       	ldd	r24, Y+57	; 0x39
    1d62:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	40 e8       	ldi	r20, 0x80	; 128
    1d6a:	5f e3       	ldi	r21, 0x3F	; 63
    1d6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d70:	88 23       	and	r24, r24
    1d72:	1c f4       	brge	.+6      	; 0x1d7a <LCD_VInit+0x1d8>
		__ticks = 1;
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	8e ab       	std	Y+54, r24	; 0x36
    1d78:	91 c0       	rjmp	.+290    	; 0x1e9c <LCD_VInit+0x2fa>
	else if (__tmp > 255)
    1d7a:	6f a9       	ldd	r22, Y+55	; 0x37
    1d7c:	78 ad       	ldd	r23, Y+56	; 0x38
    1d7e:	89 ad       	ldd	r24, Y+57	; 0x39
    1d80:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	4f e7       	ldi	r20, 0x7F	; 127
    1d88:	53 e4       	ldi	r21, 0x43	; 67
    1d8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d8e:	18 16       	cp	r1, r24
    1d90:	0c f0       	brlt	.+2      	; 0x1d94 <LCD_VInit+0x1f2>
    1d92:	7b c0       	rjmp	.+246    	; 0x1e8a <LCD_VInit+0x2e8>
	{
		_delay_ms(__us / 1000.0);
    1d94:	6b ad       	ldd	r22, Y+59	; 0x3b
    1d96:	7c ad       	ldd	r23, Y+60	; 0x3c
    1d98:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d9a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	4a e7       	ldi	r20, 0x7A	; 122
    1da2:	54 e4       	ldi	r21, 0x44	; 68
    1da4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	8a ab       	std	Y+50, r24	; 0x32
    1dae:	9b ab       	std	Y+51, r25	; 0x33
    1db0:	ac ab       	std	Y+52, r26	; 0x34
    1db2:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db4:	6a a9       	ldd	r22, Y+50	; 0x32
    1db6:	7b a9       	ldd	r23, Y+51	; 0x33
    1db8:	8c a9       	ldd	r24, Y+52	; 0x34
    1dba:	9d a9       	ldd	r25, Y+53	; 0x35
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	4a e7       	ldi	r20, 0x7A	; 122
    1dc2:	55 e4       	ldi	r21, 0x45	; 69
    1dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	8e a7       	std	Y+46, r24	; 0x2e
    1dce:	9f a7       	std	Y+47, r25	; 0x2f
    1dd0:	a8 ab       	std	Y+48, r26	; 0x30
    1dd2:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1dd4:	6e a5       	ldd	r22, Y+46	; 0x2e
    1dd6:	7f a5       	ldd	r23, Y+47	; 0x2f
    1dd8:	88 a9       	ldd	r24, Y+48	; 0x30
    1dda:	99 a9       	ldd	r25, Y+49	; 0x31
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	40 e8       	ldi	r20, 0x80	; 128
    1de2:	5f e3       	ldi	r21, 0x3F	; 63
    1de4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1de8:	88 23       	and	r24, r24
    1dea:	2c f4       	brge	.+10     	; 0x1df6 <LCD_VInit+0x254>
		__ticks = 1;
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	9d a7       	std	Y+45, r25	; 0x2d
    1df2:	8c a7       	std	Y+44, r24	; 0x2c
    1df4:	3f c0       	rjmp	.+126    	; 0x1e74 <LCD_VInit+0x2d2>
	else if (__tmp > 65535)
    1df6:	6e a5       	ldd	r22, Y+46	; 0x2e
    1df8:	7f a5       	ldd	r23, Y+47	; 0x2f
    1dfa:	88 a9       	ldd	r24, Y+48	; 0x30
    1dfc:	99 a9       	ldd	r25, Y+49	; 0x31
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	3f ef       	ldi	r19, 0xFF	; 255
    1e02:	4f e7       	ldi	r20, 0x7F	; 127
    1e04:	57 e4       	ldi	r21, 0x47	; 71
    1e06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e0a:	18 16       	cp	r1, r24
    1e0c:	4c f5       	brge	.+82     	; 0x1e60 <LCD_VInit+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0e:	6a a9       	ldd	r22, Y+50	; 0x32
    1e10:	7b a9       	ldd	r23, Y+51	; 0x33
    1e12:	8c a9       	ldd	r24, Y+52	; 0x34
    1e14:	9d a9       	ldd	r25, Y+53	; 0x35
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	40 e2       	ldi	r20, 0x20	; 32
    1e1c:	51 e4       	ldi	r21, 0x41	; 65
    1e1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	bc 01       	movw	r22, r24
    1e28:	cd 01       	movw	r24, r26
    1e2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	9d a7       	std	Y+45, r25	; 0x2d
    1e34:	8c a7       	std	Y+44, r24	; 0x2c
    1e36:	0f c0       	rjmp	.+30     	; 0x1e56 <LCD_VInit+0x2b4>
    1e38:	80 e9       	ldi	r24, 0x90	; 144
    1e3a:	91 e0       	ldi	r25, 0x01	; 1
    1e3c:	9b a7       	std	Y+43, r25	; 0x2b
    1e3e:	8a a7       	std	Y+42, r24	; 0x2a
    1e40:	8a a5       	ldd	r24, Y+42	; 0x2a
    1e42:	9b a5       	ldd	r25, Y+43	; 0x2b
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	f1 f7       	brne	.-4      	; 0x1e44 <LCD_VInit+0x2a2>
    1e48:	9b a7       	std	Y+43, r25	; 0x2b
    1e4a:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e4c:	8c a5       	ldd	r24, Y+44	; 0x2c
    1e4e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1e50:	01 97       	sbiw	r24, 0x01	; 1
    1e52:	9d a7       	std	Y+45, r25	; 0x2d
    1e54:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e56:	8c a5       	ldd	r24, Y+44	; 0x2c
    1e58:	9d a5       	ldd	r25, Y+45	; 0x2d
    1e5a:	00 97       	sbiw	r24, 0x00	; 0
    1e5c:	69 f7       	brne	.-38     	; 0x1e38 <LCD_VInit+0x296>
    1e5e:	24 c0       	rjmp	.+72     	; 0x1ea8 <LCD_VInit+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e60:	6e a5       	ldd	r22, Y+46	; 0x2e
    1e62:	7f a5       	ldd	r23, Y+47	; 0x2f
    1e64:	88 a9       	ldd	r24, Y+48	; 0x30
    1e66:	99 a9       	ldd	r25, Y+49	; 0x31
    1e68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	cb 01       	movw	r24, r22
    1e70:	9d a7       	std	Y+45, r25	; 0x2d
    1e72:	8c a7       	std	Y+44, r24	; 0x2c
    1e74:	8c a5       	ldd	r24, Y+44	; 0x2c
    1e76:	9d a5       	ldd	r25, Y+45	; 0x2d
    1e78:	99 a7       	std	Y+41, r25	; 0x29
    1e7a:	88 a7       	std	Y+40, r24	; 0x28
    1e7c:	88 a5       	ldd	r24, Y+40	; 0x28
    1e7e:	99 a5       	ldd	r25, Y+41	; 0x29
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	f1 f7       	brne	.-4      	; 0x1e80 <LCD_VInit+0x2de>
    1e84:	99 a7       	std	Y+41, r25	; 0x29
    1e86:	88 a7       	std	Y+40, r24	; 0x28
    1e88:	0f c0       	rjmp	.+30     	; 0x1ea8 <LCD_VInit+0x306>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e8a:	6f a9       	ldd	r22, Y+55	; 0x37
    1e8c:	78 ad       	ldd	r23, Y+56	; 0x38
    1e8e:	89 ad       	ldd	r24, Y+57	; 0x39
    1e90:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	8e ab       	std	Y+54, r24	; 0x36
    1e9c:	8e a9       	ldd	r24, Y+54	; 0x36
    1e9e:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ea0:	8f a1       	ldd	r24, Y+39	; 0x27
    1ea2:	8a 95       	dec	r24
    1ea4:	f1 f7       	brne	.-4      	; 0x1ea2 <LCD_VInit+0x300>
    1ea6:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(45);
	LCD_VSendCmnd(LCD_Display_Control);
    1ea8:	8f e0       	ldi	r24, 0x0F	; 15
    1eaa:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_VSendCmnd>
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	a4 e3       	ldi	r26, 0x34	; 52
    1eb4:	b2 e4       	ldi	r27, 0x42	; 66
    1eb6:	8b a3       	std	Y+35, r24	; 0x23
    1eb8:	9c a3       	std	Y+36, r25	; 0x24
    1eba:	ad a3       	std	Y+37, r26	; 0x25
    1ebc:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ebe:	6b a1       	ldd	r22, Y+35	; 0x23
    1ec0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ec2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ec4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ec6:	2b ea       	ldi	r18, 0xAB	; 171
    1ec8:	3a ea       	ldi	r19, 0xAA	; 170
    1eca:	4a ea       	ldi	r20, 0xAA	; 170
    1ecc:	50 e4       	ldi	r21, 0x40	; 64
    1ece:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	8f 8f       	std	Y+31, r24	; 0x1f
    1ed8:	98 a3       	std	Y+32, r25	; 0x20
    1eda:	a9 a3       	std	Y+33, r26	; 0x21
    1edc:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1ede:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1ee0:	78 a1       	ldd	r23, Y+32	; 0x20
    1ee2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ee4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	40 e8       	ldi	r20, 0x80	; 128
    1eec:	5f e3       	ldi	r21, 0x3F	; 63
    1eee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ef2:	88 23       	and	r24, r24
    1ef4:	1c f4       	brge	.+6      	; 0x1efc <LCD_VInit+0x35a>
		__ticks = 1;
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	8e 8f       	std	Y+30, r24	; 0x1e
    1efa:	91 c0       	rjmp	.+290    	; 0x201e <LCD_VInit+0x47c>
	else if (__tmp > 255)
    1efc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1efe:	78 a1       	ldd	r23, Y+32	; 0x20
    1f00:	89 a1       	ldd	r24, Y+33	; 0x21
    1f02:	9a a1       	ldd	r25, Y+34	; 0x22
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	4f e7       	ldi	r20, 0x7F	; 127
    1f0a:	53 e4       	ldi	r21, 0x43	; 67
    1f0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f10:	18 16       	cp	r1, r24
    1f12:	0c f0       	brlt	.+2      	; 0x1f16 <LCD_VInit+0x374>
    1f14:	7b c0       	rjmp	.+246    	; 0x200c <LCD_VInit+0x46a>
	{
		_delay_ms(__us / 1000.0);
    1f16:	6b a1       	ldd	r22, Y+35	; 0x23
    1f18:	7c a1       	ldd	r23, Y+36	; 0x24
    1f1a:	8d a1       	ldd	r24, Y+37	; 0x25
    1f1c:	9e a1       	ldd	r25, Y+38	; 0x26
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	4a e7       	ldi	r20, 0x7A	; 122
    1f24:	54 e4       	ldi	r21, 0x44	; 68
    1f26:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	8a 8f       	std	Y+26, r24	; 0x1a
    1f30:	9b 8f       	std	Y+27, r25	; 0x1b
    1f32:	ac 8f       	std	Y+28, r26	; 0x1c
    1f34:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f36:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1f38:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1f3a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f3c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	4a e7       	ldi	r20, 0x7A	; 122
    1f44:	55 e4       	ldi	r21, 0x45	; 69
    1f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	8e 8b       	std	Y+22, r24	; 0x16
    1f50:	9f 8b       	std	Y+23, r25	; 0x17
    1f52:	a8 8f       	std	Y+24, r26	; 0x18
    1f54:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1f56:	6e 89       	ldd	r22, Y+22	; 0x16
    1f58:	7f 89       	ldd	r23, Y+23	; 0x17
    1f5a:	88 8d       	ldd	r24, Y+24	; 0x18
    1f5c:	99 8d       	ldd	r25, Y+25	; 0x19
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	40 e8       	ldi	r20, 0x80	; 128
    1f64:	5f e3       	ldi	r21, 0x3F	; 63
    1f66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f6a:	88 23       	and	r24, r24
    1f6c:	2c f4       	brge	.+10     	; 0x1f78 <LCD_VInit+0x3d6>
		__ticks = 1;
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	9d 8b       	std	Y+21, r25	; 0x15
    1f74:	8c 8b       	std	Y+20, r24	; 0x14
    1f76:	3f c0       	rjmp	.+126    	; 0x1ff6 <LCD_VInit+0x454>
	else if (__tmp > 65535)
    1f78:	6e 89       	ldd	r22, Y+22	; 0x16
    1f7a:	7f 89       	ldd	r23, Y+23	; 0x17
    1f7c:	88 8d       	ldd	r24, Y+24	; 0x18
    1f7e:	99 8d       	ldd	r25, Y+25	; 0x19
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	3f ef       	ldi	r19, 0xFF	; 255
    1f84:	4f e7       	ldi	r20, 0x7F	; 127
    1f86:	57 e4       	ldi	r21, 0x47	; 71
    1f88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f8c:	18 16       	cp	r1, r24
    1f8e:	4c f5       	brge	.+82     	; 0x1fe2 <LCD_VInit+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f90:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1f92:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1f94:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f96:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	40 e2       	ldi	r20, 0x20	; 32
    1f9e:	51 e4       	ldi	r21, 0x41	; 65
    1fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	bc 01       	movw	r22, r24
    1faa:	cd 01       	movw	r24, r26
    1fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	9d 8b       	std	Y+21, r25	; 0x15
    1fb6:	8c 8b       	std	Y+20, r24	; 0x14
    1fb8:	0f c0       	rjmp	.+30     	; 0x1fd8 <LCD_VInit+0x436>
    1fba:	80 e9       	ldi	r24, 0x90	; 144
    1fbc:	91 e0       	ldi	r25, 0x01	; 1
    1fbe:	9b 8b       	std	Y+19, r25	; 0x13
    1fc0:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fc2:	8a 89       	ldd	r24, Y+18	; 0x12
    1fc4:	9b 89       	ldd	r25, Y+19	; 0x13
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	f1 f7       	brne	.-4      	; 0x1fc6 <LCD_VInit+0x424>
    1fca:	9b 8b       	std	Y+19, r25	; 0x13
    1fcc:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fce:	8c 89       	ldd	r24, Y+20	; 0x14
    1fd0:	9d 89       	ldd	r25, Y+21	; 0x15
    1fd2:	01 97       	sbiw	r24, 0x01	; 1
    1fd4:	9d 8b       	std	Y+21, r25	; 0x15
    1fd6:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd8:	8c 89       	ldd	r24, Y+20	; 0x14
    1fda:	9d 89       	ldd	r25, Y+21	; 0x15
    1fdc:	00 97       	sbiw	r24, 0x00	; 0
    1fde:	69 f7       	brne	.-38     	; 0x1fba <LCD_VInit+0x418>
    1fe0:	24 c0       	rjmp	.+72     	; 0x202a <LCD_VInit+0x488>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe2:	6e 89       	ldd	r22, Y+22	; 0x16
    1fe4:	7f 89       	ldd	r23, Y+23	; 0x17
    1fe6:	88 8d       	ldd	r24, Y+24	; 0x18
    1fe8:	99 8d       	ldd	r25, Y+25	; 0x19
    1fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	9d 8b       	std	Y+21, r25	; 0x15
    1ff4:	8c 8b       	std	Y+20, r24	; 0x14
    1ff6:	8c 89       	ldd	r24, Y+20	; 0x14
    1ff8:	9d 89       	ldd	r25, Y+21	; 0x15
    1ffa:	99 8b       	std	Y+17, r25	; 0x11
    1ffc:	88 8b       	std	Y+16, r24	; 0x10
    1ffe:	88 89       	ldd	r24, Y+16	; 0x10
    2000:	99 89       	ldd	r25, Y+17	; 0x11
    2002:	01 97       	sbiw	r24, 0x01	; 1
    2004:	f1 f7       	brne	.-4      	; 0x2002 <LCD_VInit+0x460>
    2006:	99 8b       	std	Y+17, r25	; 0x11
    2008:	88 8b       	std	Y+16, r24	; 0x10
    200a:	0f c0       	rjmp	.+30     	; 0x202a <LCD_VInit+0x488>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    200c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    200e:	78 a1       	ldd	r23, Y+32	; 0x20
    2010:	89 a1       	ldd	r24, Y+33	; 0x21
    2012:	9a a1       	ldd	r25, Y+34	; 0x22
    2014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	8e 8f       	std	Y+30, r24	; 0x1e
    201e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2020:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2022:	8f 85       	ldd	r24, Y+15	; 0x0f
    2024:	8a 95       	dec	r24
    2026:	f1 f7       	brne	.-4      	; 0x2024 <LCD_VInit+0x482>
    2028:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(45);
	LCD_VSendCmnd(LCD_Display_Clear);
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_VSendCmnd>
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	a0 e0       	ldi	r26, 0x00	; 0
    2036:	b0 e4       	ldi	r27, 0x40	; 64
    2038:	8b 87       	std	Y+11, r24	; 0x0b
    203a:	9c 87       	std	Y+12, r25	; 0x0c
    203c:	ad 87       	std	Y+13, r26	; 0x0d
    203e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2040:	6b 85       	ldd	r22, Y+11	; 0x0b
    2042:	7c 85       	ldd	r23, Y+12	; 0x0c
    2044:	8d 85       	ldd	r24, Y+13	; 0x0d
    2046:	9e 85       	ldd	r25, Y+14	; 0x0e
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	4a e7       	ldi	r20, 0x7A	; 122
    204e:	55 e4       	ldi	r21, 0x45	; 69
    2050:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	8f 83       	std	Y+7, r24	; 0x07
    205a:	98 87       	std	Y+8, r25	; 0x08
    205c:	a9 87       	std	Y+9, r26	; 0x09
    205e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2060:	6f 81       	ldd	r22, Y+7	; 0x07
    2062:	78 85       	ldd	r23, Y+8	; 0x08
    2064:	89 85       	ldd	r24, Y+9	; 0x09
    2066:	9a 85       	ldd	r25, Y+10	; 0x0a
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	40 e8       	ldi	r20, 0x80	; 128
    206e:	5f e3       	ldi	r21, 0x3F	; 63
    2070:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2074:	88 23       	and	r24, r24
    2076:	2c f4       	brge	.+10     	; 0x2082 <LCD_VInit+0x4e0>
		__ticks = 1;
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	9e 83       	std	Y+6, r25	; 0x06
    207e:	8d 83       	std	Y+5, r24	; 0x05
    2080:	3f c0       	rjmp	.+126    	; 0x2100 <LCD_VInit+0x55e>
	else if (__tmp > 65535)
    2082:	6f 81       	ldd	r22, Y+7	; 0x07
    2084:	78 85       	ldd	r23, Y+8	; 0x08
    2086:	89 85       	ldd	r24, Y+9	; 0x09
    2088:	9a 85       	ldd	r25, Y+10	; 0x0a
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	3f ef       	ldi	r19, 0xFF	; 255
    208e:	4f e7       	ldi	r20, 0x7F	; 127
    2090:	57 e4       	ldi	r21, 0x47	; 71
    2092:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2096:	18 16       	cp	r1, r24
    2098:	4c f5       	brge	.+82     	; 0x20ec <LCD_VInit+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    209a:	6b 85       	ldd	r22, Y+11	; 0x0b
    209c:	7c 85       	ldd	r23, Y+12	; 0x0c
    209e:	8d 85       	ldd	r24, Y+13	; 0x0d
    20a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	40 e2       	ldi	r20, 0x20	; 32
    20a8:	51 e4       	ldi	r21, 0x41	; 65
    20aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	bc 01       	movw	r22, r24
    20b4:	cd 01       	movw	r24, r26
    20b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	9e 83       	std	Y+6, r25	; 0x06
    20c0:	8d 83       	std	Y+5, r24	; 0x05
    20c2:	0f c0       	rjmp	.+30     	; 0x20e2 <LCD_VInit+0x540>
    20c4:	80 e9       	ldi	r24, 0x90	; 144
    20c6:	91 e0       	ldi	r25, 0x01	; 1
    20c8:	9c 83       	std	Y+4, r25	; 0x04
    20ca:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20cc:	8b 81       	ldd	r24, Y+3	; 0x03
    20ce:	9c 81       	ldd	r25, Y+4	; 0x04
    20d0:	01 97       	sbiw	r24, 0x01	; 1
    20d2:	f1 f7       	brne	.-4      	; 0x20d0 <LCD_VInit+0x52e>
    20d4:	9c 83       	std	Y+4, r25	; 0x04
    20d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d8:	8d 81       	ldd	r24, Y+5	; 0x05
    20da:	9e 81       	ldd	r25, Y+6	; 0x06
    20dc:	01 97       	sbiw	r24, 0x01	; 1
    20de:	9e 83       	std	Y+6, r25	; 0x06
    20e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e2:	8d 81       	ldd	r24, Y+5	; 0x05
    20e4:	9e 81       	ldd	r25, Y+6	; 0x06
    20e6:	00 97       	sbiw	r24, 0x00	; 0
    20e8:	69 f7       	brne	.-38     	; 0x20c4 <LCD_VInit+0x522>
    20ea:	14 c0       	rjmp	.+40     	; 0x2114 <LCD_VInit+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ec:	6f 81       	ldd	r22, Y+7	; 0x07
    20ee:	78 85       	ldd	r23, Y+8	; 0x08
    20f0:	89 85       	ldd	r24, Y+9	; 0x09
    20f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	9e 83       	std	Y+6, r25	; 0x06
    20fe:	8d 83       	std	Y+5, r24	; 0x05
    2100:	8d 81       	ldd	r24, Y+5	; 0x05
    2102:	9e 81       	ldd	r25, Y+6	; 0x06
    2104:	9a 83       	std	Y+2, r25	; 0x02
    2106:	89 83       	std	Y+1, r24	; 0x01
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	9a 81       	ldd	r25, Y+2	; 0x02
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	f1 f7       	brne	.-4      	; 0x210c <LCD_VInit+0x56a>
    2110:	9a 83       	std	Y+2, r25	; 0x02
    2112:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_VSendCmnd(LCD_Entry_Mode);
    2114:	86 e0       	ldi	r24, 0x06	; 6
    2116:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_VSendCmnd>

}
    211a:	c4 5b       	subi	r28, 0xB4	; 180
    211c:	df 4f       	sbci	r29, 0xFF	; 255
    211e:	0f b6       	in	r0, 0x3f	; 63
    2120:	f8 94       	cli
    2122:	de bf       	out	0x3e, r29	; 62
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	cd bf       	out	0x3d, r28	; 61
    2128:	cf 91       	pop	r28
    212a:	df 91       	pop	r29
    212c:	1f 91       	pop	r17
    212e:	0f 91       	pop	r16
    2130:	08 95       	ret

00002132 <LCD_VSendCmnd>:

void LCD_VSendCmnd (UINT8 Cmnd){
    2132:	df 93       	push	r29
    2134:	cf 93       	push	r28
    2136:	0f 92       	push	r0
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
    213c:	89 83       	std	Y+1, r24	; 0x01

	Dio_WriteChannel(LCD_Rs , LOW);
    213e:	83 e0       	ldi	r24, 0x03	; 3
    2140:	60 e0       	ldi	r22, 0x00	; 0
    2142:	0e 94 8f 0b 	call	0x171e	; 0x171e <Dio_WriteChannel>
	Private_VWriteHalfPort(Cmnd>>4);
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	82 95       	swap	r24
    214a:	8f 70       	andi	r24, 0x0F	; 15
    214c:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <Private_VWriteHalfPort>
	Private_VEnable();
    2150:	0e 94 0d 12 	call	0x241a	; 0x241a <Private_VEnable>
	Private_VWriteHalfPort(Cmnd);
    2154:	89 81       	ldd	r24, Y+1	; 0x01
    2156:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <Private_VWriteHalfPort>
	Private_VEnable();
    215a:	0e 94 0d 12 	call	0x241a	; 0x241a <Private_VEnable>

}
    215e:	0f 90       	pop	r0
    2160:	cf 91       	pop	r28
    2162:	df 91       	pop	r29
    2164:	08 95       	ret

00002166 <LCD_VSendChar>:

void LCD_VSendChar (UINT8 Data){
    2166:	df 93       	push	r29
    2168:	cf 93       	push	r28
    216a:	0f 92       	push	r0
    216c:	cd b7       	in	r28, 0x3d	; 61
    216e:	de b7       	in	r29, 0x3e	; 62
    2170:	89 83       	std	Y+1, r24	; 0x01

	Dio_WriteChannel(LCD_Rs , HIGH);
    2172:	83 e0       	ldi	r24, 0x03	; 3
    2174:	61 e0       	ldi	r22, 0x01	; 1
    2176:	0e 94 8f 0b 	call	0x171e	; 0x171e <Dio_WriteChannel>
	Private_VWriteHalfPort(Data>>4);
    217a:	89 81       	ldd	r24, Y+1	; 0x01
    217c:	82 95       	swap	r24
    217e:	8f 70       	andi	r24, 0x0F	; 15
    2180:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <Private_VWriteHalfPort>
	Private_VEnable();
    2184:	0e 94 0d 12 	call	0x241a	; 0x241a <Private_VEnable>
	Private_VWriteHalfPort(Data);
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <Private_VWriteHalfPort>
	Private_VEnable();
    218e:	0e 94 0d 12 	call	0x241a	; 0x241a <Private_VEnable>

}
    2192:	0f 90       	pop	r0
    2194:	cf 91       	pop	r28
    2196:	df 91       	pop	r29
    2198:	08 95       	ret

0000219a <LCD_VSendString>:

void LCD_VSendString (UINT8 *arr){
    219a:	df 93       	push	r29
    219c:	cf 93       	push	r28
    219e:	00 d0       	rcall	.+0      	; 0x21a0 <LCD_VSendString+0x6>
    21a0:	0f 92       	push	r0
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
    21a6:	9b 83       	std	Y+3, r25	; 0x03
    21a8:	8a 83       	std	Y+2, r24	; 0x02
	UINT8 i = 0;
    21aa:	19 82       	std	Y+1, r1	; 0x01
    21ac:	0e c0       	rjmp	.+28     	; 0x21ca <LCD_VSendString+0x30>
	while(arr[i] != '\0'){
		LCD_VSendChar (arr[i]);
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
    21b0:	28 2f       	mov	r18, r24
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	8a 81       	ldd	r24, Y+2	; 0x02
    21b6:	9b 81       	ldd	r25, Y+3	; 0x03
    21b8:	fc 01       	movw	r30, r24
    21ba:	e2 0f       	add	r30, r18
    21bc:	f3 1f       	adc	r31, r19
    21be:	80 81       	ld	r24, Z
    21c0:	0e 94 b3 10 	call	0x2166	; 0x2166 <LCD_VSendChar>
		i++;
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
    21c6:	8f 5f       	subi	r24, 0xFF	; 255
    21c8:	89 83       	std	Y+1, r24	; 0x01

}

void LCD_VSendString (UINT8 *arr){
	UINT8 i = 0;
	while(arr[i] != '\0'){
    21ca:	89 81       	ldd	r24, Y+1	; 0x01
    21cc:	28 2f       	mov	r18, r24
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	8a 81       	ldd	r24, Y+2	; 0x02
    21d2:	9b 81       	ldd	r25, Y+3	; 0x03
    21d4:	fc 01       	movw	r30, r24
    21d6:	e2 0f       	add	r30, r18
    21d8:	f3 1f       	adc	r31, r19
    21da:	80 81       	ld	r24, Z
    21dc:	88 23       	and	r24, r24
    21de:	39 f7       	brne	.-50     	; 0x21ae <LCD_VSendString+0x14>
		LCD_VSendChar (arr[i]);
		i++;
	}
}
    21e0:	0f 90       	pop	r0
    21e2:	0f 90       	pop	r0
    21e4:	0f 90       	pop	r0
    21e6:	cf 91       	pop	r28
    21e8:	df 91       	pop	r29
    21ea:	08 95       	ret

000021ec <LCD_VGoToRowCol>:

void LCD_VGoToRowCol(UINT8 row, UINT8 col){
    21ec:	df 93       	push	r29
    21ee:	cf 93       	push	r28
    21f0:	00 d0       	rcall	.+0      	; 0x21f2 <LCD_VGoToRowCol+0x6>
    21f2:	00 d0       	rcall	.+0      	; 0x21f4 <LCD_VGoToRowCol+0x8>
    21f4:	0f 92       	push	r0
    21f6:	cd b7       	in	r28, 0x3d	; 61
    21f8:	de b7       	in	r29, 0x3e	; 62
    21fa:	8a 83       	std	Y+2, r24	; 0x02
    21fc:	6b 83       	std	Y+3, r22	; 0x03

	UINT8 address;
		switch (row)
    21fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2200:	28 2f       	mov	r18, r24
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	3d 83       	std	Y+5, r19	; 0x05
    2206:	2c 83       	std	Y+4, r18	; 0x04
    2208:	8c 81       	ldd	r24, Y+4	; 0x04
    220a:	9d 81       	ldd	r25, Y+5	; 0x05
    220c:	81 30       	cpi	r24, 0x01	; 1
    220e:	91 05       	cpc	r25, r1
    2210:	c1 f0       	breq	.+48     	; 0x2242 <LCD_VGoToRowCol+0x56>
    2212:	2c 81       	ldd	r18, Y+4	; 0x04
    2214:	3d 81       	ldd	r19, Y+5	; 0x05
    2216:	22 30       	cpi	r18, 0x02	; 2
    2218:	31 05       	cpc	r19, r1
    221a:	2c f4       	brge	.+10     	; 0x2226 <LCD_VGoToRowCol+0x3a>
    221c:	8c 81       	ldd	r24, Y+4	; 0x04
    221e:	9d 81       	ldd	r25, Y+5	; 0x05
    2220:	00 97       	sbiw	r24, 0x00	; 0
    2222:	61 f0       	breq	.+24     	; 0x223c <LCD_VGoToRowCol+0x50>
    2224:	19 c0       	rjmp	.+50     	; 0x2258 <LCD_VGoToRowCol+0x6c>
    2226:	2c 81       	ldd	r18, Y+4	; 0x04
    2228:	3d 81       	ldd	r19, Y+5	; 0x05
    222a:	22 30       	cpi	r18, 0x02	; 2
    222c:	31 05       	cpc	r19, r1
    222e:	69 f0       	breq	.+26     	; 0x224a <LCD_VGoToRowCol+0x5e>
    2230:	8c 81       	ldd	r24, Y+4	; 0x04
    2232:	9d 81       	ldd	r25, Y+5	; 0x05
    2234:	83 30       	cpi	r24, 0x03	; 3
    2236:	91 05       	cpc	r25, r1
    2238:	61 f0       	breq	.+24     	; 0x2252 <LCD_VGoToRowCol+0x66>
    223a:	0e c0       	rjmp	.+28     	; 0x2258 <LCD_VGoToRowCol+0x6c>
		{
			case 0:
				address = col;
    223c:	8b 81       	ldd	r24, Y+3	; 0x03
    223e:	89 83       	std	Y+1, r24	; 0x01
    2240:	0b c0       	rjmp	.+22     	; 0x2258 <LCD_VGoToRowCol+0x6c>
				break;
			case 1:
				address = col + 0x40;
    2242:	8b 81       	ldd	r24, Y+3	; 0x03
    2244:	80 5c       	subi	r24, 0xC0	; 192
    2246:	89 83       	std	Y+1, r24	; 0x01
    2248:	07 c0       	rjmp	.+14     	; 0x2258 <LCD_VGoToRowCol+0x6c>
				break;
			case 2:
				address = col + 0x14;
    224a:	8b 81       	ldd	r24, Y+3	; 0x03
    224c:	8c 5e       	subi	r24, 0xEC	; 236
    224e:	89 83       	std	Y+1, r24	; 0x01
    2250:	03 c0       	rjmp	.+6      	; 0x2258 <LCD_VGoToRowCol+0x6c>
				break;
			case 3:
				address = col + 0x54;
    2252:	8b 81       	ldd	r24, Y+3	; 0x03
    2254:	8c 5a       	subi	r24, 0xAC	; 172
    2256:	89 83       	std	Y+1, r24	; 0x01
				break;

		}
		LCD_VSendCmnd(address | SET_CURSOR_LOCATION);
    2258:	89 81       	ldd	r24, Y+1	; 0x01
    225a:	80 68       	ori	r24, 0x80	; 128
    225c:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_VSendCmnd>
}
    2260:	0f 90       	pop	r0
    2262:	0f 90       	pop	r0
    2264:	0f 90       	pop	r0
    2266:	0f 90       	pop	r0
    2268:	0f 90       	pop	r0
    226a:	cf 91       	pop	r28
    226c:	df 91       	pop	r29
    226e:	08 95       	ret

00002270 <LCD_VIntegerToString>:

void LCD_VIntegerToString(UINT16 data){
    2270:	df 93       	push	r29
    2272:	cf 93       	push	r28
    2274:	cd b7       	in	r28, 0x3d	; 61
    2276:	de b7       	in	r29, 0x3e	; 62
    2278:	62 97       	sbiw	r28, 0x12	; 18
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	f8 94       	cli
    227e:	de bf       	out	0x3e, r29	; 62
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	cd bf       	out	0x3d, r28	; 61
    2284:	9a 8b       	std	Y+18, r25	; 0x12
    2286:	89 8b       	std	Y+17, r24	; 0x11

	UINT8 BUFF[16];
	//itoa(data,BUFF,10);
	Private_VintToStr(data,BUFF);
    2288:	89 89       	ldd	r24, Y+17	; 0x11
    228a:	9a 89       	ldd	r25, Y+18	; 0x12
    228c:	9e 01       	movw	r18, r28
    228e:	2f 5f       	subi	r18, 0xFF	; 255
    2290:	3f 4f       	sbci	r19, 0xFF	; 255
    2292:	b9 01       	movw	r22, r18
    2294:	0e 94 9a 12 	call	0x2534	; 0x2534 <Private_VintToStr>
	LCD_VSendString(BUFF);
    2298:	ce 01       	movw	r24, r28
    229a:	01 96       	adiw	r24, 0x01	; 1
    229c:	0e 94 cd 10 	call	0x219a	; 0x219a <LCD_VSendString>

}
    22a0:	62 96       	adiw	r28, 0x12	; 18
    22a2:	0f b6       	in	r0, 0x3f	; 63
    22a4:	f8 94       	cli
    22a6:	de bf       	out	0x3e, r29	; 62
    22a8:	0f be       	out	0x3f, r0	; 63
    22aa:	cd bf       	out	0x3d, r28	; 61
    22ac:	cf 91       	pop	r28
    22ae:	df 91       	pop	r29
    22b0:	08 95       	ret

000022b2 <LCD_VClearScreen>:

void LCD_VClearScreen(){
    22b2:	df 93       	push	r29
    22b4:	cf 93       	push	r28
    22b6:	cd b7       	in	r28, 0x3d	; 61
    22b8:	de b7       	in	r29, 0x3e	; 62
    22ba:	2e 97       	sbiw	r28, 0x0e	; 14
    22bc:	0f b6       	in	r0, 0x3f	; 63
    22be:	f8 94       	cli
    22c0:	de bf       	out	0x3e, r29	; 62
    22c2:	0f be       	out	0x3f, r0	; 63
    22c4:	cd bf       	out	0x3d, r28	; 61
	LCD_VSendCmnd(LCD_Display_Clear);
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_VSendCmnd>
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	a0 e0       	ldi	r26, 0x00	; 0
    22d2:	b0 e4       	ldi	r27, 0x40	; 64
    22d4:	8b 87       	std	Y+11, r24	; 0x0b
    22d6:	9c 87       	std	Y+12, r25	; 0x0c
    22d8:	ad 87       	std	Y+13, r26	; 0x0d
    22da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    22de:	7c 85       	ldd	r23, Y+12	; 0x0c
    22e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	4a e7       	ldi	r20, 0x7A	; 122
    22ea:	55 e4       	ldi	r21, 0x45	; 69
    22ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	8f 83       	std	Y+7, r24	; 0x07
    22f6:	98 87       	std	Y+8, r25	; 0x08
    22f8:	a9 87       	std	Y+9, r26	; 0x09
    22fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22fc:	6f 81       	ldd	r22, Y+7	; 0x07
    22fe:	78 85       	ldd	r23, Y+8	; 0x08
    2300:	89 85       	ldd	r24, Y+9	; 0x09
    2302:	9a 85       	ldd	r25, Y+10	; 0x0a
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	40 e8       	ldi	r20, 0x80	; 128
    230a:	5f e3       	ldi	r21, 0x3F	; 63
    230c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2310:	88 23       	and	r24, r24
    2312:	2c f4       	brge	.+10     	; 0x231e <LCD_VClearScreen+0x6c>
		__ticks = 1;
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	9e 83       	std	Y+6, r25	; 0x06
    231a:	8d 83       	std	Y+5, r24	; 0x05
    231c:	3f c0       	rjmp	.+126    	; 0x239c <LCD_VClearScreen+0xea>
	else if (__tmp > 65535)
    231e:	6f 81       	ldd	r22, Y+7	; 0x07
    2320:	78 85       	ldd	r23, Y+8	; 0x08
    2322:	89 85       	ldd	r24, Y+9	; 0x09
    2324:	9a 85       	ldd	r25, Y+10	; 0x0a
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	3f ef       	ldi	r19, 0xFF	; 255
    232a:	4f e7       	ldi	r20, 0x7F	; 127
    232c:	57 e4       	ldi	r21, 0x47	; 71
    232e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2332:	18 16       	cp	r1, r24
    2334:	4c f5       	brge	.+82     	; 0x2388 <LCD_VClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2336:	6b 85       	ldd	r22, Y+11	; 0x0b
    2338:	7c 85       	ldd	r23, Y+12	; 0x0c
    233a:	8d 85       	ldd	r24, Y+13	; 0x0d
    233c:	9e 85       	ldd	r25, Y+14	; 0x0e
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	40 e2       	ldi	r20, 0x20	; 32
    2344:	51 e4       	ldi	r21, 0x41	; 65
    2346:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	bc 01       	movw	r22, r24
    2350:	cd 01       	movw	r24, r26
    2352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	9e 83       	std	Y+6, r25	; 0x06
    235c:	8d 83       	std	Y+5, r24	; 0x05
    235e:	0f c0       	rjmp	.+30     	; 0x237e <LCD_VClearScreen+0xcc>
    2360:	80 e9       	ldi	r24, 0x90	; 144
    2362:	91 e0       	ldi	r25, 0x01	; 1
    2364:	9c 83       	std	Y+4, r25	; 0x04
    2366:	8b 83       	std	Y+3, r24	; 0x03
    2368:	8b 81       	ldd	r24, Y+3	; 0x03
    236a:	9c 81       	ldd	r25, Y+4	; 0x04
    236c:	01 97       	sbiw	r24, 0x01	; 1
    236e:	f1 f7       	brne	.-4      	; 0x236c <LCD_VClearScreen+0xba>
    2370:	9c 83       	std	Y+4, r25	; 0x04
    2372:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2374:	8d 81       	ldd	r24, Y+5	; 0x05
    2376:	9e 81       	ldd	r25, Y+6	; 0x06
    2378:	01 97       	sbiw	r24, 0x01	; 1
    237a:	9e 83       	std	Y+6, r25	; 0x06
    237c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    237e:	8d 81       	ldd	r24, Y+5	; 0x05
    2380:	9e 81       	ldd	r25, Y+6	; 0x06
    2382:	00 97       	sbiw	r24, 0x00	; 0
    2384:	69 f7       	brne	.-38     	; 0x2360 <LCD_VClearScreen+0xae>
    2386:	14 c0       	rjmp	.+40     	; 0x23b0 <LCD_VClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2388:	6f 81       	ldd	r22, Y+7	; 0x07
    238a:	78 85       	ldd	r23, Y+8	; 0x08
    238c:	89 85       	ldd	r24, Y+9	; 0x09
    238e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	9e 83       	std	Y+6, r25	; 0x06
    239a:	8d 83       	std	Y+5, r24	; 0x05
    239c:	8d 81       	ldd	r24, Y+5	; 0x05
    239e:	9e 81       	ldd	r25, Y+6	; 0x06
    23a0:	9a 83       	std	Y+2, r25	; 0x02
    23a2:	89 83       	std	Y+1, r24	; 0x01
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	9a 81       	ldd	r25, Y+2	; 0x02
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	f1 f7       	brne	.-4      	; 0x23a8 <LCD_VClearScreen+0xf6>
    23ac:	9a 83       	std	Y+2, r25	; 0x02
    23ae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    23b0:	2e 96       	adiw	r28, 0x0e	; 14
    23b2:	0f b6       	in	r0, 0x3f	; 63
    23b4:	f8 94       	cli
    23b6:	de bf       	out	0x3e, r29	; 62
    23b8:	0f be       	out	0x3f, r0	; 63
    23ba:	cd bf       	out	0x3d, r28	; 61
    23bc:	cf 91       	pop	r28
    23be:	df 91       	pop	r29
    23c0:	08 95       	ret

000023c2 <Private_VWriteHalfPort>:

static void Private_VWriteHalfPort(UINT8 value){
    23c2:	df 93       	push	r29
    23c4:	cf 93       	push	r28
    23c6:	0f 92       	push	r0
    23c8:	cd b7       	in	r28, 0x3d	; 61
    23ca:	de b7       	in	r29, 0x3e	; 62
    23cc:	89 83       	std	Y+1, r24	; 0x01

	Dio_WriteChannel(LCD_D4 , READBIT(value , 0));
    23ce:	89 81       	ldd	r24, Y+1	; 0x01
    23d0:	98 2f       	mov	r25, r24
    23d2:	91 70       	andi	r25, 0x01	; 1
    23d4:	88 e0       	ldi	r24, 0x08	; 8
    23d6:	69 2f       	mov	r22, r25
    23d8:	0e 94 8f 0b 	call	0x171e	; 0x171e <Dio_WriteChannel>
	Dio_WriteChannel(LCD_D5 , READBIT(value , 1));
    23dc:	89 81       	ldd	r24, Y+1	; 0x01
    23de:	86 95       	lsr	r24
    23e0:	98 2f       	mov	r25, r24
    23e2:	91 70       	andi	r25, 0x01	; 1
    23e4:	89 e0       	ldi	r24, 0x09	; 9
    23e6:	69 2f       	mov	r22, r25
    23e8:	0e 94 8f 0b 	call	0x171e	; 0x171e <Dio_WriteChannel>
	Dio_WriteChannel(LCD_D6 , READBIT(value , 2));
    23ec:	89 81       	ldd	r24, Y+1	; 0x01
    23ee:	86 95       	lsr	r24
    23f0:	86 95       	lsr	r24
    23f2:	98 2f       	mov	r25, r24
    23f4:	91 70       	andi	r25, 0x01	; 1
    23f6:	8a e0       	ldi	r24, 0x0A	; 10
    23f8:	69 2f       	mov	r22, r25
    23fa:	0e 94 8f 0b 	call	0x171e	; 0x171e <Dio_WriteChannel>
	Dio_WriteChannel(LCD_D7 , READBIT(value , 3));
    23fe:	89 81       	ldd	r24, Y+1	; 0x01
    2400:	86 95       	lsr	r24
    2402:	86 95       	lsr	r24
    2404:	86 95       	lsr	r24
    2406:	98 2f       	mov	r25, r24
    2408:	91 70       	andi	r25, 0x01	; 1
    240a:	8c e0       	ldi	r24, 0x0C	; 12
    240c:	69 2f       	mov	r22, r25
    240e:	0e 94 8f 0b 	call	0x171e	; 0x171e <Dio_WriteChannel>

}
    2412:	0f 90       	pop	r0
    2414:	cf 91       	pop	r28
    2416:	df 91       	pop	r29
    2418:	08 95       	ret

0000241a <Private_VEnable>:

static void Private_VEnable(void){
    241a:	df 93       	push	r29
    241c:	cf 93       	push	r28
    241e:	cd b7       	in	r28, 0x3d	; 61
    2420:	de b7       	in	r29, 0x3e	; 62
    2422:	2e 97       	sbiw	r28, 0x0e	; 14
    2424:	0f b6       	in	r0, 0x3f	; 63
    2426:	f8 94       	cli
    2428:	de bf       	out	0x3e, r29	; 62
    242a:	0f be       	out	0x3f, r0	; 63
    242c:	cd bf       	out	0x3d, r28	; 61

	Dio_WriteChannel(LCD_En , HIGH);
    242e:	82 e0       	ldi	r24, 0x02	; 2
    2430:	61 e0       	ldi	r22, 0x01	; 1
    2432:	0e 94 8f 0b 	call	0x171e	; 0x171e <Dio_WriteChannel>
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	a0 e8       	ldi	r26, 0x80	; 128
    243c:	bf e3       	ldi	r27, 0x3F	; 63
    243e:	8b 87       	std	Y+11, r24	; 0x0b
    2440:	9c 87       	std	Y+12, r25	; 0x0c
    2442:	ad 87       	std	Y+13, r26	; 0x0d
    2444:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2446:	6b 85       	ldd	r22, Y+11	; 0x0b
    2448:	7c 85       	ldd	r23, Y+12	; 0x0c
    244a:	8d 85       	ldd	r24, Y+13	; 0x0d
    244c:	9e 85       	ldd	r25, Y+14	; 0x0e
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	4a e7       	ldi	r20, 0x7A	; 122
    2454:	55 e4       	ldi	r21, 0x45	; 69
    2456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	8f 83       	std	Y+7, r24	; 0x07
    2460:	98 87       	std	Y+8, r25	; 0x08
    2462:	a9 87       	std	Y+9, r26	; 0x09
    2464:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2466:	6f 81       	ldd	r22, Y+7	; 0x07
    2468:	78 85       	ldd	r23, Y+8	; 0x08
    246a:	89 85       	ldd	r24, Y+9	; 0x09
    246c:	9a 85       	ldd	r25, Y+10	; 0x0a
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	40 e8       	ldi	r20, 0x80	; 128
    2474:	5f e3       	ldi	r21, 0x3F	; 63
    2476:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    247a:	88 23       	and	r24, r24
    247c:	2c f4       	brge	.+10     	; 0x2488 <Private_VEnable+0x6e>
		__ticks = 1;
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	9e 83       	std	Y+6, r25	; 0x06
    2484:	8d 83       	std	Y+5, r24	; 0x05
    2486:	3f c0       	rjmp	.+126    	; 0x2506 <Private_VEnable+0xec>
	else if (__tmp > 65535)
    2488:	6f 81       	ldd	r22, Y+7	; 0x07
    248a:	78 85       	ldd	r23, Y+8	; 0x08
    248c:	89 85       	ldd	r24, Y+9	; 0x09
    248e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	3f ef       	ldi	r19, 0xFF	; 255
    2494:	4f e7       	ldi	r20, 0x7F	; 127
    2496:	57 e4       	ldi	r21, 0x47	; 71
    2498:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    249c:	18 16       	cp	r1, r24
    249e:	4c f5       	brge	.+82     	; 0x24f2 <Private_VEnable+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	40 e2       	ldi	r20, 0x20	; 32
    24ae:	51 e4       	ldi	r21, 0x41	; 65
    24b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	bc 01       	movw	r22, r24
    24ba:	cd 01       	movw	r24, r26
    24bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	9e 83       	std	Y+6, r25	; 0x06
    24c6:	8d 83       	std	Y+5, r24	; 0x05
    24c8:	0f c0       	rjmp	.+30     	; 0x24e8 <Private_VEnable+0xce>
    24ca:	80 e9       	ldi	r24, 0x90	; 144
    24cc:	91 e0       	ldi	r25, 0x01	; 1
    24ce:	9c 83       	std	Y+4, r25	; 0x04
    24d0:	8b 83       	std	Y+3, r24	; 0x03
    24d2:	8b 81       	ldd	r24, Y+3	; 0x03
    24d4:	9c 81       	ldd	r25, Y+4	; 0x04
    24d6:	01 97       	sbiw	r24, 0x01	; 1
    24d8:	f1 f7       	brne	.-4      	; 0x24d6 <Private_VEnable+0xbc>
    24da:	9c 83       	std	Y+4, r25	; 0x04
    24dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24de:	8d 81       	ldd	r24, Y+5	; 0x05
    24e0:	9e 81       	ldd	r25, Y+6	; 0x06
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	9e 83       	std	Y+6, r25	; 0x06
    24e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ea:	9e 81       	ldd	r25, Y+6	; 0x06
    24ec:	00 97       	sbiw	r24, 0x00	; 0
    24ee:	69 f7       	brne	.-38     	; 0x24ca <Private_VEnable+0xb0>
    24f0:	14 c0       	rjmp	.+40     	; 0x251a <Private_VEnable+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f2:	6f 81       	ldd	r22, Y+7	; 0x07
    24f4:	78 85       	ldd	r23, Y+8	; 0x08
    24f6:	89 85       	ldd	r24, Y+9	; 0x09
    24f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	9e 83       	std	Y+6, r25	; 0x06
    2504:	8d 83       	std	Y+5, r24	; 0x05
    2506:	8d 81       	ldd	r24, Y+5	; 0x05
    2508:	9e 81       	ldd	r25, Y+6	; 0x06
    250a:	9a 83       	std	Y+2, r25	; 0x02
    250c:	89 83       	std	Y+1, r24	; 0x01
    250e:	89 81       	ldd	r24, Y+1	; 0x01
    2510:	9a 81       	ldd	r25, Y+2	; 0x02
    2512:	01 97       	sbiw	r24, 0x01	; 1
    2514:	f1 f7       	brne	.-4      	; 0x2512 <Private_VEnable+0xf8>
    2516:	9a 83       	std	Y+2, r25	; 0x02
    2518:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	Dio_WriteChannel(LCD_En , LOW);
    251a:	82 e0       	ldi	r24, 0x02	; 2
    251c:	60 e0       	ldi	r22, 0x00	; 0
    251e:	0e 94 8f 0b 	call	0x171e	; 0x171e <Dio_WriteChannel>

}
    2522:	2e 96       	adiw	r28, 0x0e	; 14
    2524:	0f b6       	in	r0, 0x3f	; 63
    2526:	f8 94       	cli
    2528:	de bf       	out	0x3e, r29	; 62
    252a:	0f be       	out	0x3f, r0	; 63
    252c:	cd bf       	out	0x3d, r28	; 61
    252e:	cf 91       	pop	r28
    2530:	df 91       	pop	r29
    2532:	08 95       	ret

00002534 <Private_VintToStr>:

static void Private_VintToStr(UINT16 num, UINT8 str[]) {
    2534:	df 93       	push	r29
    2536:	cf 93       	push	r28
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
    253c:	2b 97       	sbiw	r28, 0x0b	; 11
    253e:	0f b6       	in	r0, 0x3f	; 63
    2540:	f8 94       	cli
    2542:	de bf       	out	0x3e, r29	; 62
    2544:	0f be       	out	0x3f, r0	; 63
    2546:	cd bf       	out	0x3d, r28	; 61
    2548:	99 87       	std	Y+9, r25	; 0x09
    254a:	88 87       	std	Y+8, r24	; 0x08
    254c:	7b 87       	std	Y+11, r23	; 0x0b
    254e:	6a 87       	std	Y+10, r22	; 0x0a
    int i = 0;
    2550:	1f 82       	std	Y+7, r1	; 0x07
    2552:	1e 82       	std	Y+6, r1	; 0x06

    do {
        str[i++] = num % 10 + '0';
    2554:	2e 81       	ldd	r18, Y+6	; 0x06
    2556:	3f 81       	ldd	r19, Y+7	; 0x07
    2558:	8a 85       	ldd	r24, Y+10	; 0x0a
    255a:	9b 85       	ldd	r25, Y+11	; 0x0b
    255c:	fc 01       	movw	r30, r24
    255e:	e2 0f       	add	r30, r18
    2560:	f3 1f       	adc	r31, r19
    2562:	88 85       	ldd	r24, Y+8	; 0x08
    2564:	99 85       	ldd	r25, Y+9	; 0x09
    2566:	2a e0       	ldi	r18, 0x0A	; 10
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	b9 01       	movw	r22, r18
    256c:	0e 94 4a 14 	call	0x2894	; 0x2894 <__udivmodhi4>
    2570:	80 5d       	subi	r24, 0xD0	; 208
    2572:	80 83       	st	Z, r24
    2574:	8e 81       	ldd	r24, Y+6	; 0x06
    2576:	9f 81       	ldd	r25, Y+7	; 0x07
    2578:	01 96       	adiw	r24, 0x01	; 1
    257a:	9f 83       	std	Y+7, r25	; 0x07
    257c:	8e 83       	std	Y+6, r24	; 0x06
        num /= 10;
    257e:	88 85       	ldd	r24, Y+8	; 0x08
    2580:	99 85       	ldd	r25, Y+9	; 0x09
    2582:	2a e0       	ldi	r18, 0x0A	; 10
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	b9 01       	movw	r22, r18
    2588:	0e 94 4a 14 	call	0x2894	; 0x2894 <__udivmodhi4>
    258c:	cb 01       	movw	r24, r22
    258e:	99 87       	std	Y+9, r25	; 0x09
    2590:	88 87       	std	Y+8, r24	; 0x08
    } while (num > 0);
    2592:	88 85       	ldd	r24, Y+8	; 0x08
    2594:	99 85       	ldd	r25, Y+9	; 0x09
    2596:	00 97       	sbiw	r24, 0x00	; 0
    2598:	e9 f6       	brne	.-70     	; 0x2554 <Private_VintToStr+0x20>

    str[i] = '\0';
    259a:	2e 81       	ldd	r18, Y+6	; 0x06
    259c:	3f 81       	ldd	r19, Y+7	; 0x07
    259e:	8a 85       	ldd	r24, Y+10	; 0x0a
    25a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    25a2:	fc 01       	movw	r30, r24
    25a4:	e2 0f       	add	r30, r18
    25a6:	f3 1f       	adc	r31, r19
    25a8:	10 82       	st	Z, r1

    int start = 0;
    25aa:	1d 82       	std	Y+5, r1	; 0x05
    25ac:	1c 82       	std	Y+4, r1	; 0x04
    int end = i - 1;
    25ae:	8e 81       	ldd	r24, Y+6	; 0x06
    25b0:	9f 81       	ldd	r25, Y+7	; 0x07
    25b2:	01 97       	sbiw	r24, 0x01	; 1
    25b4:	9b 83       	std	Y+3, r25	; 0x03
    25b6:	8a 83       	std	Y+2, r24	; 0x02
    25b8:	2c c0       	rjmp	.+88     	; 0x2612 <Private_VintToStr+0xde>
    while (start < end) {
        char temp = str[start];
    25ba:	2c 81       	ldd	r18, Y+4	; 0x04
    25bc:	3d 81       	ldd	r19, Y+5	; 0x05
    25be:	8a 85       	ldd	r24, Y+10	; 0x0a
    25c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    25c2:	fc 01       	movw	r30, r24
    25c4:	e2 0f       	add	r30, r18
    25c6:	f3 1f       	adc	r31, r19
    25c8:	80 81       	ld	r24, Z
    25ca:	89 83       	std	Y+1, r24	; 0x01
        str[start] = str[end];
    25cc:	2c 81       	ldd	r18, Y+4	; 0x04
    25ce:	3d 81       	ldd	r19, Y+5	; 0x05
    25d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    25d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    25d4:	dc 01       	movw	r26, r24
    25d6:	a2 0f       	add	r26, r18
    25d8:	b3 1f       	adc	r27, r19
    25da:	2a 81       	ldd	r18, Y+2	; 0x02
    25dc:	3b 81       	ldd	r19, Y+3	; 0x03
    25de:	8a 85       	ldd	r24, Y+10	; 0x0a
    25e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    25e2:	fc 01       	movw	r30, r24
    25e4:	e2 0f       	add	r30, r18
    25e6:	f3 1f       	adc	r31, r19
    25e8:	80 81       	ld	r24, Z
    25ea:	8c 93       	st	X, r24
        str[end] = temp;
    25ec:	2a 81       	ldd	r18, Y+2	; 0x02
    25ee:	3b 81       	ldd	r19, Y+3	; 0x03
    25f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    25f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    25f4:	fc 01       	movw	r30, r24
    25f6:	e2 0f       	add	r30, r18
    25f8:	f3 1f       	adc	r31, r19
    25fa:	89 81       	ldd	r24, Y+1	; 0x01
    25fc:	80 83       	st	Z, r24
        start++;
    25fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2600:	9d 81       	ldd	r25, Y+5	; 0x05
    2602:	01 96       	adiw	r24, 0x01	; 1
    2604:	9d 83       	std	Y+5, r25	; 0x05
    2606:	8c 83       	std	Y+4, r24	; 0x04
        end--;
    2608:	8a 81       	ldd	r24, Y+2	; 0x02
    260a:	9b 81       	ldd	r25, Y+3	; 0x03
    260c:	01 97       	sbiw	r24, 0x01	; 1
    260e:	9b 83       	std	Y+3, r25	; 0x03
    2610:	8a 83       	std	Y+2, r24	; 0x02

    str[i] = '\0';

    int start = 0;
    int end = i - 1;
    while (start < end) {
    2612:	2c 81       	ldd	r18, Y+4	; 0x04
    2614:	3d 81       	ldd	r19, Y+5	; 0x05
    2616:	8a 81       	ldd	r24, Y+2	; 0x02
    2618:	9b 81       	ldd	r25, Y+3	; 0x03
    261a:	28 17       	cp	r18, r24
    261c:	39 07       	cpc	r19, r25
    261e:	6c f2       	brlt	.-102    	; 0x25ba <Private_VintToStr+0x86>
        str[start] = str[end];
        str[end] = temp;
        start++;
        end--;
    }
}
    2620:	2b 96       	adiw	r28, 0x0b	; 11
    2622:	0f b6       	in	r0, 0x3f	; 63
    2624:	f8 94       	cli
    2626:	de bf       	out	0x3e, r29	; 62
    2628:	0f be       	out	0x3f, r0	; 63
    262a:	cd bf       	out	0x3d, r28	; 61
    262c:	cf 91       	pop	r28
    262e:	df 91       	pop	r29
    2630:	08 95       	ret

00002632 <KPD_VGetValue>:
static UINT8 Keypad [4][4]={{14,10,9,8},
							{13,7,6,5},
							{12,4,3,2},
							{11,15,1,16}};

void KPD_VGetValue (UINT16 * Return_Value){
    2632:	df 93       	push	r29
    2634:	cf 93       	push	r28
    2636:	cd b7       	in	r28, 0x3d	; 61
    2638:	de b7       	in	r29, 0x3e	; 62
    263a:	2c 97       	sbiw	r28, 0x0c	; 12
    263c:	0f b6       	in	r0, 0x3f	; 63
    263e:	f8 94       	cli
    2640:	de bf       	out	0x3e, r29	; 62
    2642:	0f be       	out	0x3f, r0	; 63
    2644:	cd bf       	out	0x3d, r28	; 61
    2646:	9c 87       	std	Y+12, r25	; 0x0c
    2648:	8b 87       	std	Y+11, r24	; 0x0b

	*Return_Value = Key_Not_Pressed;
    264a:	eb 85       	ldd	r30, Y+11	; 0x0b
    264c:	fc 85       	ldd	r31, Y+12	; 0x0c
    264e:	88 ec       	ldi	r24, 0xC8	; 200
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	91 83       	std	Z+1, r25	; 0x01
    2654:	80 83       	st	Z, r24
	UINT8 Row , Col ;
	UINT8 Arr_Row [4] = {ROW1 , ROW2 ,ROW3 ,ROW4};
    2656:	85 e1       	ldi	r24, 0x15	; 21
    2658:	8b 83       	std	Y+3, r24	; 0x03
    265a:	84 e1       	ldi	r24, 0x14	; 20
    265c:	8c 83       	std	Y+4, r24	; 0x04
    265e:	83 e1       	ldi	r24, 0x13	; 19
    2660:	8d 83       	std	Y+5, r24	; 0x05
    2662:	82 e1       	ldi	r24, 0x12	; 18
    2664:	8e 83       	std	Y+6, r24	; 0x06
	UINT8 Arr_Col [4] = {COL1 , COL2 ,COL3 ,COL4};
    2666:	8f e1       	ldi	r24, 0x1F	; 31
    2668:	8f 83       	std	Y+7, r24	; 0x07
    266a:	8e e1       	ldi	r24, 0x1E	; 30
    266c:	88 87       	std	Y+8, r24	; 0x08
    266e:	8c e1       	ldi	r24, 0x1C	; 28
    2670:	89 87       	std	Y+9, r24	; 0x09
    2672:	8b e1       	ldi	r24, 0x1B	; 27
    2674:	8a 87       	std	Y+10, r24	; 0x0a

		for(Row=0 ; Row<4 ; Row++){
    2676:	1a 82       	std	Y+2, r1	; 0x02
    2678:	62 c0       	rjmp	.+196    	; 0x273e <KPD_VGetValue+0x10c>

			Dio_WriteChannel(Arr_Row[Row],LOW);
    267a:	8a 81       	ldd	r24, Y+2	; 0x02
    267c:	28 2f       	mov	r18, r24
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	ce 01       	movw	r24, r28
    2682:	03 96       	adiw	r24, 0x03	; 3
    2684:	fc 01       	movw	r30, r24
    2686:	e2 0f       	add	r30, r18
    2688:	f3 1f       	adc	r31, r19
    268a:	80 81       	ld	r24, Z
    268c:	60 e0       	ldi	r22, 0x00	; 0
    268e:	0e 94 8f 0b 	call	0x171e	; 0x171e <Dio_WriteChannel>

			for (Col=0 ; Col<4 ; Col++)
    2692:	19 82       	std	Y+1, r1	; 0x01
    2694:	41 c0       	rjmp	.+130    	; 0x2718 <KPD_VGetValue+0xe6>
				if( Dio_ReadChannel(Arr_Col[Col]) == 0){
    2696:	89 81       	ldd	r24, Y+1	; 0x01
    2698:	28 2f       	mov	r18, r24
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	ce 01       	movw	r24, r28
    269e:	07 96       	adiw	r24, 0x07	; 7
    26a0:	fc 01       	movw	r30, r24
    26a2:	e2 0f       	add	r30, r18
    26a4:	f3 1f       	adc	r31, r19
    26a6:	80 81       	ld	r24, Z
    26a8:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <Dio_ReadChannel>
    26ac:	88 23       	and	r24, r24
    26ae:	89 f5       	brne	.+98     	; 0x2712 <KPD_VGetValue+0xe0>
//					*Return_Value = (Row * 4) + Col + 1 ;
					*Return_Value = Keypad[Row][Col];
    26b0:	8a 81       	ldd	r24, Y+2	; 0x02
    26b2:	48 2f       	mov	r20, r24
    26b4:	50 e0       	ldi	r21, 0x00	; 0
    26b6:	89 81       	ldd	r24, Y+1	; 0x01
    26b8:	28 2f       	mov	r18, r24
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	ca 01       	movw	r24, r20
    26be:	88 0f       	add	r24, r24
    26c0:	99 1f       	adc	r25, r25
    26c2:	88 0f       	add	r24, r24
    26c4:	99 1f       	adc	r25, r25
    26c6:	82 0f       	add	r24, r18
    26c8:	93 1f       	adc	r25, r19
    26ca:	fc 01       	movw	r30, r24
    26cc:	e4 51       	subi	r30, 0x14	; 20
    26ce:	fe 4f       	sbci	r31, 0xFE	; 254
    26d0:	80 81       	ld	r24, Z
    26d2:	88 2f       	mov	r24, r24
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	eb 85       	ldd	r30, Y+11	; 0x0b
    26d8:	fc 85       	ldd	r31, Y+12	; 0x0c
    26da:	91 83       	std	Z+1, r25	; 0x01
    26dc:	80 83       	st	Z, r24
					while(Dio_ReadChannel(Arr_Col[Col]) == 0);
    26de:	89 81       	ldd	r24, Y+1	; 0x01
    26e0:	28 2f       	mov	r18, r24
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	ce 01       	movw	r24, r28
    26e6:	07 96       	adiw	r24, 0x07	; 7
    26e8:	fc 01       	movw	r30, r24
    26ea:	e2 0f       	add	r30, r18
    26ec:	f3 1f       	adc	r31, r19
    26ee:	80 81       	ld	r24, Z
    26f0:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <Dio_ReadChannel>
    26f4:	88 23       	and	r24, r24
    26f6:	99 f3       	breq	.-26     	; 0x26de <KPD_VGetValue+0xac>
					Dio_WriteChannel(Arr_Row[Row],HIGH);
    26f8:	8a 81       	ldd	r24, Y+2	; 0x02
    26fa:	28 2f       	mov	r18, r24
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	ce 01       	movw	r24, r28
    2700:	03 96       	adiw	r24, 0x03	; 3
    2702:	fc 01       	movw	r30, r24
    2704:	e2 0f       	add	r30, r18
    2706:	f3 1f       	adc	r31, r19
    2708:	80 81       	ld	r24, Z
    270a:	61 e0       	ldi	r22, 0x01	; 1
    270c:	0e 94 8f 0b 	call	0x171e	; 0x171e <Dio_WriteChannel>
    2710:	1a c0       	rjmp	.+52     	; 0x2746 <KPD_VGetValue+0x114>

		for(Row=0 ; Row<4 ; Row++){

			Dio_WriteChannel(Arr_Row[Row],LOW);

			for (Col=0 ; Col<4 ; Col++)
    2712:	89 81       	ldd	r24, Y+1	; 0x01
    2714:	8f 5f       	subi	r24, 0xFF	; 255
    2716:	89 83       	std	Y+1, r24	; 0x01
    2718:	89 81       	ldd	r24, Y+1	; 0x01
    271a:	84 30       	cpi	r24, 0x04	; 4
    271c:	08 f4       	brcc	.+2      	; 0x2720 <KPD_VGetValue+0xee>
    271e:	bb cf       	rjmp	.-138    	; 0x2696 <KPD_VGetValue+0x64>
					while(Dio_ReadChannel(Arr_Col[Col]) == 0);
					Dio_WriteChannel(Arr_Row[Row],HIGH);
					return;
				}

			Dio_WriteChannel(Arr_Row[Row],HIGH);
    2720:	8a 81       	ldd	r24, Y+2	; 0x02
    2722:	28 2f       	mov	r18, r24
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	ce 01       	movw	r24, r28
    2728:	03 96       	adiw	r24, 0x03	; 3
    272a:	fc 01       	movw	r30, r24
    272c:	e2 0f       	add	r30, r18
    272e:	f3 1f       	adc	r31, r19
    2730:	80 81       	ld	r24, Z
    2732:	61 e0       	ldi	r22, 0x01	; 1
    2734:	0e 94 8f 0b 	call	0x171e	; 0x171e <Dio_WriteChannel>
	*Return_Value = Key_Not_Pressed;
	UINT8 Row , Col ;
	UINT8 Arr_Row [4] = {ROW1 , ROW2 ,ROW3 ,ROW4};
	UINT8 Arr_Col [4] = {COL1 , COL2 ,COL3 ,COL4};

		for(Row=0 ; Row<4 ; Row++){
    2738:	8a 81       	ldd	r24, Y+2	; 0x02
    273a:	8f 5f       	subi	r24, 0xFF	; 255
    273c:	8a 83       	std	Y+2, r24	; 0x02
    273e:	8a 81       	ldd	r24, Y+2	; 0x02
    2740:	84 30       	cpi	r24, 0x04	; 4
    2742:	08 f4       	brcc	.+2      	; 0x2746 <KPD_VGetValue+0x114>
    2744:	9a cf       	rjmp	.-204    	; 0x267a <KPD_VGetValue+0x48>
				}

			Dio_WriteChannel(Arr_Row[Row],HIGH);

		}
}
    2746:	2c 96       	adiw	r28, 0x0c	; 12
    2748:	0f b6       	in	r0, 0x3f	; 63
    274a:	f8 94       	cli
    274c:	de bf       	out	0x3e, r29	; 62
    274e:	0f be       	out	0x3f, r0	; 63
    2750:	cd bf       	out	0x3d, r28	; 61
    2752:	cf 91       	pop	r28
    2754:	df 91       	pop	r29
    2756:	08 95       	ret

00002758 <main>:
const UINT8 CorrectPass[] = "1234";

void SecuritySystem(void);
void OpenDoor(void);

int main() {
    2758:	df 93       	push	r29
    275a:	cf 93       	push	r28
    275c:	00 d0       	rcall	.+0      	; 0x275e <main+0x6>
    275e:	00 d0       	rcall	.+0      	; 0x2760 <main+0x8>
    2760:	0f 92       	push	r0
    2762:	cd b7       	in	r28, 0x3d	; 61
    2764:	de b7       	in	r29, 0x3e	; 62
    UINT8 maxTrials = 3;
    2766:	83 e0       	ldi	r24, 0x03	; 3
    2768:	8b 83       	std	Y+3, r24	; 0x03
    UINT16 key =0;
    276a:	1d 82       	std	Y+5, r1	; 0x05
    276c:	1c 82       	std	Y+4, r1	; 0x04

    Dio_Init();
    276e:	0e 94 ae 09 	call	0x135c	; 0x135c <Dio_Init>
    LCD_VInit();
    2772:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LCD_VInit>

    while(1){
    	LCD_VClearScreen();
    2776:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LCD_VClearScreen>
    	LCD_VSendString("Welcome! Enter The Password: ");
    277a:	80 e6       	ldi	r24, 0x60	; 96
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	0e 94 cd 10 	call	0x219a	; 0x219a <LCD_VSendString>
		UINT8 i =0 ,trialCount = 0 ;
    2782:	1a 82       	std	Y+2, r1	; 0x02
    2784:	19 82       	std	Y+1, r1	; 0x01
		while (1) {
			KPD_VGetValue(&key);
    2786:	ce 01       	movw	r24, r28
    2788:	04 96       	adiw	r24, 0x04	; 4
    278a:	0e 94 19 13 	call	0x2632	; 0x2632 <KPD_VGetValue>
			if (key >= 1 && key <= 10) {
    278e:	8c 81       	ldd	r24, Y+4	; 0x04
    2790:	9d 81       	ldd	r25, Y+5	; 0x05
    2792:	00 97       	sbiw	r24, 0x00	; 0
    2794:	c1 f3       	breq	.-16     	; 0x2786 <main+0x2e>
    2796:	8c 81       	ldd	r24, Y+4	; 0x04
    2798:	9d 81       	ldd	r25, Y+5	; 0x05
    279a:	8b 30       	cpi	r24, 0x0B	; 11
    279c:	91 05       	cpc	r25, r1
    279e:	98 f7       	brcc	.-26     	; 0x2786 <main+0x2e>

				if(CorrectPass[i] != ((key-1) + 48)){	//convert number to ASCII and Check every digit of Password
    27a0:	8a 81       	ldd	r24, Y+2	; 0x02
    27a2:	88 2f       	mov	r24, r24
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	fc 01       	movw	r30, r24
    27a8:	ef 5c       	subi	r30, 0xCF	; 207
    27aa:	fd 4f       	sbci	r31, 0xFD	; 253
    27ac:	80 81       	ld	r24, Z
    27ae:	28 2f       	mov	r18, r24
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	8c 81       	ldd	r24, Y+4	; 0x04
    27b4:	9d 81       	ldd	r25, Y+5	; 0x05
    27b6:	8f 96       	adiw	r24, 0x2f	; 47
    27b8:	28 17       	cp	r18, r24
    27ba:	39 07       	cpc	r19, r25
    27bc:	b9 f0       	breq	.+46     	; 0x27ec <main+0x94>
					LCD_VClearScreen();
    27be:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LCD_VClearScreen>
					LCD_VSendString("Incorrect password. ");
    27c2:	8e e7       	ldi	r24, 0x7E	; 126
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	0e 94 cd 10 	call	0x219a	; 0x219a <LCD_VSendString>
					trialCount++;
    27ca:	89 81       	ldd	r24, Y+1	; 0x01
    27cc:	8f 5f       	subi	r24, 0xFF	; 255
    27ce:	89 83       	std	Y+1, r24	; 0x01
					i =0 ;
    27d0:	1a 82       	std	Y+2, r1	; 0x02
					if(trialCount == maxTrials){
    27d2:	99 81       	ldd	r25, Y+1	; 0x01
    27d4:	8b 81       	ldd	r24, Y+3	; 0x03
    27d6:	98 17       	cp	r25, r24
    27d8:	b1 f6       	brne	.-84     	; 0x2786 <main+0x2e>
						LCD_VClearScreen();
    27da:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LCD_VClearScreen>
						LCD_VSendString("Too many incorrect attempts. Security system activated.");
    27de:	83 e9       	ldi	r24, 0x93	; 147
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	0e 94 cd 10 	call	0x219a	; 0x219a <LCD_VSendString>
						SecuritySystem();
    27e6:	0e 94 08 14 	call	0x2810	; 0x2810 <SecuritySystem>
    27ea:	c5 cf       	rjmp	.-118    	; 0x2776 <main+0x1e>
						break;
					}
				}
				else{
					LCD_VSendChar('*');
    27ec:	8a e2       	ldi	r24, 0x2A	; 42
    27ee:	0e 94 b3 10 	call	0x2166	; 0x2166 <LCD_VSendChar>
					i++;
    27f2:	8a 81       	ldd	r24, Y+2	; 0x02
    27f4:	8f 5f       	subi	r24, 0xFF	; 255
    27f6:	8a 83       	std	Y+2, r24	; 0x02
					if(i == (sizeof(CorrectPass)-1)){
    27f8:	8a 81       	ldd	r24, Y+2	; 0x02
    27fa:	84 30       	cpi	r24, 0x04	; 4
    27fc:	21 f6       	brne	.-120    	; 0x2786 <main+0x2e>
						LCD_VClearScreen();
    27fe:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LCD_VClearScreen>
						LCD_VSendString("Welcome! Door opening...");
    2802:	8b ec       	ldi	r24, 0xCB	; 203
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	0e 94 cd 10 	call	0x219a	; 0x219a <LCD_VSendString>
						OpenDoor();
    280a:	0e 94 2e 14 	call	0x285c	; 0x285c <OpenDoor>
    280e:	b3 cf       	rjmp	.-154    	; 0x2776 <main+0x1e>

00002810 <SecuritySystem>:
		}
	}
    return 0;
}

void SecuritySystem(void){
    2810:	df 93       	push	r29
    2812:	cf 93       	push	r28
    2814:	00 d0       	rcall	.+0      	; 0x2816 <SecuritySystem+0x6>
    2816:	cd b7       	in	r28, 0x3d	; 61
    2818:	de b7       	in	r29, 0x3e	; 62
	UINT16 Stop =0;
    281a:	1a 82       	std	Y+2, r1	; 0x02
    281c:	19 82       	std	Y+1, r1	; 0x01
	Dio_WriteChannel(PINB_5,HIGH);
    281e:	8d e0       	ldi	r24, 0x0D	; 13
    2820:	61 e0       	ldi	r22, 0x01	; 1
    2822:	0e 94 8f 0b 	call	0x171e	; 0x171e <Dio_WriteChannel>
	Dio_WriteChannel(PINB_6,HIGH);
    2826:	8e e0       	ldi	r24, 0x0E	; 14
    2828:	61 e0       	ldi	r22, 0x01	; 1
    282a:	0e 94 8f 0b 	call	0x171e	; 0x171e <Dio_WriteChannel>
    282e:	04 c0       	rjmp	.+8      	; 0x2838 <SecuritySystem+0x28>
	while(Stop != 16){				//To Stop Security System & System start again
		KPD_VGetValue(&Stop);
    2830:	ce 01       	movw	r24, r28
    2832:	01 96       	adiw	r24, 0x01	; 1
    2834:	0e 94 19 13 	call	0x2632	; 0x2632 <KPD_VGetValue>

void SecuritySystem(void){
	UINT16 Stop =0;
	Dio_WriteChannel(PINB_5,HIGH);
	Dio_WriteChannel(PINB_6,HIGH);
	while(Stop != 16){				//To Stop Security System & System start again
    2838:	89 81       	ldd	r24, Y+1	; 0x01
    283a:	9a 81       	ldd	r25, Y+2	; 0x02
    283c:	80 31       	cpi	r24, 0x10	; 16
    283e:	91 05       	cpc	r25, r1
    2840:	b9 f7       	brne	.-18     	; 0x2830 <SecuritySystem+0x20>
		KPD_VGetValue(&Stop);
	}
	Dio_WriteChannel(PINB_5,LOW);
    2842:	8d e0       	ldi	r24, 0x0D	; 13
    2844:	60 e0       	ldi	r22, 0x00	; 0
    2846:	0e 94 8f 0b 	call	0x171e	; 0x171e <Dio_WriteChannel>
	Dio_WriteChannel(PINB_6,LOW);
    284a:	8e e0       	ldi	r24, 0x0E	; 14
    284c:	60 e0       	ldi	r22, 0x00	; 0
    284e:	0e 94 8f 0b 	call	0x171e	; 0x171e <Dio_WriteChannel>
	return;
}
    2852:	0f 90       	pop	r0
    2854:	0f 90       	pop	r0
    2856:	cf 91       	pop	r28
    2858:	df 91       	pop	r29
    285a:	08 95       	ret

0000285c <OpenDoor>:

void OpenDoor(void){
    285c:	df 93       	push	r29
    285e:	cf 93       	push	r28
    2860:	00 d0       	rcall	.+0      	; 0x2862 <OpenDoor+0x6>
    2862:	cd b7       	in	r28, 0x3d	; 61
    2864:	de b7       	in	r29, 0x3e	; 62
	UINT16 Close = 0;
    2866:	1a 82       	std	Y+2, r1	; 0x02
    2868:	19 82       	std	Y+1, r1	; 0x01
	SRVM_voidOn (180);
    286a:	84 eb       	ldi	r24, 0xB4	; 180
    286c:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <SRVM_voidOn>
    2870:	04 c0       	rjmp	.+8      	; 0x287a <OpenDoor+0x1e>
	while(Close != 15){				//To close the Door & System start again
		KPD_VGetValue(&Close);
    2872:	ce 01       	movw	r24, r28
    2874:	01 96       	adiw	r24, 0x01	; 1
    2876:	0e 94 19 13 	call	0x2632	; 0x2632 <KPD_VGetValue>
}

void OpenDoor(void){
	UINT16 Close = 0;
	SRVM_voidOn (180);
	while(Close != 15){				//To close the Door & System start again
    287a:	89 81       	ldd	r24, Y+1	; 0x01
    287c:	9a 81       	ldd	r25, Y+2	; 0x02
    287e:	8f 30       	cpi	r24, 0x0F	; 15
    2880:	91 05       	cpc	r25, r1
    2882:	b9 f7       	brne	.-18     	; 0x2872 <OpenDoor+0x16>
		KPD_VGetValue(&Close);
	}
	SRVM_voidOn (90);
    2884:	8a e5       	ldi	r24, 0x5A	; 90
    2886:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <SRVM_voidOn>
	return;
}
    288a:	0f 90       	pop	r0
    288c:	0f 90       	pop	r0
    288e:	cf 91       	pop	r28
    2890:	df 91       	pop	r29
    2892:	08 95       	ret

00002894 <__udivmodhi4>:
    2894:	aa 1b       	sub	r26, r26
    2896:	bb 1b       	sub	r27, r27
    2898:	51 e1       	ldi	r21, 0x11	; 17
    289a:	07 c0       	rjmp	.+14     	; 0x28aa <__udivmodhi4_ep>

0000289c <__udivmodhi4_loop>:
    289c:	aa 1f       	adc	r26, r26
    289e:	bb 1f       	adc	r27, r27
    28a0:	a6 17       	cp	r26, r22
    28a2:	b7 07       	cpc	r27, r23
    28a4:	10 f0       	brcs	.+4      	; 0x28aa <__udivmodhi4_ep>
    28a6:	a6 1b       	sub	r26, r22
    28a8:	b7 0b       	sbc	r27, r23

000028aa <__udivmodhi4_ep>:
    28aa:	88 1f       	adc	r24, r24
    28ac:	99 1f       	adc	r25, r25
    28ae:	5a 95       	dec	r21
    28b0:	a9 f7       	brne	.-22     	; 0x289c <__udivmodhi4_loop>
    28b2:	80 95       	com	r24
    28b4:	90 95       	com	r25
    28b6:	bc 01       	movw	r22, r24
    28b8:	cd 01       	movw	r24, r26
    28ba:	08 95       	ret

000028bc <__divmodsi4>:
    28bc:	97 fb       	bst	r25, 7
    28be:	09 2e       	mov	r0, r25
    28c0:	05 26       	eor	r0, r21
    28c2:	0e d0       	rcall	.+28     	; 0x28e0 <__divmodsi4_neg1>
    28c4:	57 fd       	sbrc	r21, 7
    28c6:	04 d0       	rcall	.+8      	; 0x28d0 <__divmodsi4_neg2>
    28c8:	14 d0       	rcall	.+40     	; 0x28f2 <__udivmodsi4>
    28ca:	0a d0       	rcall	.+20     	; 0x28e0 <__divmodsi4_neg1>
    28cc:	00 1c       	adc	r0, r0
    28ce:	38 f4       	brcc	.+14     	; 0x28de <__divmodsi4_exit>

000028d0 <__divmodsi4_neg2>:
    28d0:	50 95       	com	r21
    28d2:	40 95       	com	r20
    28d4:	30 95       	com	r19
    28d6:	21 95       	neg	r18
    28d8:	3f 4f       	sbci	r19, 0xFF	; 255
    28da:	4f 4f       	sbci	r20, 0xFF	; 255
    28dc:	5f 4f       	sbci	r21, 0xFF	; 255

000028de <__divmodsi4_exit>:
    28de:	08 95       	ret

000028e0 <__divmodsi4_neg1>:
    28e0:	f6 f7       	brtc	.-4      	; 0x28de <__divmodsi4_exit>
    28e2:	90 95       	com	r25
    28e4:	80 95       	com	r24
    28e6:	70 95       	com	r23
    28e8:	61 95       	neg	r22
    28ea:	7f 4f       	sbci	r23, 0xFF	; 255
    28ec:	8f 4f       	sbci	r24, 0xFF	; 255
    28ee:	9f 4f       	sbci	r25, 0xFF	; 255
    28f0:	08 95       	ret

000028f2 <__udivmodsi4>:
    28f2:	a1 e2       	ldi	r26, 0x21	; 33
    28f4:	1a 2e       	mov	r1, r26
    28f6:	aa 1b       	sub	r26, r26
    28f8:	bb 1b       	sub	r27, r27
    28fa:	fd 01       	movw	r30, r26
    28fc:	0d c0       	rjmp	.+26     	; 0x2918 <__udivmodsi4_ep>

000028fe <__udivmodsi4_loop>:
    28fe:	aa 1f       	adc	r26, r26
    2900:	bb 1f       	adc	r27, r27
    2902:	ee 1f       	adc	r30, r30
    2904:	ff 1f       	adc	r31, r31
    2906:	a2 17       	cp	r26, r18
    2908:	b3 07       	cpc	r27, r19
    290a:	e4 07       	cpc	r30, r20
    290c:	f5 07       	cpc	r31, r21
    290e:	20 f0       	brcs	.+8      	; 0x2918 <__udivmodsi4_ep>
    2910:	a2 1b       	sub	r26, r18
    2912:	b3 0b       	sbc	r27, r19
    2914:	e4 0b       	sbc	r30, r20
    2916:	f5 0b       	sbc	r31, r21

00002918 <__udivmodsi4_ep>:
    2918:	66 1f       	adc	r22, r22
    291a:	77 1f       	adc	r23, r23
    291c:	88 1f       	adc	r24, r24
    291e:	99 1f       	adc	r25, r25
    2920:	1a 94       	dec	r1
    2922:	69 f7       	brne	.-38     	; 0x28fe <__udivmodsi4_loop>
    2924:	60 95       	com	r22
    2926:	70 95       	com	r23
    2928:	80 95       	com	r24
    292a:	90 95       	com	r25
    292c:	9b 01       	movw	r18, r22
    292e:	ac 01       	movw	r20, r24
    2930:	bd 01       	movw	r22, r26
    2932:	cf 01       	movw	r24, r30
    2934:	08 95       	ret

00002936 <__prologue_saves__>:
    2936:	2f 92       	push	r2
    2938:	3f 92       	push	r3
    293a:	4f 92       	push	r4
    293c:	5f 92       	push	r5
    293e:	6f 92       	push	r6
    2940:	7f 92       	push	r7
    2942:	8f 92       	push	r8
    2944:	9f 92       	push	r9
    2946:	af 92       	push	r10
    2948:	bf 92       	push	r11
    294a:	cf 92       	push	r12
    294c:	df 92       	push	r13
    294e:	ef 92       	push	r14
    2950:	ff 92       	push	r15
    2952:	0f 93       	push	r16
    2954:	1f 93       	push	r17
    2956:	cf 93       	push	r28
    2958:	df 93       	push	r29
    295a:	cd b7       	in	r28, 0x3d	; 61
    295c:	de b7       	in	r29, 0x3e	; 62
    295e:	ca 1b       	sub	r28, r26
    2960:	db 0b       	sbc	r29, r27
    2962:	0f b6       	in	r0, 0x3f	; 63
    2964:	f8 94       	cli
    2966:	de bf       	out	0x3e, r29	; 62
    2968:	0f be       	out	0x3f, r0	; 63
    296a:	cd bf       	out	0x3d, r28	; 61
    296c:	09 94       	ijmp

0000296e <__epilogue_restores__>:
    296e:	2a 88       	ldd	r2, Y+18	; 0x12
    2970:	39 88       	ldd	r3, Y+17	; 0x11
    2972:	48 88       	ldd	r4, Y+16	; 0x10
    2974:	5f 84       	ldd	r5, Y+15	; 0x0f
    2976:	6e 84       	ldd	r6, Y+14	; 0x0e
    2978:	7d 84       	ldd	r7, Y+13	; 0x0d
    297a:	8c 84       	ldd	r8, Y+12	; 0x0c
    297c:	9b 84       	ldd	r9, Y+11	; 0x0b
    297e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2980:	b9 84       	ldd	r11, Y+9	; 0x09
    2982:	c8 84       	ldd	r12, Y+8	; 0x08
    2984:	df 80       	ldd	r13, Y+7	; 0x07
    2986:	ee 80       	ldd	r14, Y+6	; 0x06
    2988:	fd 80       	ldd	r15, Y+5	; 0x05
    298a:	0c 81       	ldd	r16, Y+4	; 0x04
    298c:	1b 81       	ldd	r17, Y+3	; 0x03
    298e:	aa 81       	ldd	r26, Y+2	; 0x02
    2990:	b9 81       	ldd	r27, Y+1	; 0x01
    2992:	ce 0f       	add	r28, r30
    2994:	d1 1d       	adc	r29, r1
    2996:	0f b6       	in	r0, 0x3f	; 63
    2998:	f8 94       	cli
    299a:	de bf       	out	0x3e, r29	; 62
    299c:	0f be       	out	0x3f, r0	; 63
    299e:	cd bf       	out	0x3d, r28	; 61
    29a0:	ed 01       	movw	r28, r26
    29a2:	08 95       	ret

000029a4 <_exit>:
    29a4:	f8 94       	cli

000029a6 <__stop_program>:
    29a6:	ff cf       	rjmp	.-2      	; 0x29a6 <__stop_program>
